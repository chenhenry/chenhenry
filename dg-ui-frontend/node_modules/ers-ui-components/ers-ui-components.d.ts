/**
 * ers-ui-components - 
 * @version v0.5.0-DEV.20160527193114
 * @link http://ersgit.analytics.moodys.net/projects/ERSUI
 * @authors ERS UI Component Team
 * @license private
 */

/// <reference path="../../DefinitelyTyped/angular/angular.d.ts" />
/// <reference path="../../DefinitelyTyped/jquery/jquery.d.ts" />
/// <reference path="../../DefinitelyTyped/angular-ui/angular-ui-bootstrap.d.ts" />
/// <reference path="../../DefinitelyTyped/angular-ui-router/angular-ui-router.d.ts" />
/// <reference path="../../DefinitelyTyped/ui-router-extras/ui-router-extras.d.ts" />
/// <reference path="../../DefinitelyTyped/fusioncharts/fusioncharts.d.ts" />
/// <reference path="../../DefinitelyTyped/ag-grid/ag-grid.d.ts" />

/**
 * Created by serpoletg on 16/07/2015.
 */
declare module ers.components.utility.checks {
    /**
     * Test if a value is truly a number, NaN not considered as a valid number.
     * @param pValue Object to test.
     * @return {boolean} True if parameter is a number.
     */
    function isNumber(pValue: Object): boolean;
    /**
     * Test if a string value is different from undefined, null and empty string.
     * @param pValue Value to test.
     * @return {boolean} Boolean.
     */
    function isEmpty(pValue: string): boolean;
}

declare module ers.components.core.service {
    interface ITemplateHelper {
        fetchTemplate(url: string): string | ng.IPromise<string>;
    }
}

declare module ers.components.core.service {
    /**
     * Defines a shared pdf service which convert a html DOM into PDF.
     */
    interface IPDFService {
        /**
         * Convert a HTML DOM into PDF.
         *
         * @param dom The DOM node to be converted into pdf
         * @param callback A callback function to receive the generated pdf data as a string
         */
        createPDF(dom: HTMLElement, callback: (dataUri: string) => void): void;
    }
}

declare module ers.components.core.service {
    /**
     * The validator interface that registers INgModelController.$validators.
     */
    interface IValidator {
        (modelView?: Object, viewValue?: Object): boolean;
    }
    /**
     *
     * The validation rule that combines a validator and its error message.
     *
     */
    interface IValidationRule {
        key: string;
        errorMessage: string;
        validator?: IValidator;
    }
    /**
     *
     * The interface used register the expected controller, IValidationManager.
     *
     */
    interface IValidationTarget {
        /**
         * The function that retrieves the error message target.
         */
        focusedElement(): ng.IAugmentedJQuery;
        /**
         * The function that retrieves the array of validation rules.
         */
        validationRules(): IValidationRule[];
        /**
         * The function that retrieves an instance of NgModelController,
         * in which validators of validator rules will be registered
         */
        ngModelController: ng.INgModelController;
        /**
         *
         * Function to retrieve when the model is invalid and tooltip visibility needs to be determined.
         *
         */
        showError?(): boolean;
        /** @returns Get the ID of the target element. */
        id(): string;
    }
    /**
     * A ValidationManager interface used to reigster & unregister IValidationTarget instances
     */
    interface IValidationManager {
        /**
         * Register an IValidationTarget instance
         *
         * @param target The IValidationTarget instance to register
         */
        registerTarget(target: IValidationTarget): void;
        /**
         * Unregister an IValidationTarget instance
         *
         * @param target The IValidationTarget instance to unregister
         */
        unregisterTarget(target: IValidationTarget): void;
        /** Show or hide error message. */
        manageMessage(target: IValidationTarget): void;
        /** Reload the message in order to take into account the dynamical messages. */
        reloadMessage(target: IValidationTarget): void;
    }
    /**
     *  A Validation Manager Provider interface to get an IValidationManager instance
     */
    interface IValidationManagerProvider extends ng.IServiceProvider {
        /**
         * register the service name of error renderer that will be injected into the IValidationManager instance
         *
         * @param name service name of IValidationErrorRender instance registered in angular
         */
        setErrorRendererName(name: string): any;
    }
    /**
     * A Validation Error Render interface to show/hide error messages caused by validation
     */
    interface IValidationErrorRender {
        /**
         * Create or show the messages on a specfic html element
         *
         * @param targetElement The element that error messages will be shown upon.
         * @param errorMessageProvider The function to get a array of error messages
         */
        render(targetElement: ng.IAugmentedJQuery, targetID: string, errorMessageProvider: () => string[]): any;
        /**
         * Destroy or hide the messages previously shown by the renderer on a specfic html element
         *
         * @param targetElement The element that error messages will be cleared
         */
        clear(targetElement: ng.IAugmentedJQuery): any;
    }
}

declare module ers.components.core.service {
    /**
     * Model object of placement
     */
    interface IPlacementObject {
        auto: boolean;
        side: string;
        alignment: string;
        toString(): string;
    }
    /**
     * The placement service is a common shared service for popup element positioning
     */
    interface IPlacementService {
        /**
         * Puts the target element in a specific position aside the reference point or element
         *
         * @param target The target element to place
         * @param reference The positioning reference which the target will be placed aside. Can be an element or screen coordinate.
         * @param placement Specifies on which side or direction of reference target will be placed.
         *        If the reference is an element, there are for 12 options:
         *
         *                                target
         *                        **********************
         *                              -----------
         *                             |           |
         *        "top":               | reference |
         *                             |           |
         *                              -----------
         *
         *                                              target
         *                             **********************
         *                              -----------
         *                             |           |
         *        "top-left":          | reference |
         *                             |           |
         *                              -----------
         *
         *                   target
         *                   **********************
         *                              -----------
         *                             |           |
         *        "top-right":         | reference |
         *                             |           |
         *                              -----------
         *
         *                              -----------
         *                             |           |
         *        "bottom":            | reference |
         *                             |           |
         *                              -----------
         *                          *********************
         *                                 target
         *
         *                              -----------
         *                             |           |
         *        "bottom-left":       | reference |
         *                             |           |
         *                              -----------    target
         *                             **********************
         *
         *                              -----------
         *                             |           |
         *        "bottom-right":      | reference |
         *                             |           |
         *                    target    -----------
         *                   **********************
         *
         *                              -----------
         *                    target   |           |
         *        "left":    ********* | reference |
         *                             |           |
         *                              -----------
         *
         *                              target   -----------
         *                            ********* |           |
         *        "left-top":                   | reference |
         *                                      |           |
         *                                       -----------
         *
         *                                       -----------
         *                                      |           |
         *        "left-top":           target  | reference |
         *                            ********* |           |
         *                                       -----------
         *
         *                                       -----------
         *                                      |           | target
         *        "right":                      | reference | *********
         *                                      |           |
         *                                       -----------
         *
         *                                       -----------  target
         *                                      |           | *********
         *        "right-top":                  | reference |
         *                                      |           |
         *                                       -----------
         *
         *
         *                                       -----------
         *                                      |           |
         *        "right-top":                  | reference |   target
         *                                      |           | *********
         *                                       -----------
         *
         *        If the reference is a coordinate, there are also 12 options:
         *
         *
         *                                       ----------
         *                                      |          |
         *        "top":                        |  target  |
         *                                      |          |
         *                                       ----------
         *                                            * reference
         *
         *
         *                                       ----------
         *                                      |          |
         *        "top-left", "left-top":       |  target  |
         *                                      |          |
         *                                       ----------
         *                                                 * reference
         *
         *
         *                                       ----------
         *                                      |          |
         *        "bottom":                     |  target  |
         *                                      |          |
         *                                       ----------
         *                                            * reference
         *
         *
         *                                                 * reference
         *                                       ----------
         *                                      |          |
         *        "bottom-left", "left-bottom": |  target  |
         *                                      |          |
         *                                       ----------
         *
         *
         *                                       ----------
         *                                      |          |
         *        "left":                       |  target  | * reference
         *                                      |          |
         *                                       ----------
         *
         *
         *                                       ----------
         *                                      |          |
         *        "right":          reference * |  target  |
         *                                      |          |
         *                                       ----------
         *
         *
         *                                                  * reference
         *                                                   ----------
         *                                                  |          |
         *        "right-bottom", "bottom-right":           |  target  |
         *                                                  |          |
         *                                                   ----------
         *
         *
         *                                        ----------
         *                                       |          |
         *        "right-top", "top-right":      |  target  |
         *                                       |          |
         *                                        ----------
         *                                                  * reference
         *
         *        Each option can be used together with "auto" like: "auto left", "auto left-top", "right auto", "bottom-right auto"......,
         *        so that the placement service will the auto judge the best placement if specified placement can not be
         *        perfectly satisfied
         *
         * @param container The parent element of the target. "body" by default if not specified.
         *
         * @Returns The placed target element
         *
         */
        applyPlacement(target: JQuery, reference: JQuery | JQueryCoordinates, placement: string | IPlacementObject, container: string | JQuery): JQuery;
        /**
         * Check if a placement string is valid or acceptable
         *
         * @param placement The placement string
         */
        isValid(placement: string): boolean;
        /**
         * Convert the placement string to the model object that implements [[IPlacementObject]]
         *
         * @param The placement string to convert
         *
         * @Returns The transformed [[IPlacementObject]] instance
         */
        toPlacementObject(placement: string): IPlacementObject;
    }
}

declare module ers.components.core.service {
    interface IResizeDimensions {
        width: number;
        height: number;
    }
    interface IResizeListener {
        resizeDidOccur(dimensions: IResizeDimensions): any;
    }
    /**
     * @ngdoc service
     * @module ers.services.resize
     * @name ResizeService
     *
     * @description
     *
     * Defines a resize service usable by components.
     */
    interface IResizeService {
        /**
         * @ngdoc method
         * @name ResizeService#registerListener
         *
         * @description
         *
         * Registers a listener that will be called when a resize event fires.
         *
         *
         * @param {IResizeListener} listener The listener to be registered.
         *
         * Must conform to the IResizeListener interface.
         */
        registerListener(listener: IResizeListener): void;
    }
}

declare module ers.components.core.service {
    /**
     *
     */
    interface IContainerEventService {
        /**
         * Register a listener to be notified when an event was sent from a parent container
         * @param eventType type of the event
         * @param $scope scope of the component
         * @param listener listener
         */
        on(eventType: string, $scope: ng.IScope, listener: Function): void;
        /**
         * Dispatches an event to children => executes all listeners
         * @param eventType type of the event
         * @param $scope scope of the container
         */
        dispatch(eventType: string, $scope: ng.IScope): void;
        /**
         * Register an event dispatcher.
         * @param eventTypes types of the event
         * @param $scope scope of the container.
         */
        registerDispatcher(eventTypes: (Array<string> | string), $scope: ng.IScope): void;
    }
}


/**
 * The Core Services Module
 *
 * Created by zhangfa on 3/18/2015.
 */
declare module ers.components.core.service {
    var _module: ng.IModule;
}


/**
 * Created by zhangfa on 5/28/2015.
 */
declare module ers.components.utility {
    import IValidationRule = ers.components.core.service.IValidationRule;
    var DEFAULT_VALIDATION_RULES: {
        REQUIRED: () => IValidationRule;
        PATTERN: (pattern: string) => IValidationRule;
        MIN_LENGTH: (minLength: number) => IValidationRule;
        MAX_LENGTH: (maxlength: number) => IValidationRule;
        NUMBER: () => IValidationRule;
        NUMBER_RANGE: (min: number, max: number, excMin: boolean, excMax: boolean, minError: string, maxError: string) => IValidationRule;
        MODEL: () => IValidationRule;
        DATE: () => IValidationRule;
        PARSE_DATE: () => IValidationRule;
        MIN_DATE: (minDate: () => Date, formatMinDate: () => string) => IValidationRule;
        MAX_DATE: (maxDate: () => Date, formatMaxDate: () => string) => IValidationRule;
    };
}


declare module ers.components.utility {
    /**
     * Interface of keyboard events
     */
    interface IKEY {
        LEFT_ARROW: number;
        UP_ARROW: number;
        RIGHT_ARROW: number;
        DOWN_ARROW: number;
        SPACE_BAR: number;
        ENTER: number;
        ESCAPE: number;
        TAB: number;
        BACKSPACE: number;
    }
    /**
     * Utility which contains the keyboard event constants.
     */
    var KEY: IKEY;
}


/**
 * Created by zhangfa on 6/25/2015.
 */
declare module ers.components.utility {
    interface ITriggerEventHandler {
        onTrigger: (e?: JQueryEventObject) => void;
        onUntrigger?: (e?: JQueryEventObject) => void;
        toggle?: (e?: JQueryEventObject) => void;
    }
    class TriggerBindUtil {
        static bind($host: ng.IAugmentedJQuery, triggers: string, handler: ITriggerEventHandler): void;
        static unBind($host: ng.IAugmentedJQuery, triggers: string, handler: ITriggerEventHandler): void;
    }
}

/**
 * Created by BERTHETO on 11/28/2014.
 *
 * The component Module.
 */
declare module ers.components.core {
    var coreModule: ng.IModule;
}


declare module ers.components.utility {
}


declare module ers.components.utility {
}

/**
 * Created by germonneauf on 10/8/2015.
 */
declare module ers.components.core {
    /**
     * Interface for ERS Component.
     */
    interface IComponent {
        /**
         * Provide the appropriate delegate element for tooltip event binding.
         * Should be overridden by child class to retrieve the appropriate DOM element on which tooltip binding is dedicated.
         * Default behavior: return the root directive element.
         */
        getTooltipDelegate: (type: string) => ng.IAugmentedJQuery;
    }
}


/**
 * Created by germonneauf on 10/7/2015.
 */
declare module ers.components.core {
    /**
     * This interface is restricted to ERS Component object and
     * provides a way to access BaseComponent from a angular element
     */
    interface IComponentElement extends HTMLElement {
        getErsComponent: () => IComponent;
    }
}


/**
 * Created by germonneauf on 10/7/2015.
 */
declare module ers.components.core {
    /**
     * This interface provides appropriate delegate (i.e angular element) on which apply tootltip binding event depending
     * on type of event specifies by a string (i.e "focus", "mouseenter", "mouseleave", ...)
     */
    interface ITooltipDelegateProvider {
        getTooltipDelegate: (type: string) => ng.IAugmentedJQuery;
    }
}


/**
 * Created by fangiot on 12/12/2014.
 */
declare module ers.components.core {
    /**
     * Base controller for all component controllers. Stores a reference to the scope and element and adds the
     * 'ers-component' class to the element.
     */
    class BaseController {
        /**
         * @private
         *
         * The scope to which this directive is bound.
         */
        protected $scope: ng.IScope;
        /**
         * @private
         *
         * The element to which this directive is linked.
         */
        protected $element: ng.IAugmentedJQuery;
        /**
         * Attributes of the directive. For internal use only.
         */
        protected $attrs: ng.IAttributes;
        protected $document: ng.IDocumentService;
        /**
         * This method is to be called by classes that extend BaseController. You should never create an instance of this
         * class directly.
         *
         * @constructor
         *
         * @param $scope The scope to which this directive is bound.
         * @param $element The jQuery element to which this directive is bound.
         */
        constructor($scope?: ng.IScope, $element?: ng.IAugmentedJQuery, $attrs?: ng.IAttributes, $document?: ng.IDocumentService);
        /**
         * Links this directive to the specified element and adds the `ers-component` class as well.
         *
         * @param $scope The scope to which this directive is bound.
         * @param element The element to which this directive should be linked.
         * @param attributes The array of attributes on the HTML element.
         */
        link($scope: ng.IScope, element: ng.IAugmentedJQuery, attributes: ng.IAttributes): void;
    }
}


declare module ers.components.core {
    /**
     * Base component for all components.
     */
    class BaseComponent extends BaseController implements IComponent, ITooltipDelegateProvider {
        /** Angular timeout service. Currently used to execute a function when the model controller is fully loaded. */
        protected $timeout: ng.ITimeoutService;
        /** Disabled component property. */
        protected _disabled: boolean;
        /**
         * This method is to be called by classes that extend BaseComponent. You should never create an instance of this
         * class directly.
         *
         * @param $element The component element.
         * @param $timeout Angular timeout service. Currently used to execute a function when the model controller is fully loaded.
         */
        constructor($scope: ng.IScope, $element?: ng.IAugmentedJQuery, $attrs?: ng.IAttributes, $timeout?: ng.ITimeoutService);
        /**
         * This function configure the ERS focus detection in order to set the "ers-focus" CSS class on the current directive
         * when the component gets the focus, and then to remove this CSS class when the component loses the focus.
         * I made this trick because is not easy to play with the focus state in CSS when the focus in/out is not applied directly
         * on the directive component but in a wrapped input.
         */
        private configureERSFocusDetection();
        /**
         * Provide the appropriate delegate element for tooltip event binding.
         * Should be overridden by child class to retrieve the appropriate DOM element on which tooltip binding is dedicated.
         * Default behavior: return the root directive element.
         */
        getTooltipDelegate(type?: string): ng.IAugmentedJQuery;
        /**
         * @returns {boolean} Returns true if the component is disabled, false otherwise.
         */
        /**
         * Set the disabled state for this current component.
         * @param value The new disabled state for this component.
         */
        ngDisabled: boolean;
    }
}


declare module ers.components.accordion {
    import AccordionComponent = ers.components.accordion.AccordionComponent;
    import BaseController = ers.components.core.BaseController;
    class AccordionGroupComponent extends BaseController {
        /**
         * This is the parent accordion. It is automatically set by the accordion group component when it is initialized.
         *
         */
        parent: AccordionComponent;
        private headingTransclude;
        heading: string;
        subheading: string;
        private _isOpen;
        ngDisabled: boolean;
        constructor($scope: ng.IScope);
        setHeadingTransclude(element: ng.IAugmentedJQuery): void;
        toggleOpen(): void;
        /**
         * @returns {boolean} Returns true when the group component is open, false when the group component is closed.
         */
        /**
         * Sets the _isOpen value.
         * @param value The new value for the _isOpen property.
         */
        isOpen: boolean;
    }
}

declare module ers.components.accordion {
    import AccordionGroupComponent = ers.components.accordion.AccordionGroupComponent;
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * AccordionComponent class
     * @class
     */
    class AccordionComponent extends BaseComponent {
        groups: AccordionGroupComponent[];
        closeOthers: boolean;
        ngDisabled: boolean;
        /**
         * @constructor
         * @param $scope The isolated scope.
         */
        constructor($scope: ng.IScope);
        /**
         * @function Ensures that all of the groups in this accordion are closed unless the close-others attribute
         * explicitly prevents them from closing.
         *
         *
         * @param openGroup specifies the group or groups to remain open.
         */
        closeOtherAccordions(openGroup: AccordionGroupComponent): void;
        /**
         * @function This is called from the accordion-group directive and adds itself to the accordion.
         * @param The group directive.
         */
        addGroup(group: AccordionGroupComponent): void;
        /**
         * @function This is called from the accordion-group directive when it is time to remove the Accordion
         * group.
         * @param The group.
         */
        removeGroup(group: AccordionGroupComponent): void;
    }
}

declare module ers.components.button {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * @ngdoc directive
     * @module ers.components.button
     * @scope
     * @transclude
     * @data
     * @binding
     * @name ersButton
     * @restrict E
     * @constructor
     *
     * @description
     *
     * A button performs the defined action when the user clicks it.
     *
     * - Buttons can only consist of text and/or an icon.
     * - Buttons must contain either a click event, an href, an ui-sref, or a type (for form actions).
     * - Buttons labels should be clear. Limit the button text (less is more).
     *
     * ### Usage
     *
     * - Use <b>Primary Buttons</b> for primary actions (for example, "Submit", "Login", or "Save").
     * Avoid having multiple primary buttons on the same screen.
     * - Use <b>Secondary Buttons</b> for secondary actions that accompany the primary call-to-action (for example, "Reset" or "Cancel").
     * - Use <b>Icon Buttons</b> only for special use cases where standard label buttons are too large to use (for example, Tool Bars).
     *
     * ### Examples
     *
     * #### Standard Buttons
     *
     * Primary and secondary buttons.
     *
     * <code-editor identifier="example1" data-title="Basic Buttons" html-content-url="demos/ersButton/basic/index.html"
     * js-content-url="demos/ersButton/basic/script.js" css-content-url="demos/ersButton/basic/styles.css"
     * content-mode="html"></code-editor>
     *
     * #### Disabled State
     *
     * Buttons in disabled state.
     *
     * <code-editor identifier="example2" data-title="Disabled Buttons" html-content-url="demos/ersButton/disabled/index.html"
     * js-content-url="demos/ersButton/disabled/script.js" css-content-url="demos/ersButton/disabled/styles.css"
     * content-mode="html"></code-editor>
     *
     * #### Form Buttons
     *
     * Submit and reset button in a form.
     *
     * <code-editor identifier="example4" data-title="Form Buttons" html-content-url="demos/ersButton/form/index.html"
     * js-content-url="demos/ersButton/form/script.js" css-content-url="demos/ersButton/form/styles.css"
     * content-mode="html"></code-editor>
     *
     * ### Design Guidelines
     *
     * No design guidelines.
     *
     * ### Accessibility Guidelines
     *
     * No accessibility guidelines.
     *
     * @param {string} [class=primary] {=?}
     * Specifies a static button class. Supported values are: primary and secondary.
     *
     * @param {string} [ng-class] {@?}
     * Specifies a dynamic button class.
     *
     *  @param {string} [type=button] {@?}
     * Specifies the type of button. When using a button in a form, set to either submit or reset. Supported values are: button, submit, and
     *  reset.
     *
     * @param {string} [ng-disabled=false] {=?}
     * Specifies whether or not the button is disabled. When the button is disabled, no action is possible and
     *  the button appears in the disabled style.
     *
     * @param {string} [form] {@}
     * Specifies the button form ID if the button is an auto commit.
     *
     */
    class ButtonComponent extends BaseComponent {
        /**
         * Class set on the directive.
         * ```xml
         * <ers-button class="'primary'"></ers-button>
         * ```
         */
        class: string;
        /**
         * The button label.
         *
         * Specifies the text that appears on the button.
         * ```xml
         * <ers-button label="My button"></ers-button>
         *
         * ```
         */
        label: string;
        /**
         * The button name.
         *
         * Corresponds to the tag's `name` attribute.
         *
         * ```xml
         * <ers-button name="Mybutton"></ers-button>
         * ```
         */
        name: string;
        /**
         * The form ID to which the button is attached.
         *
         * Corresponds to the tag's `form` attribute.
         * ```xml
         * <form name="myForm" role="form" id="myForm">
         *    <ers-button form="myForm" type="submit"></ers-button>
         * </form>
         *
         * ```
         */
        _form: string;
        /**
         * The button type, which corresponds to the tag `type` attribute.
         *```xml
         * <ers-button type="submit"></ers-button>
         * ```
         */
        type: string;
        /**
         *  Specify true to disable the button.
         *  ```xml
         * <ers-button disabled="true"></ers-button>
         * ```
         */
        disabled: boolean;
        /**
         *  ngClass set on the directive.
         *  ```xml
         * <ers-button ng-class="'primary'"></ers-button>
         * ```
         *
         */
        private _ngClass;
        private rootElement;
        static $inject: string[];
        /**
         * Constructor:
         * @param element DOM element of the injected directive.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery);
        /**
         * Manages the default CSS class directive.
         * If no directive class is defined, a default CSS class named 'primary' is added.
         */
        private updateClass();
        /**
         * For MSIE 11 only. When the event handler detects a button click, it checks to see if the component is
         * disabled. Events for disabled buttons are stopped.
         * @param e mouse event.
         */
        onClick(e: MouseEvent): void;
        ngClass: string;
        form: string;
    }
}

declare module ers.components.form {
    import IComponent = ers.components.core.IComponent;
    /**
     * The ers component error validation interface.
     */
    interface IFormModelValidator extends IComponent {
        /**
         * Called when submit is clicked. Reset controls have to manage the validation error messages.
         */
        manageErrorMessage(): void;
    }
}


declare module ers.components.form {
    var _formModule: ng.IModule;
}


declare module ers.components.form {
    /**
     * This service is used to interact with an HTML form.
     */
    class FormService {
        /**
         * The CSS Class that is set when the form is submitted.
         */
        static CSSCLASSNAME: string;
        /**
         * This function highlights the invalid components in the form via a specific CSS (ers-submitted) placed at
         * the components level.
         *
         * @param formElement The form element on which we display the component validation.
         * @returns {boolean} True if the HTML form is valid, otherwise false.
         */
        showValidation(formElement: ng.IAugmentedJQuery): boolean;
        /**
         * Removes the CSS class "ers-submitted" on all of the ng model elements.
         *
         * @param formElement The form element on which we will show the component validation.
         * @param resetModelStyle If true (default), the style of ng model controller (dirty, touched).
         * @returns {boolean} If the HTML form is valid, true, otherwise, false.
         *
         */
        hideValidation(formElement: ng.IAugmentedJQuery, resetModelStyle?: boolean): boolean;
        /**
         * Loops on all ng model elements and iterates the function for each element.
         * @param formElement The form element.
         * @param iterator The function to execute for each element.
         * @returns {boolean} True if the HTML form is valid, otherwise, false.
         */
        private forEachModel(formElement, iterator);
    }
}


declare module ers.components.core {
    import IValidationManager = ers.components.core.service.IValidationManager;
    import IValidationTarget = ers.components.core.service.IValidationTarget;
    import IValidationRule = ers.components.core.service.IValidationRule;
    import IFormValidator = ers.components.form.IFormModelValidator;
    /**
     * Class which will be extended by all the editable components which can be used in an HTML form.
     */
    class EditComponent extends BaseComponent implements IValidationTarget, IFormValidator {
        /** Validation manager service. Used to register current controller as an IValidationTarget instance **/
        private _vm;
        /** The model controller which contains the ng-model value. */
        private _ngModelCtrl;
        /**
         * Constructor of the edit component.
         *
         * @param $element The component element.
         * @param $timeout Angular timeout service. Currently used to execute a function when the model controller is fully loaded.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, $attrs: ng.IAttributes, $timeout: ng.ITimeoutService, vm: IValidationManager);
        /**
         * @returns {IValidationManager} Returns the validation manager service.
         */
        vm: IValidationManager;
        ngModelController: ng.INgModelController;
        /**
         * @returns {string} Returns the ID attribute of the current component.
         */
        id(): string;
        /**
         * Error message is created only if the control is not "pristine" or if the a form was triggered!
         * @returns {boolean} true if the errorMessage should be created
         */
        showError(): boolean;
        focusedElement(): ng.IAugmentedJQuery;
        validationRules(): IValidationRule[];
        /**
         * Method used to configure how to do when the model controller is fully loaded. Can be override by sub components.
         */
        onNgModelCtrlLoaded(): void;
        /**
         * This function can be override BUT you must make a call of this base function from the sub function.
         * Set the model controller.
         * @param value The model controller.
         */
        setNgModelController(value: ng.INgModelController): void;
        /**
         * Called when a submit is submitted / reset => controls have to manage the validation error messages
         */
        manageErrorMessage(): void;
    }
}

/**
 * @ngdoc directive
 *
 * @name ersCalendar
 *
 * @restrict E
 * @module ers.components.calendar
 *
 * @description
 *
 * A calendar can display a date picker and/or validate entered dates.
 *
 * ### Usage
 *
 * - Use a calendar when you need a user to provide a date.
 *
 * ### Examples
 *
 * #### Basic Usage
 *
 * A basic calendar and the associated date picker.
 *
 * <code-editor identifier="example1" data-title="Basic Calendar" html-content-url="demos/ersCalendar/basicUsage/index.html"
 * js-content-url="demos/ersCalendar/basicUsage/script.js" css-content-url="demos/ersCalendar/basicUsage/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Custom Date Format
 *
 * Define the format of the displayed date.
 *
 * <code-editor identifier="example2" data-title="Custom Date Format" html-content-url="demos/ersCalendar/customDateFormat/index.html"
 * js-content-url="demos/ersCalendar/customDateFormat/script.js" css-content-url="demos/ersCalendar/customDateFormat/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Date Range
 *
 * Define the min and max dates.
 *
 * <code-editor identifier="example3" data-title="Other Usage" html-content-url="demos/ersCalendar/otherUsage/index.html"
 * js-content-url="demos/ersCalendar/otherUsage/script.js" css-content-url="demos/ersCalendar/otherUsage/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Non Editable Calendars
 *
 * Disabled and Read Only.
 *
 * <code-editor identifier="example3" data-title="Other Usage" html-content-url="demos/ersCalendar/disabledReadonly/index.html"
 * js-content-url="demos/ersCalendar/disabledReadonly/script.js" css-content-url="demos/ersCalendar/disabledReadonly/styles.css"
 * content-mode="html"></code-editor>
 *
 * ### Design Guidelines
 *
 * No design guidelines.
 *
 * ### Accessibility Guidelines
 *
 * No accessibility guidelines.
 *
 * @param {expression} ng-model {=}
 *
 * Binds a model to the scope.
 *
 * @param {expression} ng-change {&?}
 *
 * Evaluates the given expression when the user changes the input. The expression is evaluated immediately, unlike the
 * JavaScript onchange event which only triggers at the end of a change.
 *
 * @param {expression} [ng-readonly=false] {=?}
 *
 * Specifies whether or not the calendar is editable.
 *
 * @param {expression} [ng-disabled=false] {=?}
 *
 * Specifies whether or not the calendar is disabled. When disabled, the calendar is not editable and appears in the disabled style.
 *
 * @param {string} [date-format=yyyy-MM-dd] {@?}
 * Sets the displayed date format. For example, yyyy/MM/dd, where 'yyyy' is the fully qualified year, 'MM' is the two digit month, and 'dd'
 *  is the two digit day. For more information about the date format pattern, see the Angular date filter documentation.
 *
 * @param {string} [min-date] {=?}
 *
 * Sets the minimum date that the user can choose.
 *
 *
 * @param {string} [max-date] {=?}
 *
 * Sets the maximum date that the user can choose.
 *
 *
 *
 * @param {string} [current-text=Today] {@?}
 *
 * Sets the text on the button that selects the current date.
 *
 *
 * @param {string} [close-text=Done] {@?}
 *
 * Sets the text on the button that closes the date picker.
 *
 *
 *
 * @param {string} [clear-text=Clear] {@?}
 *
 * Sets the text on the button that resets the calendar.
 *
 *
 * @param {boolean} [show-button-bar=false] {=?}
 *
 * Sets whether or not to display the button bar.
 *
 *
 *
 *
 *
 *
 */
declare module ers.components.calendar {
    import IValidationManager = ers.components.core.service.IValidationManager;
    import IValidationRule = ers.components.core.service.IValidationRule;
    import EditComponent = ers.components.core.EditComponent;
    class CalendarComponent extends EditComponent {
        private _filter;
        static DEFAULT_DATE_FORMAT: string;
        showButtonBar: any;
        ngModel: any;
        ngReadonly: any;
        ngRequired: any;
        ngDisabled: any;
        dateFormat: any;
        minDate: any;
        maxDate: any;
        currentText: any;
        clearText: any;
        closeText: any;
        isOpen: any;
        ngChange: any;
        dateOptions: Object;
        calendarId: any;
        popup: any;
        ngModelController: any;
        appendToBody: any;
        onClose: any;
        protected $scope: ng.IScope;
        protected $document: ng.IDocumentService;
        protected $attrs: ng.IAttributes;
        protected $element: ng.IAugmentedJQuery;
        static $inject: string[];
        constructor($scope: ng.IScope, $document: ng.IDocumentService, $attrs: ng.IAttributes, $element: ng.IAugmentedJQuery, vm: IValidationManager, $timeout: ng.ITimeoutService, $filter: ng.IFilterService, $exceptionHandler: ng.IExceptionHandlerService);
        link(): void;
        hasBeenOpened: boolean;
        open(): void;
        dateChanged(): void;
        validationRules(): IValidationRule[];
        private setWatchers();
    }
}


declare module ers.components.core.scope {
    interface IEditableScope extends ng.IScope {
        /**
         * Name of the ng-model to be used
         * Mandatory parameter or the component will not work
         */
        ngModel: Object;
        ngReadonly: boolean;
        ngRequired: boolean;
        ngDisabled: boolean;
    }
}

declare module ers.components.calendar {
    import IEditableScope = ers.components.core.scope.IEditableScope;
    interface ICalendarScope extends IEditableScope {
        /**
         * Sets the date format based on the Angular
         * date filter.
         */
        dateFormat: string;
        /**
         * Sets the minimum date a user can select.
         * This is an optional parameter
         */
        minDate: Date;
        /**
         * Sets the maximum date a user can select.
         * This is an optional parameter
         */
        maxDate: Date;
        /**
         * Sets the customizable text displayed to the user when the user clicks the 'Select Today's Date' button in the
         * calendar pop-up window.
         *
         */
        currentText: string;
        /**
         * Sets the customizable text displayed to the user when the user clears the selected date in the calendar pop-up
         * window.
         *
         *
         */
        clearText: string;
        /**
         *
         * Sets the customizable text displayed to the user when the user closes the calendar pop-up
         * window.
         *
         */
        closeText: string;
        /**
         * The date picker can be opened programmatically.
         * This field is set to true when the picker is open.
         */
        isOpen: boolean;
        /**
         * Customizes the calendar to show the button bar with buttons allowing the user to select today's date,
         * clear the selection, or dismiss the calendar pop-up with a "Done" button.
         *
         * @type {boolean}
         */
        showButtonBar: boolean;
    }
}


declare module ers.components.chart {
    import IChartConfiguration = fc.IChartConfiguration;
    /**
     * The [[chartDirective]] scope interface.
     */
    interface IChartScope extends IChartConfiguration, ng.IScope {
    }
}


declare module ers.components.chart {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * Chart Directive
     * Main class for the chart component directive.
     */
    class ChartComponent extends BaseComponent {
        /** Suffix for DOM element that will contains the fc chart object. */
        private static CONTAINER_SUFFIX;
        /** Suffix to identify the fc chart object. */
        private static FC_SUFFIX;
        /** Stores definition of a fc chart : chart definition + data. */
        dataSource: Object;
        /** True if chart is ready to be displayed, used by template to apply some specific class. */
        private _ready;
        /** Id from directive. */
        private _id;
        /** Fusion Chart object instance. */
        private _chartObj;
        /** Configuration Store to be apply on fusionchart object. */
        private _fcConfig;
        private $q;
        /** Id for the fusion chart container. */
        private _containerId;
        static $inject: string[];
        /**
         * @constructor Default constructor.
         */
        constructor($scope: IChartScope, $q: ng.IQService);
        /**
         * Cleans the fusion chart properly. Removes event listener if any. Dispose the object. Set the internal to null.
         */
        private disposeChart();
        /**
         * Sets a value on a property of the fusion chart configuration store, if this property is not already set.
         * @param pProperty Property to set.
         * @param pValue Value to apply.
         */
        private applyProperty(pProperty, pValue);
        /**
         * Apply all default properties for the fusion chart configuration store.
         */
        private applyDefaultProperties();
        /**
         * Link function.
         * @param $scope the checkbox controller scope
         * @param element  Html element
         * @param attributes Html attribute
         */
        link($scope: IChartScope, element: ng.IAugmentedJQuery, attributes: ng.IAttributes): void;
        /**
         * Builds Fusion chart object, wait for FC library to be loaded to create instance. If a chart already exists, destroy it.
         */
        private buildChart();
        /**
         * Gets the value for containerId property.
         * @return string as value.
         */
        containerId: string;
        /**
         * Gets the value for id property.
         * @return string as value.
         */
        /**
         * Sets the value on id property.
         * @param pValue value to set as string.
         */
        id: string;
        /**
         * Gets the value for type property.
         * @return string as value.
         */
        /**
         * Sets the value on type property.
         * @param pValue value to set as string.
         */
        type: string;
        /**
         * Gets the value for definition property.
         * @return Object as value.
         */
        /**
         * Sets the value on definition property.
         * @param pValue value to set as Object.
         */
        definition: any;
        /**
         * Gets the value for chart property.
         * @return any as value.
         */
        /**
         * Sets the value on chart property.
         * @param pValue value to set as any.
         */
        chartObj: FusionCharts;
        /**
         * Gets the value for fcConfig property.
         * @return  as value.
         */
        /**
         * Sets the value on fcConfig property.
         * @param pValue value to set as Object.
         */
        fcConfig: fc.IChartConfiguration;
        /**
         * Gets the value for ready property.
         * @return boolean as value.
         */
        /**
         * Sets the value on ready property.
         * @param pValue value to set as boolean.
         */
        ready: boolean;
        /**
         * Gets the value for containerBackgroundColor property.
         * @return  as value.
         */
        /**
         * Sets the value on containerBackgroundColor property.
         * @param pValue value to set as .
         */
        containerBackgroundColor: string;
        /**
         * Gets the value for containerBackgroundOpacity property.
         * @return string as value.
         */
        /**
         * Sets the value on containerBackgroundOpacity property.
         * @param pValue value to set as string.
         */
        containerBackgroundOpacity: number;
        /**
         * Gets the value for baseChartMessageFont property.
         * @return string as value.
         */
        /**
         * Sets the value on baseChartMessageFont property.
         * @param pValue value to set as string.
         */
        baseChartMessageFont: string;
        /**
         * Gets the value for baseChartMessageFontSize property.
         * @return number as value.
         */
        /**
         * Sets the value on baseChartMessageFontSize property.
         * @param pValue value to set as number.
         */
        baseChartMessageFontSize: number;
        /**
         * Gets the value for baseChartMessageColor property.
         * @return string as value.
         */
        /**
         * Sets the value on baseChartMessageColor property.
         * @param pValue value to set as string.
         */
        baseChartMessageColor: string;
        /**
         * Gets the value for renderErrorMessage property.
         * @return boolean as value.
         */
        /**
         * Sets the value on renderErrorMessage property.
         * @param pValue value to set as boolean.
         */
        renderErrorMessage: boolean;
        /**
         * Gets the value for showChartLoadingMessage property.
         * @return boolean as value.
         */
        /**
         * Sets the value on showChartLoadingMessage property.
         * @param pValue value to set as boolean.
         */
        showChartLoadingMessage: boolean;
        /**
         * Gets the value for showDataLoadingMessage property.
         * @return boolean as value.
         */
        /**
         * Sets the value on showDataLoadingMessage property.
         * @param pValue value to set as boolean.
         */
        showDataLoadingMessage: boolean;
        /**
         * Gets the value for loadMessage property.
         * @return string as value.
         */
        /**
         * Sets the value on loadMessage property.
         * @param pValue value to set as string.
         */
        loadMessage: string;
        /**
         * Gets the value for typeNotSupportedMessage property.
         * @return string as value.
         */
        /**
         * Sets the value on typeNotSupportedMessage property.
         * @param pValue value to set as string.
         */
        typeNotSupportedMessage: string;
        /**
         * Gets the value for dataEmptyMessage property.
         * @return string as value.
         */
        /**
         * Sets the value on dataEmptyMessage property.
         * @param pValue value to set as string.
         */
        dataEmptyMessage: string;
        /**
         * Gets the value for dataInvalidMessage property.
         * @return string as value.
         */
        /**
         * Sets the value on dataInvalidMessage property.
         * @param pValue value to set as string.
         */
        dataInvalidMessage: string;
        /**
         * Gets the value for dataLoadErrorMessage property.
         * @return string as value.
         */
        /**
         * Sets the value on dataLoadErrorMessage property.
         * @param pValue value to set as string.
         */
        dataLoadErrorMessage: string;
        /**
         * Gets the value for dataLoadStartMessage property.
         * @return string as value.
         */
        /**
         * Sets the value on dataLoadStartMessage property.
         * @param pValue value to set as string.
         */
        dataLoadStartMessage: string;
        /**
         * Gets the value for dataFormat property.
         * @return string as value.
         */
        /**
         * Sets the value on dataFormat property.
         * @param pValue value to set as string.
         */
        dataFormat: string;
        /**
         * Gets the value for events property.
         * @return Object as value.
         */
        /**
         * Sets the value on events property.
         * @param pValue value to set as Object.
         */
        events: Object;
        /**
         * Gets the value for chart property.
         * @return Object as value.
         */
        /**
         * Sets the value on chart property.
         * @param pValue value to set as Object.
         */
        chart: Object;
        /**
         * Gets the value for data property.
         * @return Object as value.
         */
        /**
         * Sets the value on data property.
         * @param pValue value to set as Object.
         */
        data: Object;
        /**
         * Generic method to apply changes in the chart definition if fc chart already instanciated.
         */
        private applyChartProperties();
        /**
         * Gets the value for dataset property.
         * @return Object as value.
         */
        /**
         * Sets the value on dataset property.
         * @param pValue value to set as Object.
         */
        dataset: Object;
        /**
         * Gets the value for linkdedata property.
         * @return Object as value.
         */
        /**
         * Sets the value on linkdedata property.
         * @param pValue value to set as Object.
         */
        linkdedata: Object;
        /**
         * Gets the value for trendlines property.
         * @return Object as value.
         */
        /**
         * Sets the value on trendlines property.
         * @param pValue value to set as Object.
         */
        trendlines: Object;
        /**
         * Gets the value for vtrendlines property.
         * @return Object as value.
         */
        /**
         * Sets the value on vtrendlines property.
         * @param pValue value to set as Object.
         */
        vtrendlines: Object;
        /**
         * Gets the value for annotations property.
         * @return Object as value.
         */
        /**
         * Sets the value on annotations property.
         * @param pValue value to set as Object.
         */
        annotations: Object;
        /**
         * Gets the value for colorrange property.
         * @return Object as value.
         */
        /**
         * Sets the value on colorrange property.
         * @param pValue value to set as Object.
         */
        colorrange: Object;
        /**
         * Gets the value for lineset property.
         * @return Object as value.
         */
        /**
         * Sets the value on lineset property.
         * @param pValue value to set as Object.
         */
        lineset: Object;
        /**
         * Gets the value for axis property.
         * @return Object as value.
         */
        /**
         * Sets the value on axis property.
         * @param pValue value to set as Object.
         */
        axis: Object;
        /**
         * Gets the value for connectors property.
         * @return Object as value.
         */
        /**
         * Sets the value on connectors property.
         * @param pValue value to set as Object.
         */
        connectors: Object;
        /**
         * Gets the value for pointers property.
         * @return Object as value.
         */
        /**
         * Sets the value on pointers property.
         * @param pValue value to set as Object.
         */
        pointers: Object;
        /**
         * Gets the value for value property.
         * @return Object as value.
         */
        /**
         * Sets the value on value property.
         * @param pValue value to set as Object.
         */
        value: Object;
        /**
         * Gets the value for processes property.
         * @return Object as value.
         */
        /**
         * Sets the value on processes property.
         * @param pValue value to set as Object.
         */
        processes: Object;
        /**
         * Gets the value for tasks property.
         * @return Object as value.
         */
        /**
         * Sets the value on tasks property.
         * @param pValue value to set as Object.
         */
        tasks: Object;
        /**
         * Gets the value for rows property.
         * @return Object as value.
         */
        /**
         * Sets the value on rows property.
         * @param pValue value to set as Object.
         */
        rows: Object;
        /**
         * Gets the value for columns property.
         * @return  as value.
         */
        /**
         * Sets the value on columns property.
         * @param pValue value to set as .
         */
        columns: Object;
        /**
         * Gets the value for map property.
         * @return Object as value.
         */
        /**
         * Sets the value on map property.
         * @param pValue value to set as Object.
         */
        map: Object;
        /**
         * Gets the value for markers property.
         * @return Object as value.
         */
        /**
         * Sets the value on markers property.
         * @param pValue value to set as Object.
         */
        markers: Object;
        /**
         * Gets the value for categories property.
         * @return Object as value.
         */
        /**
         * Sets the value on categories property.
         * @param pValue value to set as Object.
         */
        categories: Object;
        /**
         * Gets the value for baseChartMessageImageHAlign property.
         * @return string as value.
         */
        /**
         * Sets the value on baseChartMessageImageHAlign property.
         * @param pValue value to set as string.
         */
        baseChartMessageImageHAlign: string;
        /**
         * Gets the value for baseChartMessageImageVAlign property.
         * @return string as value.
         */
        /**
         * Sets the value on baseChartMessageImageVAlign property.
         * @param pValue value to set as string.
         */
        baseChartMessageImageVAlign: string;
        /**
         * Gets the value for baseChartMessageImageAlpha property.
         * @return number as value.
         */
        /**
         * Sets the value on baseChartMessageImageAlpha property.
         * @param pValue value to set as number.
         */
        baseChartMessageImageAlpha: number;
        /**
         * Gets the value for baseChartMessageImageScale property.
         * @return number as value.
         */
        /**
         * Sets the value on baseChartMessageImageScale property.
         * @param pValue value to set as number.
         */
        baseChartMessageImageScale: number;
        /**
         * Gets the value for containerClassName property.
         * @return string  as value.
         */
        /**
         * Sets the value on containerClassName property.
         * @param pValue value to set as string .
         */
        containerClassName: string;
        /**
         * Gets the value for link property.
         * @return fc.IChartLink as value.
         */
        /**
         * Sets the value on link property.
         * @param pValue value to set as fc.IChartLink.
         */
        linked: fc.IChartLink | fc.IChartLink[];
        /**
         * Builds a specific id for DOM el in the template. The fusion charts object will directly refer to this DOM ID.
         * @return {string} ID.
         */
        computeContainerId(): string;
        /**
         * Builds a specific id for js fusion chart instance.
         * @return {string} ID.
         */
        computeFusionChartId(): string;
    }
}

declare module ers.components.chart {
    class ChartModule {
        static MODULE_NAME: string;
        static DEPENDENCIES: string[];
        static DIRECTIVE_NAME: string;
    }
}

declare module ers.components.chart {
}


declare module ers.components.checkbox {
    /**
     * The [[checkboxDirective]] scope interface.
     */
    interface ICheckboxScope extends ng.IScope {
        /** Sets the checkbox model. */
        ngModel: string;
        /** Disables or enables the checkbox state. */
        ngDisabled: boolean;
        /** True sets the checkbox to required.  */
        ngRequired: boolean;
        /** True sets the checkbox to read-only. */
        ngReadonly: boolean;
        /** Creates a custom boolean true or false checkbox. */
        ngTrueValue: string;
        ngFalseValue: string;
        /** Checks to see if the component is valid. */
        isValid: Function;
        /** Checks the state of the checkbox. */
        isChecked: Function;
        /** The defined function called on a mouse click.  */
        onClick: Function;
    }
}

/**
 * The Checkbox scope interface.
 */
declare module ers.components.checkbox {
    interface ICheckboxModel {
        /**
         * The boolean value of the checkbox state. Each checkbox state returns a true or false value.
         */
        cbModel: string;
        /**
         * Reads the checked state.
         */
        checked: () => boolean;
        required: () => boolean;
        disabled: () => boolean;
        readonly: () => boolean;
        setValues: (pTrue: string, pFalse: string) => void;
        setDisable: (pValue: boolean) => void;
        setRequired: (pValue: boolean) => void;
        setReadonly: (pValue: boolean) => void;
    }
    class CheckboxModel implements ICheckboxModel {
        /**
         * The ng-model directive must be set as visible.
         */
        cbModel: string;
        /** TODO protected */ cbDisable: boolean;
        /** TODO protected */ cbRequired: boolean;
        /** TODO protected */ cbReadonly: boolean;
        /** TODO protected */ trueValue: string;
        /** TODO protected */ falseValue: string;
        /**
         * The default constructor properties.
         */
        constructor();
        setValues(pTrue: string, pFalse: string): void;
        checked(): boolean;
        required(): boolean;
        setRequired(pValue: boolean): void;
        disabled(): boolean;
        setDisable(pValue: boolean): void;
        readonly(): boolean;
        setReadonly(pValue: boolean): void;
    }
}


declare module ers.components.checkbox {
    import IValidationManager = ers.components.core.service.IValidationManager;
    import IValidationRule = ers.components.core.service.IValidationRule;
    import EditComponent = ers.components.core.EditComponent;
    /**
     * The Checkbox Directive
     * The main class for the checkbox component directive.
     */
    class CheckboxComponent extends EditComponent {
        /** Sets the checkbox required state. */
        private _ngRequired;
        private _internalRequired;
        /** Sets the checkbox read-only state. */
        private _ngReadonly;
        private _internalReadonly;
        /** Sets the checkbox disabled state. */
        private _ngDisabled;
        private _internalDisabled;
        /** Sets custom true or false values. */
        private _ngTrueValue;
        private _internalTrueValue;
        private _ngFalseValue;
        private _internalFalseValue;
        /** Allows the user to create a provision to manage the DOM. */
        private divCb;
        /** Manages the focus sequence. */
        private _tabindex;
        /**
         * A list of Angular resources injected into the controller.
         * @type {string[]}
         */
        static $inject: string[];
        /**
         * @constructor
         */
        constructor($scope: ICheckboxScope, $element: ng.IAugmentedJQuery, $attrs: ng.IAttributes, $timeout: ng.ITimeoutService, vm: IValidationManager);
        /**
         * @function Initializes the checkbox options.
         */
        protected initOptions(): void;
        /**
         * Initializes the mouse and keyboard event listeners.
         */
        protected addListeners(): void;
        /**
         * @function Sets watchers on the disabled and read-only options, redrawing the checkbox when the options change.
         *
         *
         *
         */
        protected addWatchers(): void;
        /**
         * Sets the model controller that validates the component.
         * @param modelController
         */
        setNgModelController(modelController: ng.INgModelController): void;
        /**
         * Returns the check box state, checked or unchecked.
         * @returns {boolean}
         */
        isChecked(): boolean;
        /**
         * @function Manages the focus sequence.
         */
        private setTabIndex();
        /**
         * Updates the DOM to modify the checked or unchecked classes.
         */
        private updateDOMChecked();
        /**
         * Updates the DOM to modify the disabled class.
         */
        private updateDOMDisabled();
        /**
         * Updates the DOM to modify the readonly class.
         */
        private updateDOMReadonly();
        /**
         * Manages the key down event allowing only the space bar to select or unselect a component.
         *
         * @param keyCode&#151;The space bar keystroke ASCII code.
         * @param modelCtrl&#151;The model controller.
         * @param $scope&#151;The scope.
         */
        onKeyDown(jqEvent: JQueryEventObject): void;
        /**
         * Updates the model value.
         *
         * @param modelCtrl The model controller.
         * @param $scope The scope.
         */
        notifyModel(): void;
        /**
         * Getter for the required option.
         * @returns {boolean} The actual value of required option.
         */
        /**
         * Setter on required option.
         * @param value The new value of required option.
         */
        ngRequired: boolean;
        /**
         * Getter disabled.
         * @returns {boolean} Sets whether or not the getter is disabled.
         */
        /**
         * Setter disabled.
         * @param value New value.
         */
        ngDisabled: boolean;
        /**
         * Getter read-only.
         * @returns {boolean} Sets whether or not the getter is read-only.
         */
        /**
         * Setter readonly.
         * @param value Sets whether or not the setting is read-only.
         */
        ngReadonly: boolean;
        /**
         * Setter custom value is true.
         * @returns {Object}
         */
        /**
         * Getter custom value is true.
         * @param value
         */
        ngTrueValue: Object;
        /**
         * Getter custom false value.
         * @returns {Object}
         */
        /**
         * Setter custom false value.
         *
         */
        ngFalseValue: Object;
        /**
         * (@inherit) Returns the associated tooltip.
         */
        getTooltipDelegate(type?: string): ng.IAugmentedJQuery;
        validationRules(): IValidationRule[];
    }
}



declare module ers.components.checkbox {
}

/**
 * Created by zhangfa on 6/8/2015.
 */
declare module ers.components.contextmenu {
    /**
     * The context menu item model interface.
     */
    interface IMenuItem {
        /**
         * Label of the menu item.
         * Can be a string constant or function that receives the context and returns a string
         * If it is a function, it is executed every time the context scope changes
         */
        label: string | ((context?: Object) => string);
        /**
         * Name of the icon, must be one of the available names listed in [[IconComponent]]
         * Can be a string constant or function that receives the context and returns a string
         * If it's a function, it will be executed every time when context scope changes
         */
        icon?: string | ((context?: Object) => string);
        /**
         * A flag indicating whether or not the item is clickable or not.
         * Can be a boolean constant or a function that receives the context and returns a boolean
         * If it is a function, it will be executed every time the context scope changes
         */
        enabled?: boolean | ((context?: Object) => boolean);
        /**
         * A flag indicating whether or not the item is visible or not.
         * Can be a boolean constant or a function that receives the context and returns a boolean
         * If it is a function, it is executed every time the context scope changes
         */
        visible?: boolean | ((context?: Object) => boolean);
        /**
         * The action that will is taken when the item is clicked.
         *
         * @param context The scope of host element
         * @param event The mouse click event
         */
        action: (context: Object, event: JQueryEventObject) => void;
        /**
         * A flag indicating if the item has a divider before.
         */
        separatorBefore?: boolean;
        /**
         * Submenu items. If not empty, a submenu is displayed when you hover over this item. .
         */
        children?: IMenuItem[];
    }
}

/**
 * Created by zhangfa on 6/8/2015.
 */
declare module ers.components.contextmenu {
    /**
     * Interface of a context menu instance
     */
    interface IContextMenu {
        /**
         * Sets the host element of the context menu.
         * The bound context menu displays when the "contextmenu" event of the host element is triggered.
         *
         * @param host The host element that context menu is bound to.
         *
         * @Returns The context menu instance itself.
         */
        bindTo(host: ng.IAugmentedJQuery): IContextMenu;
        /**
         * @Returns Host element the context menu is bound to.
         */
        host(): ng.IAugmentedJQuery;
        /**
         * @Returns Menu items of the context menu
         */
        menuItems(): IMenuItem[];
        /**
         * Specify the type of event and context displayed when triggered.
         *
         * @param trigger The type of event by which the context is triggered to show.
         *
         * @Returns The context menu instance itself.
         */
        triggeredBy(trigger: string): IContextMenu;
        /**
         * Specify whether only one context menu can be displayed at a time.
         *
         * @param exclusively True yes, false no.
         *
         * @Returns The context menu instance itself.
         */
        setExclusively(exclusively: boolean): IContextMenu;
        /**
         * Specifies the container element to which the context menu element is appended.
         * If not specified, the default container is an HTML body.
         * When specified as 'self', the container is the host element.
         *
         * @param container The contain element or its selector
         */
        appendTo(container: string | JQuery): IContextMenu;
        /**
         * Called to destroy the context menu instance.
         * After destroyed, the event listener bound to host element will be removed.
         */
        destroy(): void;
        /**
         * Parent Menu container.
         */
        parentMenu: IContextMenu;
    }
}

/**
 * Created by ZhangFa on 6/13/2015.
 */
declare module ers.components.contextmenu {
    /**
     * The interface of anchored context menu instance.
     *
     * Anchored context menu is a special context menu that will only popup aside a
     * [[ersLinkMenu]] directive rather than the mouse right click point.
     */
    interface IAnchoredContextMenu extends IContextMenu {
        /**
         * Specifies the drop position of the context menu to relative to host element.
         * The available values are:  "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right",
         *                  "left", "left-top", "left-bottom", "right", "right-bottom", "right-top"
         * Refer to [[IPlacementService]].
         *
         * @Returns The anchored context menu instance itself.
         */
        withPlacement(palcement: string): IAnchoredContextMenu;
    }
}

/**
 * Created by zhangfa on 6/10/2015.
 */
declare module ers.components.contextmenu {
    /**
     * The bound menu item in [[IContextMenuScope]]
     */
    interface IBindMenuItem {
        label: string;
        icon: string;
        enabled: boolean;
        visible: boolean;
        separatorBefore: boolean;
        onClick: (e: JQueryEventObject) => void;
        children: IBindMenuItem[];
    }
    /**
     * The scope of context menu instance, used for representation.
     */
    interface IContextMenuScope extends ng.IScope {
        id?: string;
        screenHeight: number;
        onKeyDown: (e: JQueryEventObject) => void;
        menuItems: IBindMenuItem[];
        menu: IContextMenu;
    }
}

/**
 * Created by zhangfa on 6/8/2015.
 */
declare module ers.components.contextmenu {
    /**
     * Interface of "contextMenuService".
     * Used to create a [[IContextMenu]] or [[IAnchoredContextMenu]] instance.
     *
     */
    interface IContextMenuService {
        /**
         * Create a [[IContextMenu]] instance with specified menu items.
         *
         * @param items The menu items that context menu to create should contain.
         *
         * @Returns The created [[IContextMenu]] instance.
         */
        createContextMenu(items: IMenuItem[]): IContextMenu;
        /**
         * Create a [[IAnchoredContextMenu]] instance with specified menu items.
         *
         * @param items The menu items that anchored context menu to create should contain.
         *
         * @Returns The created [[IAnchoredContextMenu]] instance.
         */
        createAnchoredContextMenu(items: IMenuItem[]): IAnchoredContextMenu;
    }
}

/**
 * The Context Menu Component Module
 *
 * Created by zhangfa on 6/8/2015.
 */
declare module ers.components.contextmenu {
    var _module: ng.IModule;
}


declare module ers.components.combobox {
    class ComboboxItemProperties {
        /** The value stored as a model. */
        value: Object;
        /** The HTML representation. */
        element: ng.IAugmentedJQuery;
        /** The disable and enable states. */
        disable: boolean;
    }
}


declare module ers.components.combobox {
    /**
     * The scope interface for the [[itemComboxDirective]].
     */
    interface IComboboxItemScope extends ng.IScope {
        /** Whether the item separator is used, true or false. */
        separator: boolean;
        /** The item combobox value. */
        value: Object;
    }
}


declare module ers.components.combobox {
    import BaseController = ers.components.core.BaseController;
    /**
     * Combobox Item Directive
     * The main class for combobox item component directive.
     */
    class ComboboxItemController extends BaseController implements IComboboxItemController {
        static $inject: string[];
        /** The enable or disable state. */
        private _ngDisabled;
        private internalDisabled;
        /** If defined, the separator state. */
        private _separator;
        /** The combobox item value. */
        private _value;
        /** The click event management delegate.  */
        private _delegate;
        /**
         * Constructor
         *
         * @param $scope
         */
        constructor($scope: IComboboxItemScope, $element: ng.IAugmentedJQuery, $attributes: ng.IAttributes);
        /**
         * Link functions.
         *
         * @param scope combobox Item scope
         * @param element combobox Item root element
         * @param attributes combobox Item attributes
         */
        link(scope: IComboboxItemScope, element: ng.IAugmentedJQuery, attributes: ng.IAttributes): void;
        /**
         * Sets the list of attribute observers, watching for enabled and disabled attributes.
         */
        protected setObservers(): void;
        /**
         * Sets the list of watchers for the combobox item properties.
         */
        protected setWatchers(): void;
        /**
         * Sets the event responder to an item combobox action.
         * Two events are available, mouse click and keyboard (the enter key).
         *
         */
        protected setCallback(): void;
        /**
         * Sets the item view when highlighted or on a mouseover.
         */
        setSelected(): void;
        /**
         * Sets the item view when not highlighted, or the mouseover is removed.
         *
         */
        setUnselected(): void;
        /**
         * The item combobox UI display.
         *
         * @returns {ng.IAugmentedJQuery} The DOM representation of the item.
         */
        description(): ng.IAugmentedJQuery;
        /**
         * Gets the embedded value of the item combobox.
         *
         * @returns {Object} Returns the value of the item combobox.
         */
        /**
         * Set the embedded value of the item combobox.
         *
         * @param value Sets the value of the item combobox.
         */
        value: Object;
        /**
         * Getter and setters properties.
         */
        separator: boolean;
        ngDisabled: boolean;
        /**
         * Returns the delegate managing mouse and keyboard events.
         *
         * @returns {ComboboxComponent} The delegate object returning mouse and keyboard events.
         */
        /**
         * Sets the delegate managing mouse and keyboard events.
         *
         * @param ctrl The delegate object setting mouse and keyboard events.
         */
        delegate: ComboboxComponent;
    }
}


declare module ers.components.combobox {
    interface IComboboxItemController {
        value: Object;
        description: () => ng.IAugmentedJQuery;
    }
    /**
     * The mouse click and key down event interface.
     *
     */
    interface IComboboxDelegate {
        onClick: (evt: JQueryEventObject, itemController: IComboboxItemController) => boolean;
        onKey: (evt: JQueryEventObject, itemController: IComboboxItemController) => boolean;
    }
    /**
     * The [[ComboboxDirective]] scope interface.
     */
    interface IComboboxScope extends ng.IScope {
        /** The active item. */
        ngModel: Object;
        /** The combobox disable property. */
        ngDisabled: boolean;
        /** The combobox required property. */
        ngRequired: boolean;
        /** The combobox read-only property. */
        ngReadonly: boolean;
        /** The combobox container ID. */
        cbbContainerId: string;
    }
}

declare module ers.components.popover {
    /**
     * All of the configurable properties of a popover instance.
     */
    interface IPopOptions {
        /**
         * Sets the value for initiating the popover. The expected values
         * are: 'click', 'focus', and 'hover'.
         *
         * @default "Click" for popover
         * @default "Hover" for tooltip
         *
         * ### Examples
         *
         * Tooltip:
         * ```xml
         *     <input type="text" ers-tooltip
         *            tt-title="Tooltip triggered by focus"
         *            tt-trigger="focus" />
         * ```
         *
         * Popover:
         * ```xml
         *     <button ers-popover
         *             po-trigger="hover">
         *          A button
         *     </button>
         * ```
         */
        trigger: string;
        /**
         * Sets the display position relative to the anchor.
         * The expected values are 'left', 'right', 'top', 'bottom', 'auto left', 'auto right', 'auto top', and
         * 'auto bottom'.
         *
         * @default 'auto left'
         *
         * If set with auto, the popover instance is placed at opposite side when the specified placement is not possible.
         * Otherwise the popover is placed as specified.
         *
         * ### Examples
         *
         * Tooltip:
         * ```xml
         *     <input type="text" ers-tooltip
         *            tt-title="Tooltip triggered by focus"
         *            tt-placement="left" />
         * ```
         *
         * Popover:
         * ```xml
         *     <button ers-popover
         *             po-placement="top">
         *          A button
         *     </button>
         * ```
         */
        placement?: string;
        /**
         *
         * The selector of an existing node to popover that supports the CSS selector.
         *
         * @default null
         *
         * ### Examples
         * ```xml
         *     <button class="btn btn-default"
         *             ers-popover
         *             po-target="#popover1">
         *             Popover from after DOM
         *     </button>
         *     <div id="popover1" class="popover">
         *        <h3 class="popover-title">#popover1 from after the button</h3>
         *        <div class="popover-content">
         *        <p>This is a <b>HTML</b> text</p>
         *     </div>
         * ```
         */
        target?: string;
        /**
         * The template of a popover or tooltip. It could be an HTML file or an HTML string segment.
         *
         * @default null
         *
         * ### Examples
         * Specify a url:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-popover
         *             po-template="components/popover/dynamicTemplate.html">
         *             Popover by URL
         *     </button>
         * ```
         *
         * Specify an HTML string.
         * ```xml
         *     <button class="btn btn-default"
         *             ers-popover
         *             po-template="<div class='popover'><h3 class='popover-title'>title</h3><div class='popover-content'>content</div></div>"
         *             Popover by HTML string
         *     </button>
         * ```
         */
        template?: string;
        /**
         * Set to true to enable the tooltip title or popover content to render an HTML string.
         *
         * @default false
         *
         * ### Examples
         *
         * Popover:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-popover
         *             po-title="Hello"
         *             po-content="<b>World</b>"
         *             html="true">
         *             A button
         *     </button>
         * ```
         *
         * Tooltip:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-tooltip
         *             tt-title="Hello <b>World</b>"
         *             html="true">
         *             A button
         *     </button>
         * ```
         */
        html?: boolean;
        /**
         * The popover instance node that is appended to the container node.
         * If not specified, the popover instance node is appended to the HTML body. The popover instance node
         * also supports the CSS selector.
         *
         * @default "body"
         *
         * ### Examples
         *
         * Popover:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-popover
         *             po-container="#container">
         *             A button
         *     </button>
         *     <div id="container"/>
         * ```
         *
         * Tooltip:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-tooltip
         *             tt-title="Hello <b>World</b>"
         *             tt-container="#container">
         *             A button
         *     </button>
         *     <div id="container"/>
         * ```
         */
        container?: string;
        /**
         * The trigger delay in ms before the popover instance displays.
         *
         * @default 500 for tooltip
         * @default 0 for popover
         *
         * ### Examples
         *
         * Popover:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-popover
         *             po-show-delay="1000">
         *             ...
         *     </button>
         * ```
         *
         * Tooltip:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-tooltip
         *             tt-title="Hello <b>World</b>"
         *             tt-show-delay="1000">
         *             ...
         *     </button>
         * ```
         */
        showDelay?: number;
        /**
         * The trigger delay in ms to hide the popover instance when untriggered.
         *
         * @default 0
         *
         * ### Examples
         *
         * Popover:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-popover
         *             po-hide-delay="1000">
         *             ...
         *     </button>
         * ```
         *
         * Tooltip:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-tooltip
         *             tt-title="Hello <b>World</b>"
         *             tt-hide-delay="1000">
         *             ...
         *     </button>
         * ```
         */
        hideDelay?: number;
        /**
         * Specify if only one popover instance can be displayed at one time.
         *
         * @default true
         *
         * ### Examples
         *
         * Popover:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-popover
         *             po-clear-exists="false">
         *             ...
         *     </button>
         * ```
         *
         * Tooltip:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-tooltip
         *             tt-title="Hello <b>World</b>"
         *             tt-clear-exists="false">
         *             ...
         *     </button>
         * ```
         */
        clearExists?: boolean;
        /**
         *
         * Specify if an arrow is displayed with the popover instance. This option is only available when
         * there is no specified template or target.
         *
         * @default true
         *
         * ### Examples
         *
         * Popover:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-popover
         *             po-show-arrow="false">
         *             ...
         *     </button>
         * ```
         *
         * Tooltip:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-tooltip
         *             tt-title="Hello <b>World</b>"
         *             tt-show-arrow="false">
         *             ...
         *     </button>
         * ```
         */
        showArrow?: boolean;
        /**
         *
         * Specify if the popover instance can be initialized when being displayed for the first time rather than
         * when first created.
         *
         * @default true
         *
         * ### Examples
         *
         * Popover:
         * ```xml
         *     <button class="btn btn-default"
         *             ers-popover
         *             po-lazy-load="false">
         *             ...
         *     </button>
         * ```
         * Tooltip:
         *  ```xml
         *     <button class="btn btn-default"
         *             ers-tooltip
         *             tt-title="Hello <b>World</b>"
         *             tt-lazy-load="false">
         *             ...
         *     </button>
         * ```
         */
        lazyLoad?: boolean;
        /**
         *
         * Similar to target, but a jquery node rather than selector string.
         *
         * @default null
         *
         */
        targetElement?: ng.IAugmentedJQuery;
        /**
         *
         * Specify the scope object to which the popover instance mode is linked. If not specified, the popover instance
         * is linked to a scope inherited from the root scope.
         *
         *
         * @default null
         *
         */
        $scope?: ng.IScope;
        /**
         *
         * The type name of the instance. For tooltip, instanceName="tooltip", for popover, instanceName="popover"
         *
         * @default null
         *
         */
        instanceName?: string;
        /**
         *
         * The style of the popover instance. For tooltip the expected values are: 'info', 'success', and 'error'
         *
         * ### Example
         * ```xml
         *     <button class="btn btn-default"
         *             ers-tooltip
         *             tt-theme="info">
         *             ...
         *     </button>
         * ```
         * @default null
         *
         */
        theme?: string;
        /**
         *
         * If true, the popover instance is hidden when the escape key is pressed.
         *
         * @default false
         */
        keyboard?: boolean;
        /**
         *
         * If true and the trigger is in 'focus', the anchor node blurs when the popover instance is hidden.
         *
         * @default false
         */
        blur?: boolean;
        /**
         *
         * The class name that is added to the popover instance node.
         *
         * @default "popover" for popover
         * @default "tooltip" for tooltip
         */
        typeClass?: string;
        /**
         *
         * The popover title that is set in the scope of the popover instance, supporting HTML when HTML is set as true.
         *
         * @default null
         */
        title?: string;
        /**
         *
         * The popover content that is set in the scope of popover instance, supporting HTML when HTML set as true.
         *
         * @default null
         */
        content?: string;
        /**
         * The popover ID used to identify it in the generated DOM.
         */
        id?: string;
        /**
         * A flag to distinguish if the HTML template comes from the directive or from a custom template.
         *
         *  @default true
         */
        defaultTemplate?: boolean;
    }
}

declare module ers.components.popover {
    /**
     * A generic factory for both [[ITooltip]] and [[IPopover]]
     */
    interface IPopManager {
        /**
         * Creates an new instance of [[IPopInstance]], which could be either [[ITooltip]] or [[IPopover]]
         *
         * @param host The anchor element of the popover or tooltip instance to create.
         * @param options Configuration of the created popover or tooltip instance.
         */
        pop(host: ng.IAugmentedJQuery, options: IPopOptions): IPopInstance;
    }
}

declare module ers.components.popover {
    /**
     * The data scope interface inside of a popover instance.
     */
    interface IPopInstanceScope extends ng.IScope {
        /**
         * Hide the popover instance to which the scope belongs. This is the same as [[IPopInstance.hide]].
         * This method should not be overridden with a custom method using same name.
         */
        $$ersHide$$: () => void;
        /**
         * Indicate if current popover instance is displayed or hidden.
         */
        isShown: boolean;
        /**
         *
         *  The title of the popover instance instance to which the scope belongs. This is
         *  normally set by the [[TooltipDirective]] @tt-title attribute
         *  or the [[PopoverDirective]] attribute @po-title.
         *
         */
        title?: string;
        /**
         *  The content of the pop instance instance which the scope belongs to.
         *  Normally set by or the ([[PopoverDirective]] attribute @po-content.
         *  This is not available when the scope belongs to a tooltip instance ([[ITooltip]]).
         */
        content?: string;
        /**
         * The ID defined by the user in the popover instance ID attribute, or otherwise generated from the component ID
         * associated with this popover instance. This property should not be overridden
         * with custom property with same name.
         *
         */
        $$ersId$$: string;
    }
}

declare module ers.components.popover {
    /**
     * Interface of a popover instance. Currently no difference from [[IPopInstance]]
     */
    interface IPopover extends IPopInstance {
    }
}

declare module ers.components.popover {
    /**
     * Popover factory interface
     */
    interface IPopoverService {
        /**
         * Creates a new popover instance.
         *
         * @param element The anchor element of the popover to create
         * @param attr The HTML attributes specified in the anchor element.
         * @param config The configurations that override the properties specified by attributes.
         *
         * @returns a [[IPopover]] instance
         */
        createPopover(element: ng.IAugmentedJQuery, attr: ng.IAttributes, config?: IPopOptions, defaultConfig?: IPopOptions): IPopover;
    }
}

declare module ers.components.popover {
    /**
     * Internally used only for both the popover and tooltip components. See [[TooltipService]], [[PopoverService]]
     *
     * @Singleton
     * @type {{
     *      bindAttrToScope: (function(ng.IAttributes, ng.IScope, string[], string=, function(string): string=): undefined),
     *      parseOptions: (function(ng.IAttributes, string=): IPopOptions), docHeight: (function(): number)
     *  }}
     */
    var popoverUtils: {
        bindAttrToScope(attr: ng.IAttributes, scope: ng.IScope, keys: string[], prefix?: string, filter?: (s: string) => string): void;
        parseOptions: (attr: ng.IAttributes, prefix?: string) => IPopOptions;
    };
}


/**
 * Created by zhangfa on 3/18/2015.
 */
declare module ers.components.popover {
    var _module: ng.IModule;
}

declare module ers.components.popover {
    /**
     *
     *  A common interface of tooltip or popover instances.
     *
     */
    interface IPopInstance {
        /**
         *
         * Called to get the host element.
         *
         */
        host(): ng.IAugmentedJQuery;
        /**
         *
         * Called to destroy the popover instance.
         *
         */
        destroy(): void;
        /**
         *
         * Called to show popover instance in the UI if it is hidden.
         * @param callback The callback called after the show action completes.
         *
         */
        show(callback?: () => void): void;
        /**
         *
         * Called to hide the popover instance if it is displayed.
         * @param callback The callback called after the hide action completes.
         *
         */
        hide(callback?: () => void): void;
        /**
         * @returns The scope object of the popover instance.
         */
        scope(): IPopInstanceScope;
    }
}

declare module ers.components.popover {
    import BaseController = ers.components.core.BaseController;
    /**
     * @ngdoc directive
     * @module ers.components.popover
     * @name ersPopover
     *
     * @restrict E
     *
     * @description
     *
     * You can use the `ers-popover` directive to create a popover on any visible element
     *
     * ### Usage
     *
     * Following attributes are available with the directive:
     *
     * - `po-trigger` (attribute) Optional. Trigger way of tooltip. Available options: 'click', 'focus', 'hover',
     * default is 'hover'
     * - `po-placement` (attribute) Optional. Position of tooltip relative to anchor. Available options: 'left', 'right',
     * 'top', 'bottom', default is 'left'
     * - `po-title` (expression) Optional. Displayed title of the popover.
     * - `po-content` (expression) Optional. Displayed content of the popover.
     * - `po-show-delay` (attribute) Optional. Default 0. Delay in ms to show up the popover when triggered.
     * - `po-hide-delay` (attribute) Optional. Default 0. Duration in ms of showing the popover when untriggered.
     * - `po-target` (attribute) Optional. CSS selector of an existing DOM node to pop.
     * - `po-template` (attribute) Optional. Template of popover. Could be an url of html file or an html string
     *
     * ### Examples
     *
     * <code-editor identifier="example1" data-title="Popover" html-content-url="demos/ersPopover/basicUsage/index.html"
     * js-content-url="demos/ersPopover/basicUsage/script.js" css-content-url="demos/ersPopover/basicUsage/styles.css"
     * content-mode="html"></code-editor>
     *
     * ### Design Guidelines
     * - Keep it simple.
     * - Keep it small, never cover more than a third of the parent.
     * - Should only appear in response to a user action.
     *
     * @param {string} [po-title] Sets the title into the scope of the popover instance. Supports HTML
     * when `po-html="true"`.
     *
     * @param {string} [po-id] Sets the ID attribute which will be used for the generated DOM popover in order to have the
     * possibility to find it over the document.
     *
     * @param {string} [po-content] Sets the content into the scope of the popover instance.
     * When `html="true"`, renders an HTML string.
     *
     *
     *
     * @param {string} [po-trigger] Sets how the popover is triggered. Available values are click, focus, or hover.
     *
     * ```xml
     *     <button ers-popover
     *             po-trigger="hover">
     *          A button
     *     </button>
     * ```
     *
     * @param {string} [po-clear-exists] Sets whether or not more than one popover instance can be displayed at a time.
     *  ```xml
     *     <button class="btn btn-default"
     *             ers-popover
     *             po-clear-exists="false">
     *             ...
     *     </button>
     * ```
     *
     *
     *
     * @param {string} [po-placement] Sets the position of popover relative to its anchor; left, right, top or bottom.
     *
     * ```xml
     *     <button ers-popover
     *             po-placement="top">
     *          A button
     *     </button>
     * ```
     *
     * @param {string} [po-target] Sets the CSS selector of an existing DOM node to the popover.
     *
     * ```xml
     * <button class="btn btn-default"
     *         ers-popover
     *         po-target="#popover1">
     * </button>
     *
     * <div id="popover1" class="popover">
     *   <h3 class="popover-title">#popover1 from after the button</h3>
     *
     *   <div class="popover-content">
     *     <p>This is a <b>HTML</b> text</p>
     *   </div>
     * </div>
     * ```
     *
     * @param {string} [po-template] Sets the popover template. The template can be the url of an HTML file or an
     * HTML string.
     *
     * ##### Example - URL
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-popover
     *             po-template="components/popover/dynamicTemplate.html">
     *             Popover by url
     *     </button>
     * ```
     *
     * ##### Example - String
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-popover
     *             po-content="<div class='popover'><h3 class='popover-title'>title</h3><div class='popover-content'>
     *             content Popover by HTML string</div></div>">
     *     </button>
     * ```
     *
     * @param {boolean} [po-html="false"] Enables the tooltip title to render an HTML string.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-popover
     *             po-title="Bonjour"
     *             po-content="<b>le monde</b>"
     *             html="true">
     *             A button
     *     </button>
     * ```
     *
     *
     *
     *
     *
     * @param {number} [po-show-delay] When the popover is triggered, sets the delay in milliseconds before the popover
     * displays. The default values are 500 milliseconds for Tooltip and '0' for the Popover.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-popover
     *             po-show-delay="1000">
     *             ...
     *     </button>
     * ```
     *
     * @param {number} [po-hide-delay] Sets the popover display duration in milliseconds.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-popover
     *             po-hide-delay="2000">
     *             ...
     *     </button>
     * ```
     *
     *
     * @param {string} [po-container="body"] Sets the container node to which the popover instance is appended on opening.
     * If not specified, the popover instance node is appended to HTML body. The default is body.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-popover
     *             po-container="#container">
     *             A button
     *     </button>
     *     <div id="container"/>
     * ```
     *
     * @param {boolean} [po-show-arrow="false"] Specifies if an arrow is displayed with a popover instance. This is
     * only effective when no template or target is specified.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-popover
     *             po-show-arrow="false">
     *             ...
     *     </button>
     * ```
     *
     *
     *
     * @param {boolean} [po-lazy-load="true"] Sets whether or not a popover instance is initialized immediately
     * when a page is loaded, or if initialization is delayed until the popover is called.
     *
     *  * ```xml
     *     <button class="btn btn-default"
     *             ers-popover
     *             po-lazy-load="false">
     *             ...
     *     </button>
     * ```
     *
     *
     */
    function PopoverDirectiveFactory(popoverService: IPopoverService): ng.IDirective;
    /**
     * TreeComponent class
     * @class
     *
     * ### Description
     *
     * The controller linked to the ers-tree directive.
     *
     */
    class PopoverController extends BaseController {
        static $inject: string[];
        /**
         *
         * Popover handler
         *
         */
        private _popover;
        /**
         * Constructor
         * @param $scope Controller scope.
         * @param $element Root directive element.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery);
        /**
         * Popover instance getter.
         * @returns {IPopInstance} The popover instance.
         */
        /**
         * Popover instance setter.
         * @param popover Popover instance.
         */
        popover: IPopInstance;
    }
}


declare module ers.components.combobox {
    import IValidationManager = ers.components.core.service.IValidationManager;
    import IValidationRule = ers.components.core.service.IValidationRule;
    import EditComponent = ers.components.core.EditComponent;
    /**
     * Combobox directive
     * The main class for the combobox component directive.
     */
    class ComboboxComponent extends EditComponent implements IComboboxDelegate {
        /** Sets the combobox disabled state. */
        private _ngDisabled;
        /** Sets the combobox required state. */
        private _ngRequired;
        /** Sets the combobox read-only state. */
        private _ngReadonly;
        /** Sets the popover into which list items are displayed */
        private mPopover;
        /** Sets the field to flag to bind, or not to trigger. */
        private flagToSetTrigger;
        /** Sets the popover container ID used for the popover modal. */
        cbbContainerId: string;
        /** Sets the popover target ID as the ID of the element containing the combobox items. */
        targetId: string;
        /** The popup element. */
        private targetElement;
        private buttonElement;
        /** The option to set or unset an arrow on the popover. */
        withArrow: boolean;
        opened: boolean;
        /** Technical flag that determines if the combobox item is clicked or not. This is important to manage focus
         * or blur. */
        private clickFlag;
        /** External elements allowed to inject into the combobox. */
        static $inject: string[];
        /**
         * @constructor
         */
        constructor($scope: IComboboxScope, $element: ng.IAugmentedJQuery, $attrs: ng.IAttributes, $timeout: ng.ITimeoutService, vm: IValidationManager);
        /**
         * Generates the IDs required to reference the combobox list items, popover, po-target, and po-container.
         */
        protected generatePopoverIds(): void;
        /**
         * Finishes initializing the combobox object when the DOM completes loading.
         */
        private setPopover();
        /**
         * Trigger to open/close popover combobox.
         * @param on
         */
        private setButtonClick(on);
        /**
         * Returns the appropriate popover container element.
         * @returns {any} The appropriate popover container element
         */
        poContainer(): ng.IAugmentedJQuery;
        /**
         * Items allowed to manipulate the DOM and set watchers.
         *
         * @param $scope The directive scope
         * @param $element The DOM element (directive start)
         * @param $attributes The DOM attributes
         */
        link($scope: IComboboxScope, $element: ng.IAugmentedJQuery, $attributes: ng.IAttributes): void;
        /**
         * Adds the component event listeners.
         * @param $element Root element.
         */
        protected addListeners($element: ng.IAugmentedJQuery): void;
        /**
         * Open/close popup (list combobox items.
         */
        private openClosePopup();
        /**
         * Manages the combobox behavior while scrolling.
         */
        private onScroll();
        /**
         * Closes the combobox popover when it loses focus.
         * @param event A JQuery event
         */
        onBlur(event: JQueryEventObject): void;
        /**
         * Sets the model controller.
         * @param value The model controller.
         */
        setNgModelController(value: ng.INgModelController): void;
        /**
         * Allows the the interface to respond to 'click' combobox events.
         * @param evt A JQuery event.
         * @param itemController The combobox controller linked to the event.
         * @returns {boolean} The return event.
         */
        onClick(evt: JQueryEventObject, itemController: IComboboxItemController): boolean;
        /**
         * Allows the interface to respond to 'enter key' combobox events.
         *
         * @param evt A JQuery event.
         * @param itemController The item combobox controller linked to the event.
         * @returns {boolean} The return event.
         */
        onKey(evt: JQueryEventObject, itemController: IComboboxItemController): boolean;
        /**
         * Manages the key down event. Only up and down keyboard events are managed for the combobox
         * This function selects the previous or the next item in the popover item list
         *
         * @param event The JQuery event
         */
        protected onKeyDown(event: JQueryEventObject): void;
        /**
         * A JQuery element helper that iterates through a collection of JQuery elements until the user selects one.
         *
         * @param collection A list a IAugmented JQuery
         * @returns iterator Object
         */
        iterator: (collection: ng.IAugmentedJQuery) => {
            get: () => ng.IAugmentedJQuery;
            next: () => ng.IAugmentedJQuery;
            prev: () => ng.IAugmentedJQuery;
            end: () => boolean;
            begin: () => ng.IAugmentedJQuery;
        };
        /**
         * The function that returns the appropriate ComboboxItemController based on a given direction.
         * Where the direction is provided,
         * the retrieved controller is the first controller that matches the current modelValue
         * before or after the current controller. If no direction is provided, the retrieved controller is the first
         * controller matching the current modelValue.
         *
         * @param value The value to match in the items list.
         * @param direction Up(1), Down(2), or None(0)
         * @returns {ComboboxItemController} The controller associated to the element.
         */
        protected retrieveComboboxItemController(value: Object, direction?: number): ComboboxItemController;
        /**
         * The function that manages and displays the model behavior.
         *
         * @param itemController The controller associated to the current item (the item selected)
         * @param closePopup A display option to close, or not, the popover after display.
         */
        private notifyCombobox(itemController, closePopup?);
        /**
         * Display the selected item in the combobox.
         */
        private renderModel(element?);
        /**
         * Checks to see that the correct values are displayed in the combobox list. Controllers must be defined for
         * all values displayed in the list.
         *
         *
         * @param itemValue The value to check.
         * @returns {boolean} True if the value belongs on the list, false if it does not.
         */
        protected isValueItemValid(itemValue: Object): boolean;
        /**
         * Change button arrow depending on the popup state (opened/closed).
         * @param close
         */
        private arrowRender(close);
        protected updateReadOnly(): void;
        protected updateDisabled(): void;
        /**
         * Combobox options for getters and setters.
         */
        ngDisabled: boolean;
        ngRequired: boolean;
        ngReadonly: boolean;
        /**
         * (@inheritDoc)
         */
        inputElement(): ng.IAugmentedJQuery;
        /**
         * (@inheritDoc)
         */
        getTooltipDelegate(type?: string): ng.IAugmentedJQuery;
        validationRules(): IValidationRule[];
    }
}



declare module ers.components.combobox {
}


declare module ers.components.combobox {
}


/**
 * Created by germonneauf on 10/14/2015.
 */
declare module ers.components.core {
    /**
     * Controller dedicated for attribute component.
     */
    class DecoratorComponent extends BaseController {
        /**
         * Decorator constructor
         * @param $scope Component private scope
         * @param $element Component element
         */
        constructor($scope?: ng.IScope, $element?: ng.IAugmentedJQuery);
    }
}


/** Created by BERTHETO on 27/01/2015.
 * The ICompilable Interface.
 */
declare module ers.components.core {
    interface ICompilable {
        compile: (element: ng.IAugmentedJQuery, linkFn: (scope: ng.IScope, el: ng.IAugmentedJQuery, attr: ng.IAttributes) => void) => void;
    }
}


/**
 * Event constant
 */
declare module ers.components.core.event {
    /**
     * Interface of events
     */
    interface IEVENT {
        RESIZE: string;
    }
    /**
     * Utility which contains the event constants.
     */
    var EVENT: IEVENT;
}


declare module ers.components.drawer {
    import DecoratorComponent = ers.components.core.DecoratorComponent;
    import IContainerEventService = ers.components.core.service.IContainerEventService;
    class DrawerComponent extends DecoratorComponent {
        /**
         *
         * Specifies the side from which the drawer slides. The default is from the left.
         *
         */
        private static AUTHORIZED_SIDE_FROM;
        /**
         *
         * The drawer minimum width setting in pixels (px).  When the drawer is minimized beyond this setting, the
         * panel snaps to collapsed view.
         *
         */
        private static DRAWER_MIN_WIDTH;
        /**
         *
         * The CSS to apply and the icons impacted based on the drawer origination and the direction to which it slides.
         *
         */
        private static ROTATIONS_ICONS;
        /** The maximum width size allowed for the drawer. */
        private maxWidthSize;
        /** The maximum height size allowed for the drawer. */
        private maxHeightSize;
        /** The side to which the slide is collapsed, and from where it will be expanded. */
        private _slideFrom;
        /** The maximum width size number value allowed for the drawer. */
        private _maxWidthSizeIntValue;
        /** The maximum height size number value allowed for the drawer. */
        private _maxHeightSizeIntValue;
        /**
         *
         * This proxy width is used to manipulate the "virtual" width of the drawer. This checks
         * the container constraints before applying the width value and determining the final effective width.
         *
         */
        private _proxySize;
        /**
         *
         * The width property saves the current width value after the drawer is fully collapsed, allowing
         * the drawer to return to its previous width.
         *
         *
         */
        private _savedSizeState;
        /**
         * The property used to store the button state while managing the mouse down dragging behavior.
         *
         */
        private _mouseBtnPressed;
        /**
         *
         * The property used to store the button state while managing the mouse down dragging behavior.
         *
         */
        private _mouseIsDragging;
        /**
         *
         * This property provides easy access to apply rotation to the arrow icon element of the drawer bar to match
         * the slide bar state, collapsed or expanded.
         *
         *
         *
         */
        private _tabIcon;
        /**
         * The tab container element.
         */
        private _tabContainer;
        /**
         *
         * The container holding all of the drawer content, including the splitter, tab, and arrow icon.
         *
         */
        private _drawerBlockContainer;
        /** The splitter bar element with the ellipsis, collapse and expand arrows. */
        private _splitterBar;
        /** The collapse arrow element contained in the splitter bar element. */
        private _splitterCollapseArrow;
        /** The expand arrow element contained in the splitter bar element. */
        private _splitterExpandArrow;
        /** The ellipsis element contained in the splitter bar element. */
        private _splitterEllipsis;
        /** The property used to store the 'X-coordinate- of the mouse, on the mouse down or mouse up click event. */
        private _xRef;
        /** Property used to store the 'Y-coordinate- of the mouse on the mouse down/up/click event. */
        private _yRef;
        /**
         *
         * This property is used to determine if the drawer is fully collapsed (true),
         * or not (false). The default value is true.
         *
         */
        private _isFullyCollapsed;
        /**
         *
         * True if the content is pinned. The default value is true.
         *
         */
        private _pinned;
        /**
         *
         * True if the drawer is collapsed. The default value is true.
         */
        private _collapsed;
        /**
         *
         * This property is used to determine if the drawer is partially collapsed (true), and that
         * the size of the drawer container is equal to the minimum size or not (false). The initial value is false.
         *
         */
        private _isPartiallyCollapsed;
        /**
         * The jquery element.
         */
        private $timeout;
        /**
         * The $rootscope service.
         * @type {ng.IRootScopeService}
         */
        private $rootscope;
        /**
         *
         * The inner collapsed properties that manage the default value, setter, and constructor order.
         *
         */
        private innerCollapsed;
        /**
         *
         * The inner pinned properties that manage the default value, setter, and constructor order.
         *
         */
        private innerPinned;
        /**
         * The inner slideFrom properties that manage the default value, the setter, and constructor order.
         */
        private innerSlideFrom;
        /**
         * True if the initialization is in progress.
         */
        initInProgress: boolean;
        /** Event service used to notify that drawer size changes */
        private containerEventService;
        static $inject: string[];
        /**
         *
         * Constructor.
         * @param $element The component element.
         * @param $timeout The Angular timeout service that is currently used to initiate a function when the
         * model controller is fully loaded.
         * @param $transclude The $transclude function.
         * @param $scope The scope.
         * @param $rootScope The rootscope.
         *
         */
        constructor($element: ng.IAugmentedJQuery, $timeout: ng.ITimeoutService, $scope: ng.IScope, $rootScope: ng.IRootScopeService, containerEventService: IContainerEventService);
        /**
         * Initialize the drawer.
         */
        init(): void;
        /**
         *
         * Retrieve all of the ers-drawer elements according to their classes and their slideFrom.
         *
         */
        private computeElements();
        /**
         * Compute the maximum slide sizes from all drawer directions.
         */
        computeMaxSizes(): void;
        /**
         *
         * Declare the mouse event listeners on the drawer.
         *
         */
        private declareListeners();
        /**
         *
         * Remove the mouse event listeners on the drawer.
         *
         */
        private removeListeners();
        /**
         * Using JavaScript to manage the CSS splitter ellipsis behavior as pure CSS cannot.
         *
         */
        private splitterEllipsisCSSOnMouseover;
        /**
         * Using JavaScript to manage the CSS splitter ellipsis behavior as pure CSS cannot.
         *
         */
        private splitterEllipsisCSSOnMouseOut;
        /**
         *
         * The function called to apply the expand behavior to the drawer component.
         *
         */
        applyExpandBehaviours(): void;
        /**
         *
         * The function called to apply the collapse behavior to the drawer component.
         *
         */
        private applyCollapseBehaviours();
        /**
         * The function called when the user clicks the left arrow.
         */
        private mouseClickEventOnExpandArrow;
        /**
         * The function called when the user clicks the left arrow.
         */
        private mouseClickEventOnCollapseArrow;
        /**
         *
         * The function is called when the user clicks the tab icon.
         *
         */
        private mouseClickEventOnTabBar;
        /**
         *
         * The function is called when the user clicks and holds the mouse button down, dragging the splitter.
         * @param event The mouse down event.
         *
         */
        private mouseDownEvent;
        /**
         * This function is called on mouse up.
         * @param event The mouse up event.
         */
        private mouseUpEvent;
        /**
         * This function manages the click and drag mouse mouse behavior.
         * @param event The mouse button press.
         */
        private mouseMoveEvent;
        /**
         * Computes and sets the the tab position.
         */
        private computeTabPosition();
        /**
         * @returns Sets the tab icon direction based on the "slide from" collapsed property.
         */
        private getTabIconExpandDirection();
        /**
         * @returns Sets the tab icon direction based on the "slide from" expanded property.
         */
        private getTabIconCollapseDirection();
        /**
         * @returns Sets the splitter ellipsis icon based on the "slide from" property.
         */
        private getSplitterEllipsisIcon();
        /**
         * @returns Sets the splitter collapse arrow based on the "slide from" property.
         */
        private getSplitterCollapseArrow();
        /**
         * @returns Sets the splitter expand arrow based on the "slide from" property.
         */
        private getSplitterExpandArrow();
        /**
         *
         * @returns {string} The slide direction.
         */
        /**
         *
         * @param pSlideFrom The slide direction.
         */
        slideFrom: string;
        /**
         * Toggle the drawer pin state.
         */
        togglePinned(): void;
        /**
         *
         * @returns {boolean} True if the content is pinned.
         */
        /**
         *
         * @param pPinned True if the drawer is pinned.
         *
         */
        pinned: boolean;
        /**
         *
         * @returns {boolean} True if the drawer is collapsed.
         *
         */
        /**
         *
         * @param pCollapsed True if the content is collapsed.
         */
        collapsed: boolean;
        /**
         *
         * @returns {boolean} True if the drawer is a left or top left slide type.
         */
        isLeftTop(): boolean;
        /**
         *
         * @returns {boolean} True if the drawer is a bottom or top slide type.
         */
        isBottomTop(): boolean;
        /**
         * Updates html
         */
        private render();
    }
}

declare module ers.components.drawer {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * ###Drawer header component
     * Use the `ers-drawer-header` component to create the pin or unpin icon for the `ers-drawer` component.
     *
     * * ### Available Methods
     *
     * * [togglePinned](#togglePinned)
     * ### Examples
     *
     * #### Example.
     *
     * ```xml
     *
     *   <div ers-drawer ers-drawer-from="'right'" ers-drawer-max-width-size="400px"
     *  ers-drawer-max-height-size="500px" ers-drawer-pinned="true"
     *  ers-drawer-label="Action Tab " id="title" <!--ers-drawer-collapsed="true">
     *     <ers-drawer-header style="position: right; padding-right: 20px;" ></ers-drawer-header>
     *      <div style="height: 35px; padding-left: 10px;">
     *          <div style="position: center;">
     *              <ers-number name="Number"></ers-number>
     *          </div>
     *      </div>
     *  </div>
     *
     * ```
     *
     */
    class DrawerHeaderComponent extends BaseComponent {
        drawerController: ng.IControllerInstance;
        static $inject: string[];
        /**
         * Constructor.
         * @param $element The component element.
         * @param $timeout The Angular timeout service used to run a
         * function when the model controller is fully committed.
         *
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, $timeout: ng.ITimeoutService);
        /**
         * Toggles the pin state.
         */
        togglePinned(): void;
    }
}

declare module ers.components.dropdown {
    /**
    * @ngdoc directive
    * @module ers.components.dropdown
    * @scope
    * @data
    * @binding
    * @name ersDropdown
    * @constructor
    *
    * @description
    *
    * <p class="lead">Dropdown presents a menu of options to your users. It allows your users to
    * pass in any element type for your dropdown-toggle and dropdown-content.</p>
    *
    * - Dropdown consists of wrapper directive, which transforms your element into a dropdown.
    * - Dropdown consists of a toggle directive, allowing the dropdown to be toggled via click. This directive is optional.
    * - Dropdown consists of a content directive, allowing the content included to be shown in the dropdown.
    *
    * #### Usage
    *
    * Use the dropdown to show content to your users in a dropdown format on click.
    * This component is useful when you want the ability to make any type of element
    * serve as the toggle point or content for your dropdown.
    *
    * ### Examples
    *
    * #### Input Dropdown
    *
    * <code-editor identifier="example2" data-title="Input Dropdown"
    * html-content-url="demos/ersDropdown/inputDropdown/index.html"
    * js-content-url="demos/ersDropdown/inputDropdown/script.js"
    * css-content-url="demos/ersDropdown/inputDropdown/styles.css"
    * content-mode="html"></code-editor>
    *
    * #### Design Guidelines
    *
    * No design guidelines.
    *
    * #### Accessibility Guidelines
    *
    * No accessibility guidelines.
    *
    * @param {string} [auto-close=always] {@?}
    * Used on the <b>ers-dropdown</b> directive. Available options are always, disabled, outsideClick.
    * <b>always</b> automatically closes the dropdown when any of its elements are clicked,
    * <b>disabled</b> disables the auto close. You can control it
    * manually with is-open. It still gets closed if the toggle is clicked, esc is pressed or another dropdown is open,
    * <b>outsideClick</b> closes the dropdown automatically only when the user clicks any element outside
    * the dropdown.
    *
    * @param {boolean} [dropdown-append-to-body=false] {=?}
    * Used on the <b>ers-dropdown</b> directive.
    * Appends the inner dropdown-menu to the body element.
    *
    * @param {boolean} [is-open=false] {=?}
    * Used on the <b>ers-dropdown</b> directive.
    * Defines whether or not the dropdown-content is open. The <b>ers-dropdown-toggle</b> will toggle this attribute
    * on click.
    *
    * @param {boolean} [keyboard-nav=false] {=?}
    * Used on the <b>ers-dropdown</b> directive.
    * Enables the navigation of the dropdown list elements with the arrow keys.
    *
    * @param {function} [on-toggle(open)] {&?}
    * Used on the <b>ers-dropdown</b> directive.
    * An optional expression called when the dropdown content is opened or closed.
    *
    * @param {string} [openClass=open] {@?}
    * Class to apply when the dropdown is open.
    *
    *
    */
    class SimpleDropdownComponent {
    }
}

declare module ers.components.dropdownSelect {
    /**
 * @ngdoc directive
 * @module ers.components.dropdownSelect
 * @scope
 * @transclude
 * @data
 * @binding
 * @name ersDropdownSelect
 * @restrict E
 * @constructor
 *
 * @description
 *
 * <p class="lead">Dropdown-Select presents a menu of options to your users.</p>
 *
 * - Dropdown-Select consists of a toggle element, an input or button, which opens and closes the dropdown.
 * - Dropdown-Select consists of a dropdown element, displaying the appropriate information in a table or list.
 * - Dropdown-Select input or button should be properly labeled to describe the information contained in the dropdown.
 *
 * #### Usage
 *
 * - By default, use an auto filter with a standard dropdown to present data in an unordered list and allow filtering of that data.
 * - Use a manual filter with a grid dropdown to present data organized in a table and be able to create your own filter.
 * - Turn filtering off to disable the filtering functionality and only allow toggling of the dropdown.
 * - You may combine any type of filter-mode and select-type. See below for different options available.
 *
 * ### Examples
 *
 * #### Auto Filter with Standard Dropdown
 *
 * Example of the default dropdown-select component, with "auto" filter and a "standard" dropdown.
 * Data is passed into the component with the "items" attribute.
 *
 * <code-editor identifier="example1" data-title="Auto Filter with Standard Dropdown"
 * html-content-url="demos/ersDropdownSelect/autoStandard/index.html"
 * js-content-url="demos/ersDropdownSelect/autoStandard/script.js"
 * css-content-url="demos/ersDropdownSelect/autoStandard/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Auto Filter with Standard Dropdown,  Multi-Select set to true
 * Example of the default drodpown-select component with "auto" filter and "standard" drodpown. Mulit-Select feature is active.
 * Data is passed into the component with the "items" attribute, the item containing "Jim" has been pre-selected
 * with ng-model.
 *
 * When the multi-select items are passed outside the component, they are passed in an array, you will want to be sure to loop through the
 * data in your HTML if you want to show the selected items. See the code snippet below for an example.
 *
 *
 * <code-editor identifier="example2" data-title="Auto Filter with Multi-Select"
 * html-content-url="demos/ersDropdownSelect/multiSelect/index.html"
 * js-content-url="demos/ersDropdownSelect/multiSelect/script.js"
 * css-content-url="demos/ersDropdownSelect/multiSelect/styles.css"
 * content-mode="html"></code-editor>
 *
 *
 * #### Filter Off with Standard Dropdown
 *
 * Example of the default dropdown-select component. "filter-mode" is set to "off", removing the
 * ability for the user to filter the items in the dropdown. A specific "placeholder" is specified,
 * and the selected item is passed outside of the component via "ng-change". "ng-model" must
 * be used with "ng-change" and allows you to pre-select an item by default, if you would like.
 * In this case, ng-model has been set to "Jim" and is shown as selected by default.
 *
 * <code-editor identifier="example3" data-title="Filter Off with Standard Dropdown"
 * html-content-url="demos/ersDropdownSelect/noFilterStandard/index.html"
 * js-content-url="demos/ersDropdownSelect/noFilterStandard/script.js"
 * css-content-url="demos/ersDropdownSelect/noFilterStandard/styles.css"
 * content-mode="html"></code-editor>
 *
 *
 * #### Auto Filter with Grid Dropdown
 *
 * Example of a default "auto" filter, with a "grid" dropdown. The "items" and "grid-column-headers" to use in our table are specified.
 * A custom "placeholder" message, and the selected item is passed outside of the component via "ng-change".
 * "ng-model" must be used with "ng-change" and allows you to pre-select an item by default, if you would like.
 * In this case, ng-model has been set to "Jim" and is shown as selected by default.
 *
 *
 * <code-editor identifier="example4" data-title="Auto Filter with Grid Dropdown"
 * html-content-url="demos/ersDropdownSelect/autoGrid/index.html"
 * js-content-url="demos/ersDropdownSelect/autoGrid/script.js"
 * css-content-url="demos/ersDropdownSelect/autoGrid/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Auto Filter with Grid Dropdown DISABLED
 *
 * Example of a disabled dropdown-select with default, "auto" filtering. The "ng-disabled" attribute has been
 * to true, removing the ability for the user to toggle the dropdown open and closed.
 *
 * <code-editor identifier="example5" data-title="Disabled Auto Filter with Grid Dropdown"
 * html-content-url="demos/ersDropdownSelect/disabledAutoGrid/index.html"
 * js-content-url="demos/ersDropdownSelect/disabledAutoGrid/script.js"
 * css-content-url="demos/ersDropdownSelect/disabledAutoGrid/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Filter Off with Grid Dropdown DISABLED
 *
 * Example of a disabled dropdown-select, with "filter-mode" set to "off". The "ng-disabled" attribute
 * has been set to true, removing the ability for the user to toggle the dropdown open and closed.
 *
 * <code-editor identifier="example6" data-title="Disabled Filter Off with Grid Dropdown"
 * html-content-url="demos/ersDropdownSelect/disablednoFilterGrid/index.html"
 * js-content-url="demos/ersDropdownSelect/disablednoFilterGrid/script.js"
 * css-content-url="demos/ersDropdownSelect/disablednoFilterGrid/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Manual Filter with Grid Dropdown
 *
 * Example of a dropdown-select with a "manual" filter and "grid" dropdown. The "items" and "grid-column-headers" to be used are
 * specified as well. The selected item is passed outside of the component via "ng-change". "ng-model" must
 * be used with "ng-change" and allows you to pre-select an item by default, if you would like.
 * In this case, ng-model has been set to "Jim" and is shown as selected by default.
 * The "search" icon is used over the default "angle-down/ angle-up" icons.
 *
 * When filter mode is set to "manual", you need to pass the text outside of the component via "filter-text-change". This allows
 * you to pass the text to your own custom filter. The filtered rows then need to be passed into the
 * "items" attribute.
 *
 * <code-editor identifier="example7" data-title="Manual Filter with Grid Dropdown"
 * html-content-url="demos/ersDropdownSelect/manualGrid/index.html"
 * js-content-url="demos/ersDropdownSelect/manualGrid/script.js"
 * css-content-url="demos/ersDropdownSelect/manualGrid/styles.css"
 * content-mode="html"></code-editor>
 *
 *
 * #### Design Guidelines
 *
 * No design guidelines.
 *
 * #### Accessibility Guidelines
 *
 * No accessibility guidelines.
 *
 * @param {string} [dropdown-select-type=standard] {@?}
 * Available options are standard and grid. <b>Standard</b> shows your items in a basic unordered list,
 * while the <b>grid</b> shows your items in table format.
 *
 * @param {string} [no-results-message=No Results] {@?}
 * Provide a custom message when there are no matching filtered search results.
 *
 * @param {string} [filter-mode=auto] {@?}
 * Available options are  auto, manual, or off. <b>Auto</b> and <b>manual</b> filtering provides an input for the user to filter
 * your items, as well as open/close the dropdown. While setting filter-mode to <b>off</b> removes filtering functionality
 * and shows a button as the element to open/close the dropdown.
 *
 * @param {function} [filter-text-change=not active] {&?}
 * Used with the <b>manual</b> filter, this passes the user typed text outside of the function so that
 * it can be custom filtered. You must use <b>text</b> as the parameter for your function that
 * serves as the value for this attribute.
 *
 * @param {string} [filter-text=none] {@?}
 * If you would like to filter your dropdown data in a specific way by default you can use this attribute to pass in a string of
 * text that will then filter the data. If you pass in both a filter-text and pre-select an item via the ng-model attribute.
 * Your input will show the filter-text and the dropdown list will be filtered accordingly, but the preselected row you have
 * selected with ng-model will also be showing as selected.
 *
 * @param {array} [grid-column-headers=none] {=?}
 * Specify the table headers you would like in the grid dropdown. This attribute must be included with the grid.
 * You may include as many <b>grid-column-headers</b> as you would like.
 *
 * @param {array} [items=none] {=}
 * Specify the data you would like to include in the dropdown. This should contain an array of objects.
 * You may include as many <b>items</b> of data as you would like.
 *
 * @param {string} [item-display-property=name] {=?}
 * Set this attribute to determine the property of your data you would like to display in the
 * <b>Standard</b> drodpown. This attribute also determines the property that displays as the button label or
 * input placeholder upon item selection.
 *
 * @param {boolean} [multi-select=false] {=?}
 * Set this attribute with the value of true if you would the user to have the option to select multiple rows in the
 * dropdown.
 *
 * @param {boolean} [ng-disabled=false] {=?}
 * Set this attribute to <b>true</b> to remove the ability to toggle the dropdown open and closed. The dropdown is always
 * closed when <b>ng-disabled</b> to set to <b>true</b>, even if you have set <b>open</b> to <b>true</b> as well.
 *
 * @param {function} [ng-change=not active] {&?}
 * Pass the selected row of data, in the dropdown, outside of the component when selected. You must use <b>itemSelected</b> as
 * the parameter for the function that serves as the value for this attribute.
 *
 * @param {object} [ng-model=none] {=?}
 * Specify a row to be pre-selected in your dropdown by default.
 *
 * @param {boolean} [open=false] {=?}
 * Set this attribute to <b>true</b> to open the dropdown by default (on page load).
 *
 * @param {string} [placeholder=Select] {@?}
 * Specify the button label, or input placeholder. This should properly describe the data
 * you have included in the items attribute for the dropdown.
 *
 * @param {boolean} [show-selected-item=false] {=?}
 * Remove the specified <b>item-display-property</b> from being set inside the <b>auto</b> or
 * <b>manual</b> filter input element when set to <b>false</b>.
 *
 * @param {boolean} [use-search-icon=false] {=?}
 * Override the default 'angle-down' icon shown in the input element with the 'search' icon.
 * This is only available when filter-mode is set to <b>auto</b> or <b>manual</b> as the input element must be present.
 *
 *
 */
    class DropdownComponent {
        checkEquality: any;
        checkGroupEquality: any;
        currentIndex: number;
        dropdownSelectType: string;
        event: any;
        filterMode: string;
        filterText: string;
        filteredItems: any;
        filterTextChange: any;
        filteredSelection: any;
        firstManualRun: boolean;
        focusedRow: any;
        firstRun: boolean;
        gridColumnHeaders: any;
        input: any;
        items: any;
        staticItems: any;
        itemDisplayProperty: string;
        initialNgModel: any;
        ngModelValue: any;
        keyCodes: any;
        multiSelect: any;
        ngModel: any;
        ngChange: any;
        ngDisabled: boolean;
        ngRequired: boolean;
        noResultsMessage: string;
        open: boolean;
        placeholder: string;
        selectedItems: any;
        showSelectedItem: boolean;
        useSearchIcon: any;
        protected $scope: ng.IScope;
        protected $document: ng.IDocumentService;
        protected $attrs: ng.IAttributes;
        protected $element: ng.IAugmentedJQuery;
        protected $filter: ng.IFilterService;
        static $inject: string[];
        constructor($scope: ng.IScope, $document: ng.IDocumentService, $attrs: ng.IAttributes, $element: ng.IAugmentedJQuery, $filter: ng.IFilterService);
        sort(row: ng.IAugmentedJQuery): any[];
        onSelectedLocal(row: ng.IAugmentedJQuery, $event: ng.IAngularEvent): void;
        resetInput(): void;
        backspacePressedResetInput(): void;
        setFocusedRow(index: number): void;
        onKeyboardPressed($event: ng.IAngularEvent): void;
        filterTextChangeLocal($event: ng.IAngularEvent): void;
        toggleDropdown($event: ng.IAngularEvent): void;
        clearSelection($event: ng.IAngularEvent): void;
        closeDropdown(): void;
        openDropdown($event: ng.IAngularEvent): void;
    }
}




declare module ers.components.file {
    /**
     * IDropEvent interface for Jquery drop event, which is dragging and dropping files into the drop zone.
     *
     */
    interface IDropEvent extends JQueryMouseEventObject {
        originalEvent: DragEvent;
    }
}


declare module ers.components.file {
    /**
     *
     * The IFileInput interface represents the HTML file input which imports the list of files for uploading.
     *
     */
    interface IFileInput extends EventTarget {
        files: FileList;
    }
}


declare module ers.components.file {
    /**
     * The IFileItem interface displays the individual file upload status.
     */
    interface IFileItem {
        /**
         * The file.
         */
        file: File;
        /**
         * The upload progress.
         */
        uploadProgress?: number;
        /**
         * True if the file is ready to upload.
         */
        isReadyToUpload?: boolean;
        /**
         * True if the file is ready to upload.
         */
        isUploading?: boolean;
        /**
         * True if the file is uploading.
         */
        isUploaded?: boolean;
        /**
         * True if the file is uploaded.
         */
        isUploadSuccess?: boolean;
        /**
         * True if the file is successfully uploaded.
         */
        isUploadCanceled?: boolean;
        /**
         * True if the file upload is canceled.
         */
        isUploadError?: boolean;
        /**
         * True if an error occurs while uploading.
         */
        uploadError?: string;
        /**
         * True if the file must be removed after uploading.
         */
        removeAfterUpload?: boolean;
        /**
         * The xhr upload transport.
         */
        xhrTransport?: XMLHttpRequest;
        /**
         * @return True if the upload has begun.
         */
        uploadHasBegun?(): boolean;
        /**
         * Inner callback before the upload phase.
         */
        _onBeforeUpload?(): void;
        /**
         * Inner callback on the progress phase.
         * @param pProgress The upload progress.
         * @private
         */
        _onUploadProgress?(pProgress: number): void;
        /**
         * Inner callback on the success phase.
         * @param {string} response The response.
         * @param {number} status The status response.
         * @param {{}} headers The headers.
         * @private
         */
        _onUploadSuccess?(response: string, status: number, headers: {}): void;
        /**
         * Inner callback on the error phase.
         * @param {string} response The response.
         * @param {number} status The status response.
         * @param {{}} headers The headers.
         * @private
         */
        _onUploadError?(response: string, status: number, headers: {}): void;
        /**
         * Inner callback on the cancel phase.
         * @param {string} response The response.
         * @param {number} status The status response.
         * @param {{}} headers The headers.
         * @private
         */
        _onUploadCancel?(response: string, status: number, headers: {}): void;
        /**
         * Inner callback on the completed upload.
         * @param {string} response The response
         * @param {number} status The status response
         * @param {{}} headers The headers
         * @private
         */
        _onUploadComplete?(response: string, status: number, headers: {}): void;
        /**
         * Call during the destroy phase.
         */
        destroy?(): void;
        /**
         * Prepare the file to be uploaded.
         */
        prepareToUploading?(): void;
        /**
         * Cancel the upload with abortUpload.
         */
        abortUpload?(): void;
    }
}

declare module ers.components.file {
    /**
     * The IFileFilter interface applies the filtering process during file selection.
     */
    interface IFileFilter {
        /**
         * The filter name.
         */
        filterName: string;
        /**
         * The function filter must return a ng.IPromise, which is a promise that is resolved if the file is not
         * rejected by the filter or for another reason.
         *
         */
        fn: (file?: IFileItem, currentFileIndex?: number) => ng.IPromise<Object>;
        /**
         * The function returning an error message (string) if filter fails. This function can also use
         * variables.
         */
        errorMessage: Function;
    }
}


declare module ers.components.file {
    /**
     * The ISelectFileError interface displays file selection.
     */
    interface ISelectFileError {
        /**
         * The file name.
         */
        file: string;
        /**
         * The error message.
         */
        message: string;
        /**
         * The filter name.
         */
        filter: string;
    }
}


declare module ers.components.file {
    import IFileItem = ers.components.file.IFileItem;
    /**
     * FileItem class: A file wrapper to manage file operations, upload, and selection.
     */
    class FileItem implements IFileItem {
        /**
         * The file.
         */
        file: File;
        /**
         * The upload progress number which is translated into a progress bar.
         */
        uploadProgress: number;
        /**
         * True, if the file is ready to upload.
         */
        isReadyToUpload: boolean;
        /**
         * True, if the file is uploading.
         */
        isUploading: boolean;
        /**
         * True, if the file has completed uploading.
         */
        isUploaded: boolean;
        /**
         * True, if the file has successfully uploaded.
         */
        isUploadSuccess: boolean;
        /**
         * True, if the file uploaded was canceled.
         */
        isUploadCanceled: boolean;
        /**
         * True, if there was a file upload error.
         */
        isUploadError: boolean;
        /**
         * True, if there was an upload error, displays an upload error message.
         */
        uploadError: string;
        /**
         * True, if the file must be removed after the upload.
         */
        removeAfterUpload: boolean;
        /**
         * The upload xhr transport.
         */
        xhrTransport: XMLHttpRequest;
        /**
         * @constructor
         * @param pFile The file.
         */
        constructor(pFile: File);
        /**
         * Inner callback before upload begins.
         */
        _onBeforeUpload(): void;
        /**
         * Inner callback progress during the upload.
         * @param pProgress The upload progress.
         * @private
         */
        _onUploadProgress(progress: number): void;
        /**
         * Inner callback when the upload is successful.
         * @param {string} response The response.
         * @param {number} status The response status.
         * @param {{}} headers The headers.
         * @private
         */
        _onUploadSuccess(response: string, status: number, headers: {}): void;
        /**
         * Inner callback when an upload error occurs.
         * @param {string} response The response.
         * @param {number} status The status response.
         * @param {{}} headers The headers.
         * @private
         */
        _onUploadError(response: string, status: number, headers: {}): void;
        /**
         * Inner callback when the upload is canceled,.
         * @param {string} response The response
         * @param {number} status The status response
         * @param {{}} headers The headers
         * @private
         */
        _onUploadCancel(response: string, status: number, headers: {}): void;
        /**
         * Inner callback when the upload completes successfully.
         * @param {string} response The response
         * @param {number} status The status response
         * @param {{}} headers The headers
         * @private
         */
        _onUploadComplete(response: string, status: number, headers: {}): void;
        /**
         * The destroy phase call.
         */
        destroy(): void;
        /**
         * Preparing the file to be uploaded.
         */
        prepareToUploading(): void;
        /**
         * Cancelling or aborting the upload.
         */
        abortUpload(): void;
        /**
         * @return True, if the upload has started.
         */
        uploadHasBegun(): boolean;
    }
}


declare module ers.components.file {
    /**
     * The IUploadStatus interface displaying the the upload status.
     */
    interface IUploadStatus {
        /**
         * The total number of files to be uploaded.
         *
         */
        toBeUploaded?: number;
        /**
         * The number of files currently uploading.
         */
        uploading?: number;
        /**
         * The headers uploaded with the files.
         */
        uploaded?: number;
        /**
         * The data uploaded with the files.
         */
        failed?: number;
        /**
         * The total upload progress.
         */
        progress?: number;
    }
}

declare module ers.components.file {
    /**
     * The IUploadOptions interface displays the upload options, including the path on the server.
     */
    interface IUploadOptions {
        /**
         * Server path for upload files.
         */
        url: string;
        /**
         * The headers uploaded with the files.
         */
        headers?: Object;
        /**
         * The data uploaded with the files.
         */
        formData?: Object[];
        /**
         * Set to automatically or manually upload files added to the upload queue.
         */
        autoUpload?: boolean;
        /**
         * By default, a POST request method for HTML5 browsers only.
         */
        method?: string;
        /**
         * Removes individual file the queue after upload.
         */
        removeAfterUpload?: boolean;
        /**
         * Removes all of the uploaded files from the queue.
         */
        removeAllAfterUpload?: boolean;
        /**
         * True if the uploads must be simultaneous.
         *
         */
        simultaneousUpload?: boolean;
        /**
         * Enable CORS.
         */
        withCredentials?: boolean;
        /**
         * Displays the appropriate upload status message regarding progress and errors.
         */
        uploadStatus?: IUploadStatus;
        /**
         * True if the total progress must be displayed in the UI.
         */
        displayTotalProgress?: boolean;
    }
}


declare module ers.components.file {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * ###File component
     * The `ers-file` component allows you to choose and manage one or more files.
     * The user can select files two ways:
     *
     *  - Browse to and select the file.
     *  - Click to select, drag, and then drop the file or files in drop zone.
     *
     * After completing the selection, you can add to or remove files from the selection before uploading.
     *
     *
     * You can configure the file selector to filter according to:
     *
     *  - Extension
     *  - Type (including wildcards)
     *  - Size
     *  - Number of files
     *  - User-created custom filter
     *
     * Each filter, including user-created filters, is a promise that is resolved if the file is not rejected.
     * When errors occur, a callback prompts a dialog allowing you to fix the error.
     *
     *
     * All user-created filters can be saved for future use.
     *
     * Upload is an optional action button that begins the upload and provides a progress indicator bar for each
     * file.
     * As the selected file or files are uploaded, the ers-file component displays a progress bar. The user
     * can abort any specific file upload by dismissing that progress bar.
     *
     *  ### Available Options
     *
     * The following are the options available for the File component:
     *
     * * [id](#id),[selection](#selection), [multiple](#_multiple),
     * [maxFiles](#_maxFiles), [maxSize](#_maxSize),
     * [filters](#_filters),[types](#types),[extensions](#extensions),[allErrorsTogether](#allErrorsTogether),
     * [onAddingFiles](#onAddingFiles),[onWhenAddingFileFailed](#onWhenAddingFileFailed),
     * [selectionInputPlaceHolderText](#selectionInputPlaceHolderText),[applyFiltersOnlyOnPush](#applyFiltersOnlyOnPush)
     * ,[instructionText](#instructionText),[selectionInputPlaceHolderText](#selectionInputPlaceHolderText),
     * [dropZoneAdditionalText](#dropZoneAdditionalText),[uploading](#uploading),[uploaderOptions](#uploaderOptions)
     * ,[_actionButtonText](#actionButtonText),[_actionButtonVisible](#actionButtonVisible)
     * ,[_actionButtonAction](#actionButtonAction),[instructionText](#instructionText)
     * ,[informationTooltipTxt](#informationTooltipTxt),[_selectedItemContextMenu](#selectedItemContextMenu)
     *
     * The following are the methods available for the File component:
     *
     * ### Available Methods
     *
     * [removeFile](#removeFile),[removeAllFiles](#removeAllFiles), [folderFilter](#folderFilter),
     * [queueLimitFilter](#queueLimitFilter),[removeAllFiles](#removeAllFiles),[removeFile](#removeFile),
     * [sizeLimitFilter](#sizeLimitFilter), [typeFilter](#typeFilter), [extensionFilter](#extensionFilter),
     * [extensionFilter](#extensionFilter), [upload](#upload), [cancelUpload](#cancelUpload),
     * [cancelAllUpload](#cancelAllUpload), [getReadyItems](#getReadyItems), [autoUpload](#autoUpload),
     * [getTotalUploadProgress](#getTotalUploadProgress)
     *
     *
     * ### Examples
     *
     * #### Example.
     *
     * ```xml
     *    <ers-file id="fileSandbox" selection="ctrl.selection" multiple="ctrl.multiple"
     * max-files="{{ctrl.maxFiles}}" extensions="[ctrl.currentExtension]"
     * max-size="{{ctrl.maxSize}}" types="[ctrl.currentType]"
     * all-errors-together="ctrl.allErrorsTogether" filters="[ctrl.currentFilter]"
     * on-when-adding-file-failed="ctrl.selectFileFailed(errors)"
     * selection-input-place-holder-text="Select your file here."
     * instruction-text="Select your files here:"
     * drop-zone-additional-text="File Selection" is-upload="ctrl.uploaderOptions"
     * uploader-options="ctrl.uploaderOptions"></ers-file>
     * ```
     *
     */
    class FileComponent extends BaseComponent {
        /**
         * The component ID.
         *
         *  @type {string}
         *
         * ```xml
         * <ers-file id="myId"/>
         * ```
         */
        id: string;
        /**
         * The currently selected files.
         *
         * @type {IFileItem[]}
         *
         * ```xml
         * <ers-file selection="ctrl.selection"/>
         * ```
         */
        private _selection;
        /**
         * A boolean selection that enables, or not, multiple file selection.
         * When set to true, multiple files are allowed. When set to false, it blocks multiple selections for
         * the entire component, both in the browser file selection window and in the drop zone. If you tries
         * to select file by file, the selected file replaces the
         * previously selected file.
         *
         * @type {boolean}
         *
         * ```xml
         * <ers-file multiple="ctrl.multiple"/>
         * ```
         */
        private _multiple;
        /**
         * The maximum number of files allowed to be selected as set by the queueLimit filter.
         *
         * If this limit is exceeded, an error is returned to the onWhenAddingFileFailed function.
         *
         * @type {boolean}
         *
         *  ```xml
         * <ers-file max-files="ctrl.maxFiles"/>
         * ```
         */
        private _maxFiles;
        /**
         * The maximum file size (in bytes) allowed to be selected as set by the sizeLimit filter.
         *
         * If this limit is exceeded, an error is returned to the onWhenAddingFileFailed function.
         *
         * @type {boolean}
         *
         *  ```xml
         * <ers-file max-files="ctrl.maxSize"/>
         * ```
         */
        private _maxSize;
        /**
         *
         * The custom filters array, allowing users to add custom filters to the existing filters.
         *
         * @type {IFileFilter[]}
         *
         *  ```xml
         * <ers-file filters="ctrl.filters"/>
         * ```
         */
        private _filters;
        /**
         * The file types allowed to be selected.
         * Associated with the typeFilter filter.
         *
         * *For example*, null, "image.*", "audio.*", ".*vnd.ms-excel", ".*jpeg", or "".
         *
         * @type {string[]}
         *
         *  ```xml
         * <ers-file types="ctrl.types"/>
         * ```
         */
        private _types;
        /**
         * The file extensions the user is allowed to select.
         * Associated with the ExtensionFilter filter.
         *
         * for example: [null, "jpg", "csv", "mp3", "txt", "json"]
         *
         * @type {string[]}
         *
         *  ```xml
         * <ers-file extensions="ctrl.extensions"/>
         * ```
         */
        private _extensions;
        /**
         * Set to true if to receive all filter error messages from the same selection at one time, or, if set
         * to be notified one-by-one. In either case, the error messages are sent via the onWhenAddingFileFailed
         * function.
         *
         * @type {boolean}
         *
         *  ```xml
         * <ers-file all-errors-together="ctrl.allErrorsTogether"/>
         * ```
         */
        allErrorsTogether: boolean;
        /**
         * The callback function to be notified in the case of errors.
         * The function signature must be functionName(errors:ISelectFileError[])
         *
         * @type {Function}
         *
         *  ```xml
         * <ers-file on-when-adding-file-failed="ctrl.functionName(errors)"/>
         * ```
         */
        onWhenAddingFileFailed: Function;
        /**
         * The callback function to be notified when files are selected.
         * The function signature must be functionName(files:FileList[]).
         *
         * @type {Function}
         *
         *  ```xml
         * <ers-file on-adding-files="ctrl.onAddingFiles(files)"/>
         * ```
         */
        onAddingFiles: Function;
        /**
         * When allErrorsTogether is true, all of the the filter errors are at the same time
         * via the onWhenAddingFileFailed callback.
         *
         * @type {ISelectFileError[]}
         */
        private selectFileError;
        /**
         * The temporary fileList available for selection.
         * @type {FileList}
         */
        fileListToSelect: FileList;
        /**
         * The selected files.
         * @type {FileList}
         */
        private filesSelected;
        /**
         * True if selecting files is in progress.
         */
        private selecting;
        /**
         * True if the filters must be applied only when a new file is added to the selection.
         *
         * @type {boolean}
         *
         *  ```xml
         * <ers-file apply-filters-only-on-push="ctrl.applyFiltersOnlyOnPush"/>
         * ```
         */
        applyFiltersOnlyOnPush: boolean;
        /**
         * Place holder text in the selection input.
         * @type {string}
         *
         *  ```xml
         * <ers-file selection-input-place-holder-text="ctrl.selectionInputPlaceHolderText"/>
         * ```
         */
        selectionInputPlaceHolderText: string;
        /**
         *  True if the action button is visible. By default the action button is not visible.
         * @type {boolean}
         *
         *  ```xml
         * <ers-file action-button-visible="ctrl.actionButtonVisible"/>
         * ```
         */
        private _actionButtonVisible;
        /**
         *  The action button text (if visible).
         * @type {string}
         *
         *  ```xml
         * <ers-file action-button-text="ctrl.actionButtonText"/>
         * ```
         */
        private _actionButtonText;
        /**
         *  The function the callback calls when the action button is clicked.
         * @type {Function}
         *
         *  ```xml
         * <ers-file action-button-action="ctrl.actionButtonAction"/>
         * ```
         */
        private _actionButtonAction;
        /**
         * The text that appears on the second line of the dropzone additional text string.
         * @type {Function}
         *
         *  ```xml
         * <ers-file drop-zone-additionnal-text="ctrl.dropZoneAdditionalText"/>
         * ```
         **/
        dropZoneAdditionalText: string;
        /**
         *  True if uploading is in progress. The default is false.
         * @type {boolean}
         *
         *  ```xml
         * <ers-file uploading="ctrl.uploading"/>
         * ```
         */
        uploading: boolean;
        /**
         *  The file upload options.
         * @type {IUploadOptions}
         *
         *  ```xml
         * <ers-file uploader-options="ctrl.uploaderOptions"/>
         * ```
         */
        uploaderOptions: IUploadOptions;
        /**
         * The instruction text appearing above the selection input.
         * @type {string}
         *
         *  ```xml
         * <ers-file instruction-text="ctrl.instructionText"/>
         * ```
         */
        instructionText: string;
        /**
         *
         * The context menu for each of the selected files in the selected items list.
         * @type {IMenuItem[]}
         *  ```xml
         * <ers-file selected-item-context-menu="ctrl.selectedItemContextMenu"/>
         * ```
         */
        _selectedItemContextMenu: ers.components.contextmenu.IMenuItem[];
        /**
         * The informational tooltip text that appears under the selection input.
         * @type {string}
         *  ```xml
         * <ers-file information-tooltip-text="ctrl.informationTooltipTxt"/>
         * ```
         */
        informationTooltipTxt: string;
        /**
         * The $http service.
         * @type {ng.IHttpService}
         */
        private $http;
        /**
         * The promise service.
         * @type {ng.IQService}
         */
        private promiseService;
        /**
         * The $rootscope service.
         * @type {ng.IRootScopeService}
         */
        private $rootscope;
        static $inject: string[];
        /**
         * @constructor
         * @param $scope ng.IScope The scope
         * @param $element ng.IAugmentedJQuery The component element.
         * @param $q ng.IQService The promise service.
         * @param $rootScope ng.IRootScopeService The $rootscope service.
         * @param $http ng.IHttpService The $http service.
         * @param $timeout ng.ITimeoutService The $timeout service.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, $q: ng.IQService, $rootScope: ng.IRootScopeService, $http: ng.IHttpService, $timeout: ng.ITimeoutService);
        /**
         * Configuring the drop zone and the select button.
         */
        private configureUI();
        /**
         * The selection getter
         * @returns {File[]}
         */
        /**
         * The selection setter.
         * @param pSelection
         */
        selection: IFileItem[];
        /**
         *
         * @returns {boolean} True if the action button is visible.
         */
        /**
         *
         * @param pVisible {boolean} True if the action button is visible.
         */
        actionButtonVisible: boolean;
        /**
         *
         * @returns {string} The action button text.
         */
        /**
         *
         * @param pText {string} The action button text.
         */
        actionButtonText: string;
        /**
         *
         * @returns {Function} The function invoked when the action button is activated.
         */
        /**
         *
         * @param pAction {Function} The function invoked when the action button is activated.
         */
        actionButtonAction: Function;
        /**
         *
         * @returns {string} The text displayed during the selection or upload process, in addition to the clear all
         * button.
         */
        getSelectorUploaderText(): string;
        /************* File Selector Specifics ****************************/
        /**
         * Configures the default filters.
         */
        private configureFilters();
        /**
         * Gets the allowed filters.
         * @returns {IFileFilter[]} The list of allowed filters.
         */
        /**
         * The filters setter.
         * @param  Sets the allowed filters.
         */
        filters: IFileFilter[];
        /**
         * The default filter, folderFilter, is a promise that determines whether the selection is a file or a folder,
         * and resolves the promise when the selection is a file.
         * @param {Object} The selection being checked.
         * @returns {Boolean} "True" if the item is a file and not a folder.
         */
        folderFilter(item: IFileItem): ng.IPromise<Object>;
        /**
         * The queueLimitFilter is a promise that
         * sets the maximum number of files that can be selected at one time.
         * The promise, the maximum number of files, must be verified, even though the files have not yet been
         * pushed in the selection. It is resolved when the maximum number of files is verified.
         *
         * @param The maximum number of files against which to check.
         * @returns {ng.IPromise<Object>} A promise resolved if the maximum number of files has not been reached.
         */
        queueLimitFilter(file: IFileItem, currentFileIndex: number): ng.IPromise<Object>;
        /**
         * The sizeLimitFilter is a promise that sets the maximum size of a selected file. The promise,
         * maximum file size, is resolved when all of the files have been processed.
         * @param The files file the file to check.
         * @returns {ng.IPromise<Object>} A promise that is resolved if the file size limit has not been reached.
         *
         */
        sizeLimitFilter(file: IFileItem): ng.IPromise<Object>;
        /**
         * The typeFilter is a promise that reviews the types of files selected, and resolves when
         * the files have been processed and the file types are allowed.
         * @param Filters to check.
         * @returns {ng.IPromise<Object>} A promise resolved if the file type is allowed.
         */
        typeFilter(file: IFileItem): ng.IPromise<Object>;
        /**
         *
         *
         * The extensionFilter is a promise that checks the file extensions and resolves the promise if all of the
         * extensions are allowed.
         *
         * @param Extensions to check.
         * @returns {ng.IPromise<Object>} A promise resolved if the file extension is allowed.
         */
        extensionFilter(file: IFileItem): ng.IPromise<Object>;
        /**
         *
         * Removes one file from the selection, by its index.
         * @param Index the file index.
         * @param pUpdateUploadedStatus True if the uploadStatus.uploaded must be updated.
         */
        removeFile(index: number, pUpdateUploadedStatus: boolean, pKeepInError?: boolean): void;
        /**
         *
         * @param file
         * @param pUpdateUploadedStatus
         * @param pKeepInError
         * @private
         */
        private _removeFile(file, pUpdateUploadedStatus, pKeepInError?);
        /**
         * Removes all files from the selection.
         */
        removeAllFiles(pKeepInError?: boolean, pUpdateUploadedStatus?: boolean): void;
        /**
         * The maxFiles getter.
         * @returns {number} The maximum number.
         */
        /**
         * The maxFiles setter.
         * @param pMaxFiles The maximum number of files.
         */
        maxFiles: number;
        /**
         * The maxSize getter.
         * @returns {number} The maximum size of a file.
         */
        /**
         * The maxSize setter.
         * @param pMaxSize The maximum size of a file.
         */
        maxSize: number;
        /**
         * The context menu on each selected file in the selected items list.
         * @returns {number} the Context menu .
         */
        /**
         * The context menu on each selected file in the selected items list.
         * @param pMaxFiles The Context menu for each file.
         */
        selectedItemContextMenu: ers.components.contextmenu.IMenuItem[];
        /**
         * The file types getter.
         * @returns {string[]} The allowed file types.
         */
        /**
         * The file types setter.
         * @param pTypes The allowed file types.
         */
        types: string[];
        /**
         * The file extensions getter.
         * @returns {string[]} The allowed file extensions.
         */
        /**
         * The extensions setter.
         * @param pExtensions The allowed file extensions.
         */
        extensions: string[];
        /**
         * The multiple file getter.
         * @returns {boolean} The list of multiple files selected
         */
        /**
         * The multiple setter.
         * @param pMultiple The list of multiple files selected.
         */
        multiple: boolean;
        /**
         * Verify the validity of all files, and if they are all good, push them to the the selection array,
         * otherwise, raise an error.
         *
         * @param files the File list
         */
        pushFiles(files: FileList): ng.IPromise<Object>;
        /**
         * Verify the selected files against the filters.
         */
        private verifyFiles();
        /**
         * Verify that the files pass all the filters. Each filter is a promise which is resolved if
         * the file is not rejected by the filter or rejected for another reason.
         *
         * @param {File} file  The file(s) to check.
         * @param {number} filterIndex The current filter index.
         * @param {number} fileIndex The current filter index.
         * @returns {ng.IPromise<Object>} A promise resolved if all of the files pass all of the filters.
         */
        private checkFilters(file, filterIndex, fileIndex);
        /**
         * The inner callback that passes all the filter errors to the user controller.
         * @param {ISelectFileError[]} errors The filter errors.
         */
        private _onWhenAddingFileFailed(errors);
        /**
         * Filter error management.
         * If allErrorsTogether is set to true, this method stores all errors
         * and sends the errors after the last file is selected. Otherwise, the method calls the onWhenAddingFileFailed
         * callback after each error.
         * @param {File} file The file in error.
         * @param {IFileFilter[]} filter The filter that raised the error.
         */
        private: any;
        manageError(file: IFileItem, filter: IFileFilter): void;
        /**
         * How error management works when when allErrorsTogether=true.
         */
        private manageErrorsBulk();
        /************* END File Selector Specifics ****************************/
        /************* File Uploader Specifics ****************************/
        /**
         * Uploads one or all of the files in the selection.
         * The upload can be one-by-one, or en masse. The upload can be either sequential or simultaneous.
         * @param pFileItem a file to upload.
         */
        upload(pFileItem?: IFileItem): void;
        /**
         * Cancel uploading one file from the queue.
         * @param {IFileItem} pFile
         */
        cancelUpload(pFile: IFileItem): void;
        /**
         * Cancels uploading all files from the queue.
         */
        cancelAllUpload(): void;
        /**
         * Returns the files ready for upload.
         * @returns {Array}
         */
        getReadyItems(): IFileItem[];
        /**
         * Returns files not yet uploaded.
         * @returns {Array}
         */
        private getNotUploadedItems();
        /**
         * Returns uploaded or processed files.
         * @returns {Array}
         */
        private getProcessedItems();
        /**
         *
         * @returns {boolean} true If the file must be removed from the queue after it is uploaded.
         */
        private removeAfterUpload();
        /**
         *
         * @returns {boolean} true If the file(s) must be uploaded after selection.
         */
        autoUpload(): boolean;
        /**
         * Initialize the uploadStatus
         * @param pUploading The uploading number.
         * @param pUploaded The uploaded number.
         * @param pFailed The failed number.
         * @param pProgress The progress number.
         */
        initUploadStatus(pUploading?: number, pUploaded?: number, pFailed?: number, pProgress?: number): void;
        /**
         * Update the uploading number.
         * @param pNumber The uploading number.
         */
        private updateUploadingItems(pNumber?);
        /**
         * Update the uploaded number.
         * @param pNumber The uploaded number.
         */
        private updateUploadedItems(pNumber?);
        /**
         * Update the failed items number.
         * @param pNumber The failed items number.
         */
        private updateFailedItems(pNumber?);
        /**
         * Reset the global and item progress.
         * @param pFullReset True if it must be a full reset, or only an update of the total progress.
         */
        private resetUploadProgress(pFullReset?);
        /**
         *
         * @param value The current progress.
         * @returns {any} The total progress
         */
        getTotalUploadProgress(value?: number): number;
        /**
         * The XMLHttpRequest transport to upload.
         * @param {IFileItem} The file to upload.
         */
        private xhrTransport;
        /**
         * Checks whether or not the upload was successful.
         * @param {number} Status the response status
         * @returns {boolean} true if is succeed.
         */
        private isSuccessCode(status);
        /**
         * Transforms the server response
         * @param {string} response The server response.
         * @param {{}} headers The response headers.
         * @returns {string} The transformed headers response.
         */
        private transformResponse(response, headers);
        /**
         * The parsed response headers
         * @param {string} headers The headers.
         * @returns {Object} The parsed headers.
         * @see https://github.com/angular/angular.js/blob/master/src/ng/http.js
         */
        private parseHeaders(headers);
        /**
         * Return the function that returns the headers.
         * @param {{}} parsedHeaders The headers.
         * @returns {Function} The header getter
         */
        private headersGetter(parsedHeaders);
        /**
         * Inner callback for the file upload progress.
         * @param {IFileItem} item The file upload.
         * @param {number} progress The file upload progress.
         */
        private _onUploadProgressItem(item, progress);
        /**
         * Inner callback when the file upload succeeds.
         * @param {IFileItem} item The file upload.
         * @param {string} response The file upload response.
         * @param {number} status The file status response.
         * @param {{}} headers The file headers.
         */
        private _onUploadSuccessItem(item, response, status, headers);
        /**
         * Inner callback when the upload fails.
         * @param {IFileItem} item The file.
         * @param {string} response The failed upload response.
         * @param {number} status The status response.
         * @param {{}} headers The file headers.
         */
        private _onUploadErrorItem(item, response, status, headers);
        /**
         * Inner callback when the upload is canceled
         * @param {IFileItem} item The canceled file upload.
         * @param {string} response The callback response upon cancellation.
         * @param {number} status The status response.
         * @param {{}} headers The headers.
         */
        private _onUploadCancelItem(item, response, status, headers);
        /**
         * Inner callback when the upload is completed.
         * @param {IFileItem} item The file item.
         * @param {string} response The callback response upon completion.
         * @param {number} status The status response.
         * @param {{}} headers The headers.
         */
        private _onUploadCompleteItem(file, response, status, headers);
        /**
         * Inner callback when all of the uploads are complete.
         */
        private _onUploadCompleteAllItems();
        /**
         * HTML updates.
         */
        private render();
    }
}

/**
 * Created by bertheto on 06/04/2015.
 */
declare module ers.components.file {
    import BaseController = ers.components.core.BaseController;
    /**
     * ###Image file thumb component
     * Displays a thumbnail of the image file with the specified height and width.
     *
     *  ### Available Options
     *
     * The following are the options available for the ersImageFileThumb component:
     *
     * * [file](#_file), [width](#width), [height](#height)
     *
     * The following are the methods available for the ersImageFileThumb component:
     *
     * ### Available Methods
     *
     * * [onLoadFile](#onLoadFile), [onLoadImage](#onLoadImage), [isValid](#isValid),
     * [isFile](#isFile), [isImage](#isImage)
     *
     * ### Examples
     *
     * #### Example.
     *
     * ```xml
     *  <tr ng-repeat="imageFile in ctrl.imageFiles">
     *    <td>
     *      <strong>{{ imageFile.name }}</strong>
     *         <ers-image-file-thumb file="imageFile" height="100" width="100"></ers-image-file-thumb>
     *   </td>
     * </tr>
     * ```
     *
     */
    class ImageFileThumbComponent extends BaseController {
        /**
         * The HTML image element created from the file.
         * @type {HTMLImageElement}
         */
        private img;
        /**
         * The canvas HTML element used to create the thumbnail.
         * @type {ng.IAugmentedJQuery}
         */
        private canvas;
        /**
         * The file reader that reads the image file.
         * @type {FileReader}
         */
        private reader;
        /**
         * The image file.
         * @type {File}
         */
        private _file;
        /**
         * The thumbnail width.
         * @type {number}
         */
        width: number;
        /**
         * The thumbnail height.
         * @type {number}
         */
        height: number;
        static $inject: string[];
        /**
         * @constructor
         * @param $scope ng.IScope The scope.
         * @param $element ng.IAugmentedJQuery The component element.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery);
        /**
         * File getter
         * @returns {File} The file.
         */
        /**
         * File setter
         * @param pFile The file.
         */
        file: File;
        /**
         * The load file event handler that loads the image.
         * @param event The event
         */
        private onLoadFile;
        /**
         * The load image event handler that draws the image.
         */
        private onLoadImage;
        /**
         *
         * @param item The image file verification that this is an image file.
         * @returns {boolean} True if the file is really an image file.
         */
        private isValid(item);
        /**
         *
         * @param item The image file file verification.
         * @returns {boolean} True if the file is really a file.
         */
        private isFile(item);
        /**
         *
         * @param file The image file.
         * @returns {boolean} True if the file is an image of a certain type.
         */
        private isImage(file);
    }
}

declare module ers.components.form {
    import BaseComponent = ers.components.core.BaseComponent;
    import FormService = ers.components.form.FormService;
    /**
     * @ngdoc directive
     * @name ersForm
     * @restrict A
     * @module ers.components.form
     *
     * @description
     *
     * Use the `ers-form` component to validate the form fields on a page when you click Submit. You can use this
     * component on an form field instead of adding a submit attribute to a different component or using the ng-submit
     * component. When you click Submit, `ers-form`notifies you when:
     *
     * - A field does not validate, and then highlights the invalid field.
     * - All of the fields are valid, and then displays a modal message.
     *
     * ### Usage
     *
     * `ers-form` validates the following ers input components:
     *
     * - Textbox
     * - Number
     * - Calendar
     * - RadioButton
     * - Checkbox
     * - Combobox
     *
     *
     * The component can be configured with a popover or tooltip for more verbose field-level error, success,
     * of help information.
     *
     * ### Examples
     *
     * Use of ers-form component within an HTML form.
     * - Add the requested information to all of the form input fields. All fields are required.
     * - Click Submit.
     *
     * <code-editor identifier="example" data-title="Basic Usage"
     * html-content-url="demos/ersForm/basicUsage/index.html"
     * js-content-url="demos/ersForm/basicUsage/script.js"
     * css-content-url="demos/ersForm/basicUsage/styles.css" content-mode="html"></code-editor>
     *
     * ### Design Guidelines
     *
     * No design guidelines.
     *
     * ### Accessibility Guidelines
     *
     * No accessibility guidelines.
     *
     * @param {Function} ersForm This component evaluates the fields on a form when a
     * "submit" is triggered, and returns a value for valid or not.
     *
     */
    class FormController extends BaseComponent {
        /** The form name for which the component is defined. */
        private formName;
        /** This property contains the "submit" function to execute if the form and the defined components are valid. */
        private submitFct;
        /** The ERS form service configured to validate the configured components contained when the
         * submit/reset event occurs. */
        private _formService;
        static $inject: string[];
        /**
         * Constructor.
         * @param $element The component element.
         * @param $attrs List of the all attributes contained in the XML element of this component.
         * @param ersFormService ERS form Service configured to validate the components contained
         * in the form when the submit/reset event occurs.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, $attrs: ng.IAttributes, formService: FormService);
        /**
         * The function to run when the submit button is clicked.
         */
        private ersOnSubmitEventWrapper();
    }
}

declare module ers.components.grid {
    /**
     * The available data type options for the grid <code>dataType<code>.
     */
    class DataType {
        /**
         *
         * @type {string}
         */
        static TEXT: string;
        /**
         *
         * @type {string}
         */
        static DATE: string;
        /**
         *
         * @type {string}
         */
        static NUMBER: string;
        /**
         *
         * @type {string}
         */
        static CHECKBOX: string;
        /**
         *
         * @type {string}
         */
        static COMBOBOX: string;
    }
}

declare module ers.components.grid.renderer.options {
    interface IErsCellRendererOptions {
        ngRequired?: boolean;
        ngDisabled?: boolean;
        ngReadonly?: boolean;
        format?: string;
    }
}


declare module ers.components.grid.renderer.options {
    /**
     * Expose options of the text box. Please see the textbox documentation for more
     * information.
     */
    interface IErsTextboxRendererOptions extends IErsCellRendererOptions {
        name?: string;
        ngPattern?: string;
        ngMinLength?: number;
        ngMaxlength?: number;
        textAlign?: string;
    }
}


declare module ers.components.grid.renderer.options {
    /**
     * Expose options of the text box. Please see the textbox documentation for more
     * information.
     */
    interface IErsCheckboxRendererOptions extends IErsCellRendererOptions {
        ngTrueValue: string | number | boolean;
        ngFalseValue: string | number | boolean;
    }
}


declare module ers.components.grid.renderer.options {
    /**
     *
     */
    interface IErsComboboxRendererOptions extends IErsCellRendererOptions {
        items: Array<Object | string | number>;
        innerRenderer?: Function;
    }
}


declare module ers.components.grid.renderer.options {
    interface IErsCalendarRendererOptions extends IErsCellRendererOptions {
        minDate: Date;
        maxDate: Date;
        currentText: string;
        closeText: string;
        clearText: string;
        showButtonBar: boolean;
        dateFormat: string;
    }
}


declare module ers.components.grid {
    import ColDef = ag.grid.ColDef;
    /**
     * Establishes the grid column definition.
     */
    interface IColumnDefinition extends ColDef {
        /**
         *
         * Sets the data type, (text, date, or number) and appropriate renderer for cell editing.
         *
         *
         */
        dataType?: string;
        /**
         * the name.
         */
        name?: string;
        enableColResize?: boolean;
        editable?: boolean;
        suppressSorting?: boolean;
        suppressMenu?: boolean;
        /**
         *
         */
        ersCellRendererOptions?: renderer.options.IErsCellRendererOptions | renderer.options.IErsTextboxRendererOptions | renderer.options.IErsCheckboxRendererOptions | renderer.options.IErsComboboxRendererOptions | renderer.options.IErsCalendarRendererOptions;
    }
}

declare module ers.components.grid {
    /**
     *
     */
    interface IVirtualRowListener {
        /**
         * This method returns the row status when a row is clicked.
         *
         * @param selected&#151;True when the row is selected, otherwise false.
         */
        rowSelected(selected: boolean): void;
        /**
         *
         */
        rowRemoved(): void;
    }
}

declare module ers.components.grid {
    /**
     * The interface describing the IDatasource.getRows parameters.
     */
    interface IGetRowsParameters {
        /**
         * The first row index to get.
         */
        startRow: number;
        /**
         * The first row index to NOT get.
         */
        endRow: number;
        /**
         * When successful, the callback to call for the result is comprised of two parameters:
         * <ul>
         *   <li>rowsThisPage&#151; An array of rows loaded for this page.</li>
         *   <li>lastRow&#151; The total number of rows, if known.</li>
         * </ul>
         */
        successCallback: Function;
        /**
         * When unsuccessful, the callback to call. No parameter is expected.
         */
        failCallback: Function;
    }
}


declare module ers.components.grid {
    /**
     *
     * A datasource is used to manage how data is loaded onto a page in rows, either all at once, or delayed.
     * There are two ways to
     * accomplish this delay, pagination and virtual paging. Each of method uses a datasource. The following
     * discusses how to create the datasource used by each of these methods.
     *
     */
    interface IDatasource {
        /**
         * The function that must be implemented to load the rows.
         * @param start The first row index to get.
         * @param finish The first row index to NOT get.
         * @param callbackSuccess The callback called when successful. The callback expects the following parameters:
         * <ul>
         *   <li>rowsThisPage&#151;An array of rows loaded for this page.</li>
         *   <li>lastRow&#151;The total number of rows, if known.</li>
         * </ul>
         *
         * @param callbackFail The callback called when the result fails. No parameters are expected
         */
        getRows(params: IGetRowsParameters): void;
        /**
         * Determines the number of rows that comprise one page, or, the page size. Each call to the datasource is
         * a request for one page.
         */
        pageSize: number;
        /**
         *
         * The total number of rows, if known, in the data set on the server. If the number of rows is unknown,
         * do not set the value, or set the value to -1. When no value, or the value -1 is used, the grid enters
         * infinite scrolling mode
         * until the last row is reached. The definition of infinite
         * scrolling depends on whether you are using pagination or virtual paging.
         *
         */
        rowCount?: number;
        /**
         *
         * Used for virtual paging. Determines the number of rows that can
         * be scrolled beyond the current last row when infinite scrolling is active. For example, if 200 rows are
         * already loaded from server, and
         * overflowSize is 50, the scroll allows scrolling to row 250.
         *
         */
        overflowSize?: number;
        /**
         * Used for virtual paging. Determines the number of concurrent requests to to send to the server.
         * When the maximum number is reached the requests are queued. The default is 1, meaning that only one request
         * will be active at any given time.
         *
         */
        maxConcurrentRequests?: number;
        /**
         *
         * Used for virtual paging. Determines the number of pages to cache in the client. The default is no limit,
         * and every requested page is cached. Use this where there are memory issues so that pages not recently
         * viewed are purged. If used, ensure that enough pages are cached to display a complete view of the table. When
         * too few pages are cached, an infinite loop page request occurs.
         *
         */
        maxPagesInCache?: number;
    }
}


/**
 * @Deprecated
 */
declare module ers.components.grid {
    /**
     * Interface describing the grid api
     */
    interface IGridApi extends ag.grid.GridApi {
        /**
         *
         * Determines the actions when a row or rows is selected. When multi is true, previous selections are kept. When
         * multi is false, any previously selected rows are unselected. If suppressEvents is
         * true, then rowSelected and selectionChanged are not called during the selection.
         * @param index&#151;
         * @param multi&#151;When true, previously checked selections are kept when another selection is made, when false,
         * previously selected rows are unselected.
         * @param suppressEvents&#151;When true, prevents rowSelected and selectionChanged from being called.
         */
        selectIndex(index: number, multi: boolean, suppressEvents: boolean): void;
        /**
         *
         * Register a callback for notifications about a particular virtualized row. When the row is removed from the table
         * due to virtualization, the callback is removed. This callback is intended for cell renderers that want to
         * register for events for the rendered row. When the row is no longer rendered on the screen, the callbacks
         * stop. When the row is redrawn the cell renderer must register another callback.
         *
         */
        addVirtualRowListener(rowIndex: number, callback: IVirtualRowListener): void;
        /**
         * Set the the datasource using the API.
         *
         * @param datasource
         */
        setDatasource(datasource: IDatasource): void;
    }
}

declare module ers.components.grid {
    /**
     * Helper interface for using the treeview feature in the grid.
     *
     */
    interface ITreeviewData {
        /**
         *
         * Flag the entry as a leaf or not.
         *
         */
        group: boolean;
        /**
         *
         * The initial state. Setting this flag true displays the tree entry as expanded.
         *
         */
        expanded: boolean;
        /**
         *
         * The data object describing the row.
         *
         */
        data: Object;
        /**
         *
         * The children of the current entry. Each entry is another instance of ITreeviewData.
         *
         */
        children: Array<ITreeviewData>;
    }
}

declare module ers.components.grid {
    /**
     * Icons options for use in Grid Options.
     */
    interface IIconsOptions {
        groupExpanded: string;
        groupContracted: string;
    }
}

declare module ers.components.grid {
    /**
     * Row and column options.
     */
    interface IGridOptions extends ag.grid.GridOptions {
        /**
         *
         * This field adds a checkbox to a row letting the user select the line. Row selection must be enabled.
         *
         */
        checkboxSelection?: boolean;
        /**
         *
         * This field creates an array of column definitions which adds column headers to your grid.
         *
         */
        columnDefs: IColumnDefinition[];
        /**
         *
         * This field creates data to be displayed as rows in the table.
         *
         */
        rowData: Object[] | ITreeviewData[];
        /**
         * A datasource is used to manage how data is loaded onto a page in rows, either all at once, or delayed.
         * There are two ways to
         * accomplish this delay, pagination and virtual paging. Each of method uses a datasource. The following
         * discusses how to create the datasource used by each of these methods.
         *
         *
         */
        datasource?: IDatasource;
        /**
         *
         * This option allows you to customize the displayed icons.
         *
         *
         */
        icons?: IIconsOptions;
        /**
         *
         * Set this option to true to edit the column data.
         *
         */
        editable?: boolean;
    }
}

declare module ers.components.grid {
    /**
     * Define the expected attributes for the <code>ers-grid</code> component.
     *
     */
    interface IGridScope extends ng.IScope {
        options: IGridOptions;
    }
}

declare module ers.components.grid {
    /**
     * Parameter details given to a cell renderer function.
     */
    interface ICellRendererParams {
        /**
         * The value to be rendered.
         */
        value: string | number | boolean | Date | Object;
        /**
         * The row (from the rowData array, where value was taken) been rendered. It contains
         * all the fields you provided in the data row.
         *
         */
        data: Object;
        /**
         *The colDef been rendered.
         */
        colDef: IColumnDefinition;
        /**
         *If compiling to Angular, is the row's child scope, otherwise null.
         */
        $scope: ng.IScope;
        /**
         *The index of the row renderer, after sorting and filtering.
         */
        rowIndex: number;
        /**
         *A reference to the Angular Grid API.
         */
        api: IGridApi;
        /**
         *The gridOptions context.
         */
        context: Object;
        /**
         *
         * A callback function telling the grid to refresh this cell and reapply all css styles and classes.
         *
         */
        refreshCell: Function;
        /**
         * Node object.
         */
        node: Object;
        /**
         * A virtual HTML element using the same HTML as the cell. Any interaction with this HTML and especially
         * related to events will not be reflected on the displayed content
         */
        eGridCell: ag.vdom.VHtmlElement;
    }
}


declare module ers.components.grid.renderer {
    interface IRenderer {
        /**
         * The function called by the Grid. It can return either an HTMLElement or a string.
         * @param parameters
         */
        renderer(parameters: ICellRendererParams): HTMLElement | string;
    }
}

declare module ers.components.grid.renderer {
    /**
     * This helper is only for the column of selection checkbox we add at the
     * beginning of the grid
     */
    class CheckboxSelectionRenderer implements IRenderer {
        /**
         *
         * @param parameters
         */
        renderer(cellRendererParams: ICellRendererParams): HTMLElement;
    }
}

declare module ers.components.grid {
    /**
     *
     * A helper class that specifies the row selection mode (rowSelection)
     * in your grid options.
     *
     */
    class RowSelectionMode {
        /**
         * This selection mode allows multiple rows to be selected at one time.
         * @type {string}
         */
        static MULTIPLE: string;
        /**
         * This selection mode allows only one row to be selected at a time. When a second row is selected, the first
         * is unselected.
         *
         * @type {string}
         */
        static SINGLE: string;
    }
}


declare module ers.components.grid.renderer {
    /**
     *
     * The first column or default cell renderer for a tree grid.
     *
     */
    class TreeviewCellRender implements IRenderer {
        /**
         *
         * @param parameters
         */
        renderer(cellRendererParams: ICellRendererParams): string;
    }
}

declare module ers.components.grid.utils {
    class StringUtils {
        /**
         *
         * Transforms a camelCase string to a dash separated string&#151;words separated by a dash and all in lower case.
         * For example, ngRequired becomes ng-required. See
         * <a href="http://www.devcurry.com/2011/07/javascript-convert-camelcase-to-dashes.html">
         *     http://www.devcurry.com/2011/07/javascript-convert-camelcase-to-dashes.html/> for more information.
         *
         * @param str
         * @returns {any}
         */
        static camelToDash(str: string): string;
    }
}


declare module ers.components.grid.renderer {
    /**
     * A common renderer for editing data in the grid. You should not use this. You should extend
     * this one a customize the exprience following your needs.
     */
    class CommonErsInputRenderer implements IRenderer {
        protected $scope: ng.IScope;
        protected $compile: ng.ICompileService;
        protected $filterService: ng.IFilterService;
        /**
         *
         * @param $scope
         * @param $compile
         * @param $filterService
         */
        constructor($scope: ng.IScope, $compile: ng.ICompileService, $filterService: ng.IFilterService);
        /**
         * Default method to give to the grid (cellRenderer field of the column definition).
         * This method will return the content depending on the mode. If the desired mode is
         * edition (formalized by the editing field of the column definition), this render
         * will return an HTMLElement object containing the editor. Otherwise, the reader
         * is returned.
         * @param params
         * @returns {HTMLElement}
         */
        renderer(params: ICellRendererParams): HTMLElement;
        /**
         * Default Cell Value getter.
         * @param params grid raw data and definition
         */
        protected setDataAccess(params: ICellRendererParams): void;
        /**
         * Just to be able to distinguish this text portion from a component and easily a
         * CSS style only to this text otherwise my option was to apply a style to the upper
         * span but then, the component had herited the CSS properties which i didn't wanted.
         * @param value
         * @returns {HTMLElement}
         */
        protected getReadingView(params: ICellRendererParams): HTMLElement;
        /**
         * The grid default's overflow value of cells is hidden. It must be hidden when we
         * are in reading mode otherwise we can have visual glitch. Be sure to call
         * this method when you a in reading mode.
         * @param params
         */
        protected restoreCellOverflow(params: ICellRendererParams): void;
        /**
         * Return the user's cell render wrapped into an HTMLElement if it's a string.
         *
         * @param params
         * @returns {HTMLElement}
         */
        protected getUserCellRender(params: ICellRendererParams): HTMLElement;
        /**
         * It will check provided options (listed in IErsCellRendererOptions) and
         * for each options, if needed, add it to the provided HTML element
         * @param options
         * @returns {string}
         */
        protected getOptionsAsString(options: options.IErsCellRendererOptions): string;
        /**
         * Return the editor
         * @param params
         * @returns {HTMLElement}
         */
        protected getEditingView(params: ICellRendererParams): HTMLElement;
        /**
         *
         * @param compiledTemplate
         * @param params
         * @param scope
         */
        protected bindEvent(compiledTemplate: ng.IAugmentedJQuery, params: ICellRendererParams, scope: ng.IScope): void;
        /**
         * This method will just update the 'editing' field of the column definition and switch
         * it the true and launch a cell refresh
         * @param params
         * @param cell
         * @param event
         */
        onDoubleClick(params: ICellRendererParams, cell: HTMLElement, event: MouseEvent): void;
        /**
         * Called when we leave the editor. Check if we are in edit mode and update the editing
         * field value if it's the case.
         * Finally, it will launch a cell refresh to update it.
         * @param params
         * @param scope
         * @param targetedCell
         */
        onBlur(event: Event, params: ICellRendererParams, scope: ng.IScope): void;
        private getData(params);
        /**
         * Will check if the user has set a value setter and use it if it's the case. Otherwise, will store
         * it in params.data. Moreover, it will trigger needed event for AG-Grid to detect data change.
         * @param params
         */
        private changeData(params);
        /**
         * Try to intercept ENTER and ESCAPE in order to validate data in editing mode
         * of discard it
         * @param keyboardEvent
         * @param params
         * @param scope
         */
        onKeydown(keyboardEvent: KeyboardEvent, params: ICellRendererParams, scope: ng.IScope): void;
    }
}

declare module ers.components.grid.renderer {
    class ErsTextboxRenderer extends CommonErsInputRenderer implements IRenderer {
        /**
         *
         * The following prevents instantiating more than one ErsTextboxRenderer instance per cell.
         *
         */
        private static _instance;
        /**
         *
         * @param $scope
         * @param $compile
         * @param $filterService
         */
        constructor($scope: ng.IScope, $compile: ng.ICompileService, $filterService: ng.IFilterService);
        /**
         *
         * @param $scope
         * @param $compile
         * @param $filterService
         * @returns {ErsTextboxRenderer}
         */
        static getInstance($scope: ng.IScope, $compile: ng.ICompileService, $filterService: ng.IFilterService): ErsTextboxRenderer;
        /**
         * Return the editor (an Ers Textbox component)
         * @param params
         * @returns {HTMLElement}
         */
        protected getEditingView(params: ICellRendererParams): HTMLElement;
        /**
         *
         * Bind the keydown and blur events to the component so the user can exit the
         * editor.
         *
         * @param compiledTemplate
         * @param params
         * @param ersTextboxScope
         *
         */
        protected bindEvent(compiledTemplate: ng.IAugmentedJQuery, params: ICellRendererParams, ersTextboxScope: ng.IScope): void;
        /**
         *
         * @param options
         * @returns {string}
         *
         */
        protected getOptionsAsString(options: options.IErsTextboxRendererOptions): string;
    }
}


declare module ers.components.grid.renderer.options {
    /**
     * Expose options of the number box. Please see the textbox documentation for more
     * information.
     */
    interface IErsNumberRendererOptions extends IErsCellRendererOptions {
        name?: string;
        min?: number;
        max?: number;
        textAlign?: string;
        format?: string;
    }
}


declare module ers.components.grid.renderer {
    class ErsNumberRenderer extends CommonErsInputRenderer implements IRenderer {
        /**
         * Stores the singleton.
         */
        private static _instance;
        constructor($scope: ng.IScope, $compile: ng.ICompileService, $filterService: ng.IFilterService);
        /**
         * Let the developer retrieve the current instance of the singleton.
         *
         * @param $scope
         * @param $compile
         * @param $filterService
         * @returns {ErsNumberRenderer}
         *
         */
        static getInstance($scope: ng.IScope, $compile: ng.ICompileService, $filterService: ng.IFilterService): ErsNumberRenderer;
        /**
         * Return the reader part of the renderer and apply the any filter (if any)
         * to the data before rendering.
         *
         * @param params
         * @returns {HTMLElement}
         */
        protected getReadingView(params: ICellRendererParams): HTMLElement;
        /**
         * Return the HTMLElement containing the Numberbox editor
         * @param params
         * @returns {HTMLElement}
         */
        protected getEditingView(params: ICellRendererParams): HTMLElement;
        /**
         *
         * Bind keyboard and blur events to the appropriate elements.
         *
         * @param compiledTemplate
         * @param params
         * @param ersNumberScope
         *
         */
        protected bindEvent(compiledTemplate: ng.IAugmentedJQuery, params: ICellRendererParams, ersNumberScope: ng.IScope): void;
        /**
         *
         * Overrides the parent behavior and implements an escape handler for ersNumber.
         * @param keyboardEvent
         * @param params
         * @param scope
         * @param cell
         *
         */
        onKeydown(keyboardEvent: KeyboardEvent, params: ICellRendererParams, scope: ng.IScope): void;
        /**
         * Check the options of the renderer (see IErsNumberRendererOptions) and add it to
         * the template
         * @param options
         * @returns {string}
         */
        protected getOptionsAsString(options: options.IErsNumberRendererOptions): string;
    }
}

/**
 * Created by GunduzB on 7/3/2015.
 */
declare module ers.components.grid.renderer {
    class ErsCheckboxRenderer implements IRenderer {
        private static _instance;
        protected $scope: ng.IScope;
        protected $compile: ng.ICompileService;
        constructor($scope: ng.IScope, $compile: ng.ICompileService);
        /**
         * Allows you to retrieve the individual checkbox.
         * @param $scope
         * @param $compile
         * @returns {ErsCheckboxRenderer}
         */
        static getInstance($scope: ng.IScope, $compile: ng.ICompileService): ErsCheckboxRenderer;
        renderer(cellRendererParams: ICellRendererParams): HTMLElement;
    }
}


declare module ers.components.grid.renderer {
    class ErsComboboxRenderer extends CommonErsInputRenderer implements IRenderer {
        private static _instance;
        constructor($scope: ng.IScope, $compile: ng.ICompileService, $filterService: ng.IFilterService);
        /**
         * Allows you to retrieve the individual combobox.
         * @param $scope
         * @param $compile
         * @param $filterService
         * @returns {ErsComboboxRenderer}
         */
        static getInstance($scope: ng.IScope, $compile: ng.ICompileService, $filterService: ng.IFilterService): ErsComboboxRenderer;
        /**
         * Returns the HTMLElement editor.
         * @param params
         * @returns {HTMLElement}
         */
        protected getEditingView(params: ICellRendererParams): HTMLElement;
        /**
         *
         * Aggregates the HTML with options, binds a scope, and sends it to Angular to compile.
         * @param params
         * @param ersComboboxScope
         * @returns {ng.IAugmentedJQuery}
         *
         */
        private getCompiledTemplate(params, ersComboboxScope);
        /**
         *
         * An internal method that creates the corresponding HTML combobox entries.
         * @param params
         * @param ersComboboxScope
         * @returns {string}
         *
         */
        private getItemsTemplate(params, ersComboboxScope);
        /**
         * Binds the desired keyboard events and 'on change' events to the corresponding onBlue and onKeydown methods.
         *
         * See the onBlur and onKeydown method of the CommonersInputRenderer for more information about
         * those events.
         *
         * @param compiledTemplate
         * @param params
         * @param ersComboboxScope
         *
         */
        private bindEvents(compiledTemplate, params, ersComboboxScope);
        onDoubleClick(params: ICellRendererParams, cell: HTMLElement, event: MouseEvent): void;
    }
}


declare module ers.components.grid.renderer {
    class ErsCalendarRenderer extends CommonErsInputRenderer implements IRenderer {
        /**
         * In order to have better performance, we use a single instance for all cells. This is
         * the singleton.
         */
        private static _instance;
        /**
         *
         * @param $scope
         * @param $compile
         * @param $filterService
         */
        constructor($scope: ng.IScope, $compile: ng.ICompileService, $filterService: ng.IFilterService);
        /**
         * return the singleton
         * @param $scope
         * @param $compile
         * @param $filterService
         * @returns {ErsCalendarRenderer}
         */
        static getInstance($scope: ng.IScope, $compile: ng.ICompileService, $filterService: ng.IFilterService): ErsCalendarRenderer;
        /**
         * The calendar has a formatter and can be configured by the user using the dedicated
         * option. (see Calendar component IErsCalendarRendererOptions for more information
         * about available options)
         * @param params
         */
        protected getReadingView(params: ICellRendererParams): HTMLElement;
        /**
         * Return the HTMLElement having the editor (calendar component)
         * @param params provided by the grid
         * @returns {HTMLElement}
         */
        blurCalendar: any;
        protected getEditingView(params: ICellRendererParams): HTMLElement;
        /**
         * Return the calendar component template compiled by angular. We attach a scope having
         * needed parameters before requesting the angular compile.
         * @param params
         * @param ersCalendarScope
         * @returns {ng.IAugmentedJQuery}
         */
        private getCompiledTemplate(params, ersCalendarScope, blur?);
    }
}

/**
 * @ngdoc directive
 * @module ers.components.grid
 * @name ersGrid
 * @binding
 * @attribute
 *
 * @restrict E
 *
 * @description
 *
 * Use the `ers-grid` component to create and display a data grid. A JSON object contains the options for column and
 * data definitions and provides data after the grid initializes. The `ers-grid` component is a wrapper around
 * the AngularJS grid component, `ag-grid`. For more information, see
 * [http://www.ag-grid.com/](http://www.ag-grid.com/javascript-grid-interfacing-overview/index.php).
 *
 * ### Usage
 *
 * The following options are available when creating a grid:
 *
 * - Basic&#151;The basic grid provides columns and rows with the following options:
 *    - Column resizing
 *    - Column definition
 *    - Column sorting
 *    - Column filtering
 * - Lazy Loading&#151;Lazy loading provides a loading message when loading a large data set and the data array is set
 * to null.
 * - Custom Renderer&#151;Each column can have a custom renderer (`cellRenderer`) to tailor the visual impact of
 * the data on a column-by-column basis.
 * - Selection/Multi-selection&#151;The `checkboxSelection` option allows you to set single rows as selectable.
 * The `rowSelection` option makes multiple rows selectable.
 * - Pagination&#151;Use pagination to navigate through the grid. Pagination works only with the associated datasource.
 * - Treeview&#151;Use treeview to display a hierarchical view of your grid. To use this feature you must formalize
 * your data grouping with `rowsAlreadyGrouped`.
 * - Edition&#151;The edition feature uses `ers-component` to create a text, a number, or a combobox style grid.
 * Indicate the data
 * type in the column definition and include the options for the underlying `ers-component` to enable this feature.
 *
 * ### Examples
 *
 * #### Basic Usage
 *
 * The following example demonstrates a basic grid:
 *
 * <code-editor identifier="example" data-title="Simple Grid" html-content-url="demos/ersGrid/simpleGrid/index.html"
 * js-content-url="demos/ersGrid/simpleGrid/script.js" css-content-url="demos/ersGrid/simpleGrid/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Sorting and Filtering
 *
 * The following example demonstrates a grid with column sorting and resizable columns:
 *
 * <code-editor identifier="example1" data-title="Sort and filter" html-content-url="demos/ersGrid/basicUsage/index.html"
 * js-content-url="demos/ersGrid/basicUsage/script.js" css-content-url="demos/ersGrid/basicUsage/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Pagination
 *
 * The following example demonstrates a grid with pagination:
 *
 * <code-editor identifier="example2" data-title="Pagination" html-content-url="demos/ersGrid/pagination/index.html"
 * js-content-url="demos/ersGrid/pagination/script.js" css-content-url="demos/ersGrid/pagination/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Selection
 *
 * The following example demonstrate a grid with data row selection (Press 'Ctrl' for multiselection):
 *
 * <code-editor identifier="example3" data-title="Selection" html-content-url="demos/ersGrid/multiSelect/index.html"
 * js-content-url="demos/ersGrid/multiSelect/script.js" css-content-url="demos/ersGrid/multiSelect/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Treeview
 *
 * The following example demonstrate a grid which display your data in a tree view:
 *
 * <code-editor identifier="example4" data-title="Treeview" html-content-url="demos/ersGrid/treeview/index.html"
 * js-content-url="demos/ersGrid/treeview/script.js" css-content-url="demos/ersGrid/treeview/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Frozen columns
 *
 * The following example demonstrate a grid with frozen columns:
 *
 * <code-editor identifier="example5" data-title="Frozen columns"
 * html-content-url="demos/ersGrid/frozenColumns/index.html"
 * js-content-url="demos/ersGrid/frozenColumns/script.js" css-content-url="demos/ersGrid/frozenColumns/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Tooltip on columns
 *
 * The following example demonstrate how to set a tooltip on column.
 *
 * - Column 'GUID' has a tooltip:
 *
 * <code-editor identifier="example6" data-title="Tooltip columns"
 * html-content-url="demos/ersGrid/longlabelTooltip/index.html"
 * js-content-url="demos/ersGrid/longlabelTooltip/script.js" css-content-url="demos/ersGrid/longlabelTooltip/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Min-max width columns
 *
 * The following example demonstrate how to set minimum and maximum width of the column while resizing:
 *
 * - Column 'GUID' is set with minimum and maximum width.
 * - Minimum width: 80px
 * - Maximum width: 260px
 *
 * <code-editor identifier="example7" data-title="min-max width"
 * html-content-url="demos/ersGrid/minmaxWidth/index.html"
 * js-content-url="demos/ersGrid/minmaxWidth/script.js" css-content-url="demos/ersGrid/minmaxWidth/styles.css"
 * content-mode="html"></code-editor>
 *
 * ### Design Guidelines
 * There are no specific visual design or styling guidelines for `ers-grid`.
 *
 * ### Accessibility Guidelines
 *
 * No accessibility guidelines
 *
 *
 * @param {object} options Sets the grid options.
 *
 * See the [IGridOptions](http://galileo/typedoc/interfaces/ers.components.grid.igridoptions.html)
 * API for a full list of grid options.
 *
 *
 */
declare module ers.components.grid {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * The Angular module containing all necessary resources for the grid component.
     *
     * @type {IModule}
     *
     */
    var gridModule: ng.IModule;
    /**
     * The Grid controller.
     */
    class GridComponent extends BaseComponent {
        /**
         *
         * Resources for the Angular component.
         *
         * @type {string[]}
         */
        static $inject: string[];
        /**
         *
         * @type {string[]}
         *
         */
        private static MESSAGES;
        /**
         *
         * Icon definition for the tree view mode when a leaf is opened.
         *
         * @type {string}
         *
         */
        static GROUP_EXPANDED_ICON: string;
        /**
         * Icon definition for the tree view mode when a leaf is closed.
         * @type {string}
         */
        static GROUP_CONTRACTED_ICON: string;
        /**
         *
         * The logger provided by the Angular service.
         *
         */
        private logger;
        /**
         * The compile service.
         */
        private $compile;
        /**
         * The filtering service.
         */
        private $filterService;
        /**
         * Options for the ers-grid component
         */
        options: IGridOptions;
        /**
         *
         * This flag is set to true when the grid is ready. If grid options are
         * not provided, the flag stays set to false.
         *
         * @type {boolean}
         *
         */
        initialized: boolean;
        /**
         * This variable stores the user message displayed when the grid
         * is loading or when a grid issue occurs.
         *
         * @type {string}
         */
        loadingMessage: string;
        constructor(logger: ng.ILogService, $element: ng.IAugmentedJQuery, $attributes: ng.IAttributes, $scope: ng.IScope, $compile: ng.ICompileService, $filterService: ng.IFilterService);
        /**
         *
         * Initializes the components, customizing the grid before it renders.
         *
         */
        init(): void;
        private addListeners();
        /**
         *
         * Customizes the header style. Currently the only header style customization is the height of the header.
         *
         *
         *
         */
        private customizeHeaderStyle();
        /**
         *
         * Customizes the the row height option and sets it to 35px.
         *
         */
        private customizeRows();
        /**
         *
         * Sets the default single row selection mode true by clicking on a cell.
         *
         */
        private setrowSelection();
        /**
         *
         * Sets the default icons for the treeview if the user has not set unique icons.
         *
         *
         *
         */
        private customizeForTreeView();
        /**
         *
         * Checks to see if the checkbox option is selected. When the checkbox option for a row is selected,
         * a column for the checkbox component is added.
         *
         *
         *
         */
        private checkCheckboxSelection();
        /**
         *
         * Checks each column and sets the appropriate renderer when no renderer is detected.
         *
         */
        private checkEditableRenderer();
        /**
         *
         * Based on the column definition, determines if a cell renderer is needed, and if needed, sets it.
         *
         * @param columnDef
         *
         */
        private resolveCellRenderer(columnDef);
        /**
         *
         * Catches the user event (clicking between the component and the grid) and passes it to the underlying
         * ers component to set the edit mode.
         *
         * @param columnDef
         */
        private patchDoubleClick(columnDef);
        /**
         * Checks to see if column rendering requires a custom CSS.
         *
         * @param columnDef
         * @param params
         *
         */
        private checkCssStyleForColumn(columnDef);
    }
}

declare module ers.components.icon {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * @ngdoc directive
     * @name ersIcon
     * @restrict E
     * @module ers.components.icon
     * @scope
     *
     *
     * @description
     *
     * Use the `ers-icon` component to display a variety of Galileo icons.
     *
     * ### Examples
     *
     * A basic set of icons. You can also apply the disabled state.
     *
     * <code-editor identifier="example1" data-title="Basic Icons" html-content-url="demos/ersIcon/basicUsage/index.html"
     * js-content-url="demos/ersIcon/basicUsage/script.js" css-content-url="demos/ersIcon/basicUsage/styles.css"
     * content-mode="html"></code-editor>
     *
     * ### Design Guidelines
     * - Use icons anywhere a user can take an action, or to make specific data or information stand out
     * from the surrounding data.
     * - To make a clickable icon and to activate the specific CSS on a mouse-over, you must set the 'ng-click' attribute.
     *
     * ### Accessibility Guidelines
     *
     * No accessibility guidelines
     *
     * @param {string} [name] {@} Defines the name of icon being displayed.
     *
     * @param {boolean} [ng-disabled=false] {=} Sets the current icon to disabled or not.
     *
     *
     * @param {string} [size] {@} Use this attribute to change the font size of the current icon.
     *   The size is set in pixels, *for example*, size="17px".
     *
     *
     */
    class IconComponent extends BaseComponent {
        /** Icon name. */
        private _name;
        /** Hook used to apply specifics behaviors on the click event. */
        private spanHook;
        /** True if the icon is clickable. */
        private isClickable;
        /** Font size in px for the icon. */
        private _size;
        private static ICONS;
        static $inject: string[];
        /**
         * Constructor.
         *
         * @param $element The component element.
         * @param $attrs The attributes specified in the directive.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, $attrs: ng.IAttributes);
        /**
         * Configure the click listener on the current icon. When the icon is disabled, the click event is stopped.
         */
        configureClickListener(): void;
        /**
         * Get the current icon name.
         * @returns {string} Returns the current icon name if it is among the available icons, undefined otherwise.
         * */
        /**
         * Set the current icon name.
         * @param value {string} The name of the current icon among the available icons.
         */
        name: string;
        /**
         * Get the current icon name.
         * @returns {string} Returns the current icon name if it is among the available icons, undefined otherwise.
         */
        /**
         * Set the current icon name.
         * @param value {string} The name of the current icon among the available icons.
         */
        size: number;
    }
}


/**
 * @ngdoc directive
 * @name ersLabel
 * @restrict E
 * @module ers.components.label
 * @scope
 *
 * @description
 * Use the `ers-label` component to create custom text labels for use inside of forms.
 *
 * - In areas where long text should be hidden instead of wrapping.
 * - To denote something that is required.
 * - Hovering over the ellipses displays a browser tooltip containing the missing text.
 *
 * ### Usage
 * The label component provides the following options:
 *
 * - Ellipses to indicate a hidden text string.
 * - Browser tool tips that activate on mouse over to display the entire label text.
 * - A red asterisk to indicate required fields.
 *
 * ### Examples
 *
 * <code-editor identifier="example1" data-title="Labels" html-content-url="demos/ersLabel/basicUsage/index.html"
 * js-content-url="demos/ersLabel/basicUsage/script.js" css-content-url="demos/ersLabel/basicUsage/styles.css"
 * content-mode="html"></code-editor>
 *
 * ### Design Guidelines
 *
 * - Use labels form elements to explain to the user what values are expected when filling out a form.
 * - Make the explanations short (1-3 word) descriptions of the input.
 * - You can apply standard HTML and CSS formatting and styles to the label.
 *
 * ### Accessibility Guidelines
 *
 * No accessibility guidelines.
 *
 * @param {string} [value] {@}
 *
 * Defines the label text.
 *
 * ```xml
 *
 * <ers-label value="Hello World!"></ers-label>
 *
 * ```
 *
 * @param {boolean} [ng-required=false] {=}
 *
 * Marks the input as required. This adds the red asterisk(*) to the combo box list item.
 *
 * ```xml
 *
 * <ers-label ng-required="true" value="Birth Date:"></ers-label>
 *
 * ```
 *
 * @param {expression} [ng-change="expression"] {=?}
 *
 * Evaluates the label for user input changes and notifies scope immediately upon change, unlike the JavaScript
 * onChange event, which only notifies at the completion of a change.
 *
 *
 *
 *
 *
 */
declare module ers.components.label {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * The label controller.
     */
    class LabelComponent extends BaseComponent {
        /**
         *
         * The label value.
         *
         */
        value: string;
        /**
         * (Optional)
         * Used to specify whether a label must be flagged 'required' (true), or not (false).
         * The expected values are true or false. The default value is false.
         *
         */
        required: boolean;
        static $inject: string[];
        /**
         * Constructor.
         *
         * @param $element The component element.
         */
        constructor($scope: ng.IScope, $element?: ng.IAugmentedJQuery);
        contentStyle: Object;
    }
}


declare module ers.components.layout {
    /**
     * Interface to define layout state
     */
    interface IStateController {
        /**
         * Set state to processing.
         */
        beginProcessing: () => void;
        /**
         * Set state to idle.
         */
        endProcessing: () => void;
        /**
         * Use to notify when something is loaded.
         */
        notifyLoaded: () => void;
    }
}

declare module ers.components.layout {
    /**
     * Interface to define position.
     */
    interface IPosition {
        x: number;
        y: number;
    }
    /**
     * Interface to describe simple size (width, height)
     */
    interface IRect {
        width: number;
        height: number;
        top: number;
        left: number;
    }
    /**
     * Interface to describe layout event resize.
     */
    interface IResizeEvent {
        /** The element from which the resize start. */
        source: JQuery;
        /** The property impacted by the resize*/
        property: string;
        /** The value with the unity (% or px) relative to the resize. */
        value: string;
    }
    /**
     * Interface to define size and available size in a layout.
     */
    interface ILayoutRect extends IRect {
        wAvailable: number;
        hAvailable: number;
    }
    /**
     * Interface to define resizable Object
     */
    interface IResizableController extends IStateController {
        /**
         * Return information concerning size
         */
        getLayoutClientRect: () => IRect;
        /**
         * Set information concerning size.
         */
        setLayoutClientRect: () => void;
    }
}


declare module ers.components.layout {
    /**
     * Describe API for draggable object.
     */
    interface IDraggable {
        /**
         * triggered when button mouse is down.
         * @param event mouse event
         */
        onMouseDown: (event: JQueryEventObject) => void;
        /**
         * Triggered when button mouse is up.
         * @param event mouse event
         */
        onMouseUp: (event: JQueryEventObject) => void;
        /**
         * Triggered when mouse moves.
         * @param event mouse event
         */
        onMouseMove: (event: JQueryEventObject) => void;
    }
}


declare module ers.components.layout {
    /**
     * Describe splitter Proxy API
     */
    interface IProxy {
    }
    /**
     * Describe API for Splitter component
     */
    interface ISplitterComponent extends IDraggable, IProxy {
        /**
         * Trigger to call when resized is done.
         */
        callTriggerResizeEvent: () => void;
    }
}

declare module ers.components.layout {
    /**
     * Describe API for checking constraints on splitter actions.
     */
    interface IOrientedSplitter extends ISplitter {
        /**
         * Quantity of move depending on splitter direction.
         * @param event mouse event
         */
        quantity: (event: JQueryEventObject) => number;
        /**
         * Update Mouse position depending on splitter direction.
         * @param event mouse event
         */
        refreshMousePos: (event: JQueryEventObject) => void;
        /**
         * The ability to move splitter dependin on mouse direction.
         * @param event mouse event
         */
        checkMoveConstraints: (event: JQueryEventObject) => boolean;
        /**
         * Reisze neighbour splitter's element (layout wrapper).
         * @param event mouse event
         * @param quantity quantity ofmove.
         */
        resize: (event: JQueryEventObject, quantity: number) => void;
        /**
         * Give thesplitter width/height depending on splitter direction.
         */
        getSplitterSize: () => number;
        /**
         * Return splitter position.
         * @param splitter splitter DOM 's element.
         */
        getSplitterPosition: () => number;
        /**
         *  Set splitter position.
         * @param value position (px)
         */
        setSplitterPosition: (value: number) => void;
        /**
         * Appropriate css style for an vertical/horizontal splitter.
         * @returns {string} the CSS class name for the  splitter.
         */
        splitterStyle: () => string;
    }
}


declare module ers.components.layout {
    /**
     * Describe API for delegated draggable object
     */
    interface IDraggableDelegate {
        /** Delegate's splitter DOM element. */
        element: ng.IAugmentedJQuery;
        /**
         * Action to do when button mouse is up.
         * @param event mouse event
         */
        doMouseDown: (event: JQueryEventObject) => void;
        /**
         * Action to do when button mouse is down.
         * @param event mouse event
         */
        doMouseUp: (event: JQueryEventObject) => void;
        /**
         * Action to do when button mouse moves.
         * @param event mouse event
         */
        doMouseMove: (event: JQueryEventObject) => void;
        /**
         * Name to identify kind of draggable
         */
        name: () => string;
    }
}


declare module ers.components.layout {
    /**
     * Describe API for splitter delegate
     */
    interface ISplitterDelegate extends IDraggableDelegate {
        /** Splitter object. */
        splitter: IOrientedSplitter;
        /** Specific threshold for collapse */
        sensibility: number;
    }
}


declare module ers.components.layout {
    /**
     * Describe Splitter interface (basics mechanisms).
     */
    interface ISplitter extends IDraggable, IStateController {
        /** Handler to the direct previous DOM element. */
        prev: ng.IAugmentedJQuery;
        /** Handler to the direct next DOM element. */
        next: ng.IAugmentedJQuery;
        /** Handler to the splitter DOM element. */
        element: ng.IAugmentedJQuery;
        /** The Object which manages the splitter behavior. */
        delegate: ISplitterDelegate;
        /** Handler to the concrete splitter component. */
        controller: ISplitterComponent;
        /**
         * Set the parent container (i.e. layout controller).
         * @param parent the parent container
         */
        setParentContainer: (parent: IResizableController) => void;
        switchFlexbox: (element: ng.IAugmentedJQuery) => void;
        switchFixed: (element: ng.IAugmentedJQuery) => void;
    }
}

declare module ers.components.layout {
    /**
     * Describe API for a Collapsible controller
     */
    interface ICollapsibleController {
        /** The collapse mode. */
        ersCollapse: string;
    }
    /**
     * Describe API for helper (layout context).
     */
    interface IHelper {
    }
    /**
     * Describe API for a collapsible object
     */
    interface ICollapsible extends ISplitter {
        /** Object to manage common collapsible behavior. */
        helper: IHelper;
        /** Size of a collapsed element. */
        collapsedSize: number;
        /**
         * Check if splitter reach a limit.
         * @param event mouseevent
         * @param quantity quantity of move (px)
         * @param sensibility limit
         */
        checkResize: (event: JQueryEventObject, quantity: number) => void;
        /**
         * Expand a wrapper element (layout)
         * @param event mouse event
         * @param needResize need action to compute size
         */
        doExpand: (event: JQueryEventObject, needResize?: boolean) => void;
        /**
         * Expand automatically the collapsed wrapper element.
         * @param event mouse event
         */
        doExpandAuto: (event: JQueryEventObject) => void;
        /**
         * Collpase a wrapper element (layout)
         * @param event mouse event
         * @param needResize need action to compute size
         */
        doCollapse: (event: JQueryEventObject, needResize?: boolean) => void;
    }
}


declare module ers.components.layout {
}

declare module ers.components.layout {
    var layoutUtils: {
        getRawStyle: (element: HTMLElement, property: string) => string;
        isPercentBasis: (element: HTMLElement, property: string) => boolean;
        rawStyle2Number: (element: HTMLElement, property: string) => number;
        css2Number: (element: HTMLElement, property: string, exp?: RegExp) => number;
        cssPixel2Number: (element: HTMLElement, property: string) => number;
        cssPercent2Number: (element: HTMLElement, property: string) => number;
        attr2Number: (element: JQuery, attr: string) => number;
        switchClass: (element: JQuery, oldClass: string, newClass: string) => void;
        getLayoutController: (element: ng.IAugmentedJQuery) => LayoutComponent;
        isLayoutElement(element: HTMLElement): boolean;
    };
}


declare module ers.components.layout {
    /**
     * Splitter Scope interface.
     */
    interface ISplitterScope extends ng.IScope {
        direction: string;
        ersResize: string;
        ersCollapse: string;
    }
    /**
     * Layout scope interface.
     */
    interface ILayoutScope extends ISplitterScope {
    }
}


declare module ers.components.layout {
    /**
     * Constants static class. Store all shared constants for the module.
     * @class
     */
    class Constants {
        static DIRECTION_HORIZONTAL: string;
        static DIRECTION_VERTICAL: string;
        static COLLAPSIBLE_DEFAULT_SIZE: number;
        static SPLITTER_DEFAULT_SIZE: number;
        static ON_COLLAPSE_LEFT: string;
        static ON_COLLAPSE_RIGHT: string;
        static ON_COLLAPSE_TOP: string;
        static ON_COLLAPSE_BOTTOM: string;
        static ON_COLLAPSE_BOTH: string;
        static ON_COLLAPSE_REACH_MIN: string;
        static DIRECT_SPLITTER: string;
        static PROXY_SPLITTER: string;
        static NO_SPLITTER: string;
        static NONE: string;
    }
    interface IProperty {
        element: JQuery;
        property: string;
        value: number;
    }
    interface IWrapperStyle {
        property: string;
        offsetProperty: string;
        maxProperty: string;
        minProperty: string;
        maxAvailable: string;
        sticky: string;
        reachMin: string;
        fixed: string;
        maxStore: string;
    }
    var wStyle: IWrapperStyle;
    var hStyle: IWrapperStyle;
}


declare module ers.components.layout {
    class SplitterProxy implements ISplitterDelegate {
        private offsetQuantity;
        splitter: IOrientedSplitter;
        element: ng.IAugmentedJQuery;
        sensibility: number;
        constructor(splitter: ISplitter);
        doMouseDown(event: JQueryEventObject): void;
        doMouseUp(event: JQueryEventObject): void;
        doMouseMove(event: JQueryEventObject): void;
        protected reset(): void;
        protected updateSplitterPosition(value: number): void;
        name(): string;
    }
}


declare module ers.components.layout {
    class SplitterDirect implements ISplitterDelegate {
        splitter: IOrientedSplitter;
        element: ng.IAugmentedJQuery;
        sensibility: number;
        constructor(splitter: ISplitter);
        doMouseDown(event: JQueryEventObject): void;
        doMouseUp(event: JQueryEventObject, trigger?: Function): void;
        doMouseMove(event: JQueryEventObject): void;
        name(): string;
    }
}

declare module ers.components.layout {
    class SplitterDelegate implements ISplitter, IConfigurable {
        private static FLEX_FIXED_STYLE;
        protected static CSS_FILTER: string;
        mousePos: IPosition;
        delegate: ISplitterDelegate;
        draggable: ng.IAugmentedJQuery;
        element: ng.IAugmentedJQuery;
        protected parentContainer: IResizableController;
        constructor(element: ng.IAugmentedJQuery, $timeout: ng.ITimeoutService, proxy?: boolean);
        configureElements($timeout: ng.ITimeoutService, proxy: boolean): void;
        beginProcessing(): void;
        endProcessing(): void;
        notifyLoaded(): void;
        onMouseDown(event: JQueryEventObject): void;
        onMouseUp(event: JQueryEventObject, trigger?: Function): void;
        onMouseMove(event: JQueryEventObject, trigger?: Function): void;
        setParentContainer(parent: IResizableController): void;
        controller: ISplitterComponent;
        prev: ng.IAugmentedJQuery;
        next: ng.IAugmentedJQuery;
        switchFlexbox(element: ng.IAugmentedJQuery): void;
        switchFixed(element: ng.IAugmentedJQuery): void;
    }
}


declare module ers.components.layout {
    /**
     * Describe API for configurable object.
     */
    interface IConfigurable {
        /**
         * Configure.
         * @param $timeout angular service to defer loaded DOM
         * @param proxy splitter option
         */
        configureElements: ($timeout: ng.ITimeoutService, proxy?: boolean) => void;
    }
}

declare module ers.components.layout {
    class HorizontalSplitterDelegate extends SplitterDelegate implements IOrientedSplitter, IConfigurable {
        private static HORIZONTAL_SPLITTER_STYLE;
        private static HORIZONTAL_PROXY_SPLITTER_STYLE;
        constructor(element: ng.IAugmentedJQuery, $timeout: ng.ITimeoutService, useProxy?: boolean);
        configureElements($timeout: ng.ITimeoutService, proxy: boolean): void;
        checkMoveConstraints(event: JQueryEventObject): boolean;
        resize(event: JQueryEventObject, quantity: number): void;
        quantity(event: JQueryEventObject): number;
        refreshMousePos(event: JQueryEventObject): void;
        getSplitterSize(): number;
        getSplitterPosition(): number;
        setSplitterPosition(value: number): void;
        splitterStyle(): string;
    }
}

declare module ers.components.layout {
    import BaseController = ers.components.core.BaseController;
    /**
     * Basic controller to store and retrieve summary link toan element.
     */
    class LayoutSummary extends BaseController {
        text: string;
        static $inject: string[];
        constructor($scope?: ng.IScope, $element?: ng.IAugmentedJQuery, $attrs?: ng.IAttributes);
        link(): void;
    }
}

declare module ers.components.layout {
    class LayoutHelper implements IHelper {
        private static COLLAPSE_STATE;
        private static EXPAND_STATE;
        state: number;
        protected delegate: ICollapsible;
        collapsedLayoutSize: number;
        collapsed: ng.IAugmentedJQuery;
        expanded: ng.IAugmentedJQuery;
        constructor(delegate: ICollapsible);
        appendCollapse(element: ng.IAugmentedJQuery): void;
        setCallback(button: ng.IAugmentedJQuery, collapsed: ng.IAugmentedJQuery, displayed: ng.IAugmentedJQuery): void;
        protected onButtonClick(event: JQueryEventObject, collapsed: ng.IAugmentedJQuery, expanded: ng.IAugmentedJQuery): void;
        forceExpand(event: JQueryEventObject, collapsed: ng.IAugmentedJQuery, expanded: ng.IAugmentedJQuery, compute?: boolean): void;
        forceCollapse(event: JQueryEventObject, collapsed: ng.IAugmentedJQuery, expanded: ng.IAugmentedJQuery, compute?: boolean): void;
        getSummary(): string;
        protected addState(): void;
        protected removeState(): void;
        private toggleState(state?);
        isPrevCollapsed(): boolean;
        isNextCollapsed(): boolean;
        isCollapsedLayout(layout: ng.IAugmentedJQuery): boolean;
        isCollapsed(): boolean;
    }
}

declare module ers.components.layout {
    class HorizontalCollapsibleDelegate extends HorizontalSplitterDelegate implements IConfigurable, ICollapsible {
        private static HORIZONTAL_COLLAPSE_STYLE;
        private static LEFT_COLLAPSED_STYLE;
        private static RIGHT_COLLAPSED_STYLE;
        private static COLLAPSED_TEXT_STYLE;
        collapsedSize: number;
        helper: LayoutHelper;
        constructor(element: ng.IAugmentedJQuery, $timeout: ng.ITimeoutService, useProxy?: boolean);
        configureElements($timeout: ng.ITimeoutService, proxy: boolean): void;
        private buildSplittersOptions(options);
        protected buildCollapse(options: string): void;
        doCollapse(event: JQueryEventObject, needResize?: boolean): void;
        doExpand(event: JQueryEventObject, needResize?: boolean): void;
        doExpandAuto(event: JQueryEventObject): void;
        checkResize(event: JQueryEventObject, quantity: number): boolean;
        resize(event: JQueryEventObject, quantity: number): void;
        protected getSplitterDelegateFrom(from: JQuery): HorizontalCollapsibleDelegate;
        protected nextExpandOnMove(event: JQueryEventObject): void;
        protected prevExpandOnMove(event: JQueryEventObject): void;
        protected computeExpanded(): void;
        protected computeCollapsed(): void;
        protected collapsedNode(show: boolean): void;
        protected computeCollapsedStyles(): void;
        protected computeExpandedStyles(): void;
        private prepareCollapseNode(collapsed);
        private buildSummary(collapsed, content);
    }
}


declare module ers.components.layout {
    class VerticalSplitterDelegate extends SplitterDelegate implements IOrientedSplitter, IConfigurable {
        private static VERTICAL_SPLITTER_STYLE;
        private static VERTICAL_PROXY_SPLITTER_STYLE;
        constructor(element: ng.IAugmentedJQuery, $timeout: ng.ITimeoutService, useProxy?: boolean);
        configureElements($timeout: ng.ITimeoutService, proxy: boolean): void;
        checkMoveConstraints(event: JQueryEventObject): boolean;
        resize(event: JQueryEventObject, quantity: number): void;
        quantity(event: JQueryEventObject): number;
        refreshMousePos(event: JQueryEventObject): void;
        getSplitterSize(): number;
        getSplitterPosition(): number;
        setSplitterPosition(value: number): void;
        splitterStyle(): string;
    }
}

declare module ers.components.layout {
    class VerticalCollapsibleDelegate extends VerticalSplitterDelegate implements IConfigurable, ICollapsible {
        /** Horizontal splitter CSS definition */
        private static VERTICAL_COLLAPSE_STYLE;
        private static UP_COLLAPSED_STYLE;
        private static DOWN_COLLAPSED_STYLE;
        private static VERTICAL_COLLAPSE_TEXT_STYLE;
        collapsedSize: number;
        helper: LayoutHelper;
        constructor(element: ng.IAugmentedJQuery, $timeout: ng.ITimeoutService, useProxy?: boolean);
        configureElements($timeout: ng.ITimeoutService, proxy: boolean): void;
        private buildSplittersOptions(options);
        protected buildCollapse(options: string): void;
        doCollapse(event: JQueryEventObject, needResize?: boolean): void;
        doExpand(event: JQueryEventObject, needResize?: boolean): void;
        doExpandAuto(event: JQueryEventObject): void;
        checkResize(event: JQueryEventObject, quantity: number): void;
        resize(event: JQueryEventObject, quantity: number): void;
        protected getSplitterDelegateFrom(from: JQuery): HorizontalCollapsibleDelegate;
        protected nextExpandOnMove(event: JQueryEventObject): void;
        protected prevExpandOnMove(event: JQueryEventObject): void;
        protected computeExpanded(): void;
        protected computeCollapsed(): void;
        protected collapsedNode(show: boolean): void;
        protected computeCollapsedStyles(): void;
        protected computeExpandedStyles(): void;
        private prepareCollapseNode(collapsed);
        private buildSummary(collapsed, content);
    }
}

declare module ers.components.layout {
    class DelegateFactory {
        static buildDelegate(element: ng.IAugmentedJQuery, direction: string, resize: string, collapse: string, $timeout: ng.ITimeoutService): IOrientedSplitter;
    }
}

declare module ers.components.layout {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * SplitterComponent class
     * @class
     */
    class SplitterComponent extends BaseComponent implements ISplitterComponent, ICollapsibleController {
        /** The direction of the splitter, horizontal or vertical. */
        direction: string;
        /** The ability to collapse or expand neighboring containers. */
        collapsible: string;
        /** The ability to define kind of splitter. */
        ersResize: string;
        /** The ability to collapse the splitter neighbour elements. */
        ersCollapse: string;
        /** The DOM document Angular service.*/
        private document;
        /** manage splitter behavior. */
        delegate: IOrientedSplitter;
        /** Event resize callback. */
        private _onResize;
        /**
         * External resources that can inject into the controller.
         * @type {string[]}
         */
        static $inject: string[];
        /**
         * @constructor
         * @param $scope The isolate scope
         * @param $element The directive DOM representation.
         * @param $document The DOM document Angular service.
         * @param $compile The directive compilation Angular service.
         */
        constructor($scope: ISplitterScope, $element: ng.IAugmentedJQuery, $attributes: ng.IAttributes, $document: ng.IDocumentService, $timeout: ng.ITimeoutService);
        buildSplitter(): void;
        protected addListeners(): void;
        onMouseDown(event: JQueryEventObject): void;
        onMouseUp(event: JQueryEventObject): void;
        onMouseMove(event: JQueryEventObject): void;
        callTriggerResizeEvent(): void;
        onResize(listener: Function): void;
    }
}

declare module ers.components.layout {
    import IAngularEvent = ng.IAngularEvent;
    import IContainerEventService = ers.components.core.service.IContainerEventService;
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * LayoutComponent class
     * @class
     */
    class LayoutComponent extends BaseComponent implements IStateController, IResizableController, ICollapsibleController {
        private static TRANSCLUDE_DIR;
        private static CSS_NAME_CLASS;
        private $promise;
        private $compile;
        private containerEventService;
        private divContainer;
        private waitingQueued;
        private layoutClientRect;
        private loaded;
        /** Directive attribute to specify the layout direction */
        direction: string;
        /** the gap between 2 direct children of the layout. Non effective if ersResize or ersCollapse. */
        gap: number;
        /** Directive attribute to specify if the layout has splitters and the type of these splitters */
        ersResize: string;
        /** Directive attribute to specify if the layout is collapsible or not. */
        ersCollapse: string;
        /**
         * List of resources to inject into the controller by Angular
         * @type {string[]}
         */
        static $inject: string[];
        /**
         * @constrcutor
         * @param $scope The isolate scope
         * @param $element The DOM element directive
         * @param $compile Angular service for compiling utility
         * @param containerEventService event resize manager
         */
        constructor($scope: ILayoutScope, $element: ng.IAugmentedJQuery, $attributes: ng.IAttributes, $q: ng.IQService, $compile: ng.ICompileService, $timeout: ng.ITimeoutService, containerEventService: IContainerEventService);
        /**
         * Resize closest parent container.
         * @param $event resize event
         * @param data new data size
         */
        resizeTarget($event: IAngularEvent, data: IResizeEvent): void;
        private setObservers();
        /**
         * @function Angular link procedure. Add DOM elements depending on options set.
         * @param $scope the isolate scope
         * @param $element the directive 's DOM element
         * @param $attributes the attribute of the directive
         */
        link($scope: ng.IScope, $element: ng.IAugmentedJQuery, $attributes: ng.IAttributes): void;
        getLayoutClientRect(): ILayoutRect;
        setLayoutClientRect(): void;
        notifyLoaded(): void;
        private checkLoaded();
        beginProcessing(): void;
        endProcessing(): void;
        private checkLayoutContent();
        private checkContent(style);
        private propertyDirection(property);
        private adaptWrapperPercentage(selector);
        splitterMoved(): void;
        private onResize();
        protected buildWrappers(): void;
        protected buildGap(): void;
        protected wrapChildrenRec(element: JQuery): void;
        protected parseElement(element: JQuery): void;
        private setWrapperStyle(wrapper, element, style);
        protected buildSplitters(): void;
        private resetSplitters();
        private buildSplitterDirective();
    }
}


declare module ers.components.layout {
}


declare module ers.components.layout {
}


declare module ers.components.login {
    /**
     *
     * Error login logging and user notification.
     *
     *
     *
     */
    interface ILoginError {
        /**
         *  Login attempt failure message.
         */
        message: string;
        /**
         * True if there is a credential error.
         */
        credentialsError: boolean;
    }
}


declare module ers.components.login {
    /**
     * ILoginInfo Interface
     *
     * Transmits user information during login.
     */
    interface ILoginInfo {
        /**
         * The user name.
         */
        username: string;
        /**
         * The user password.
         */
        password: string;
        /**
         * The database.
         */
        database: string;
    }
}


/**
 * The [[LoginDirective]] data scope.
 */
declare module ers.components.login {
    interface ILoginScope extends ng.IScope {
        /** Name of the product where the login UI displays.*/
        productName: string;
        /** True if login credentials must be retrieved. */
        isRetrieveCredentials: boolean;
        /** True if login must display several databases. */
        isMultiBase: boolean;
        /** Database array code.*/
        databases: string[];
        /**
         *  The onLogin callback function during a login:
         *
         *   - Allows a callback function to be called on the login click.
         *
         *   - Must return a promise. Where errors occur during login, the promise must be rejected with
         *  ILoginError as argument.
         *
         *  ```xml
         *  promise.reject({credentialsError: true, message: "Bad Password or Username"})
         *  ```
         *  - Requires this signature,
         *  ```typescript
         *   functionName(loginInfo:ILoginInfo):ng.IPromise<Object>  {
         *   }
         *   ```
         *   - Must have an attribute tag the same as the following example, especially the `(loginInfo)`)
         *  ```xml
         *  <ers-login on-login="myCtrl.verifyLoginInfo(loginInfo)"></ers-login>
         *  ```
         */
        onLogin: Function;
    }
}






/**
 *
 * ERS Angular Controller: ModalController.
 */
declare module ers.components.modal {
    import BaseController = ers.components.core.BaseController;
    import IModalServiceInstance = ng.ui.bootstrap.IModalServiceInstance;
    /**
     *
     *  This controller associated to the modal-template and can be used inside of
     *  another controller. It is the base controller used by the modal
     *  service, not the modal directive. A specific controller is not required to open the modal
     *  and display the template. This controller allows you to pass and return values, as described in
     *  modalVariables, and manages the standard before and on-close events.
     *
     *  More specific operations on resolved variables, or specific before and on-close actions, can be inherited
     *  from this controller.
     *
     *
     *
     *  The following are the methods available:
     *
     * ### Available Methods
     *
     * [compareNewPasswords](#comparenewpasswords), [callChangePasswordCallback](#callchangepasswordcallback),
     * [onCloseModal](#onclosemodal), [formIsValid](#formisvalid) , [disableAllButtons](#disableAllButtons)
     */
    class ModalController extends BaseController {
        /**
         * The ui.bootstrap modal instance.
         */
        uibModalInstance: IModalServiceInstance;
        /**
         * The modal HTML content template.
         */
        instanceTemplate: string;
        /**
         * The function triggered when the modal closes.
         */
        onModalClose: Function;
        /**
         * The function triggered when the modal is dismissed.
         */
        onModalDismiss: Function;
        /**
         * The function called before the modal is dismissed with the Cancel button. Instances where this could be used
         * might rejecting a license agreement.
         * When the onModalDismiss function is not called, use onBeforeModalDismiss to
         * call or not the onModalDismiss function.
         */
        onBeforeModalClose: Function;
        /**
         * The function called before the modal is closed using the OK button. Instances where this could be used might
         * be verifying a form with the OK button as you are closing the modal.
         * When the onModalClose function is not called, use onBeforeModalClose to
         * call or not the onModalClose function.
         */
        onBeforeModalDismiss: Function;
        /**
         * Used to display a simple message in the popup.
         */
        message: string;
        /**
         * The optional size of modal window. The allowed values are 'sm' (small) or 'lg' (large).
         */
        size: string;
        /**
         * The modal title.
         */
        title: string;
        /**
         * The name of the title icon.
         */
        icon: string;
        /**
         * The modal buttons.
         * An array of IChoice buttons bound in the modal template to create the buttons.
         */
        buttons: IChoice[];
        /**
         *
         * The 'not null' value of the field names is checked
         * to determine if the main modal template form is valid or invalid. In the
         * ModalController, the formIsValid function considers these fields and whether or not
         * the modal submit type button is disabled or not. If this function returns false, the submit
         * type button is disabled.
         */
        nullFieldsCheckedForFormValidity: string[];
        /**
         * True if the cross button at the top right, is visible.
         */
        dismissCrossButtonVisible: boolean;
        /**
         * True if the dialog is draggable.
         */
        private _draggable;
        /**
         * True if the dialog is resizable.
         */
        private _resizable;
        /**
         * True if the dialog is modal, false if modeless.
         */
        private _modal;
        /**
         * The dialog ID.
         */
        id: string;
        /**
         * The selector path that sets the focus when the popup is open. This corresponds to the path
         * of an element in the modal form. When setting the path, do not start the path with '$' selector, !, ex, :,
         * or ers-radio-group[name='sample.groupName']:.
         */
        focusPath: string;
        /**
         * The functional variables resolved and injected from the caller.
         */
        protected _modalVariables: Object;
        static $inject: string[];
        /**
         * @constructor
         * @param $scope The scope.
         * @param $modal The ui.bootstrap Modal Service.
         * @param $uibModalInstance The ui.bootstrap modal instance.
         * @param options The modal options used to configure the modal.
         * @param modalVariables The variables(properties) to be used by the modal content.
         * These properties can be retrieved in both the main and functional modal templates by using{{ctrl.propertyName}},
         * or by using {{ctrl.modalVariables.propertyName}}
         */
        constructor($scope: ng.IScope, $uibModalInstance: IModalServiceInstance, options: IModalInstanceOptions, modalVariables: Object);
        /**
         * @return True if the dialog is draggable.
         */
        draggable: boolean;
        /**
         * @return True if the dialog is resizable.
         */
        resizable: boolean;
        /**
         * @return True if the dialog is modal, false if the dialog is modeless.
         */
        modal: boolean;
        /**
         * Manage the the button keypress events.
         * @param event The key event.
         */
        buttonEnter(event: Event): void;
        /**
         * Get the 'click' button value.
         * @param $event The click event.
         * @return {Object} The button value.
         */
        private getButtonValue($event);
        /**
         *  Compute the return values for the close or dismiss.
         * @return {Object} the return values object.
         */
        private getReturnValues();
        /**
         *  Call the before close functions and/or close the modal instance.
         *  The onModalClose is executed at the close of the promise (see the service).
         *  @param $event the click event.
         */
        onCloseModal($event?: Event): void;
        /**
         * call the before dismiss functions and/or dismiss the modal instance.
         *  The onModalDismiss is executed in the close promise (see the service).
         *  @param $event the click event.
         */
        public: any;
        onDismissModal($event?: Event): void;
        /**
         * Close the modal instance and trigger the result promise (closed).
         * @param closeModalResult result used by the result promise.
         */
        closeModal(closeModalResult: Object): void;
        /**
         * Destroy all the injected properties and the modal instance.
         */
        private destroy();
        /**
         *
         * Dismiss the modal instance and trigger the result promise (rejected).
         * @param pResult result used by the result promise.
         */
        dismissModal(pResult: Object): void;
        /**
         * Form validity test.
         * @return {boolean} true if the modal content form (in the urlTemplate modal type, not the message modal type)
         * is valid.
         */
        formIsValid(): boolean;
        /**
         * Form validity test.
         * @return {boolean} true if the modal content form (in the urlTemplate modal type, not the message modal type)
         * is valid.
         */
        disableAllButtons(): boolean;
        /**
         * modalVariables getter.
         * @return {Object} the functionnal variables resolved and injected from the caller.
         */
        modalVariables: Object;
    }
}


declare module ers.components.modal {
    /**
     * The IChoice interface is used to generate confirmation and question buttons in the modal sheet.
     */
    interface IChoice {
        /**
         *  The label associated to the choice.
         */
        label: string;
        /**
         *  The choice ID.
         */
        id: string;
        /**
         * The string used to generate the button CSS class.
         */
        cssClass?: string;
        /**
         * The ers-icon.
         */
        icon?: string;
        /**
         * The value associated to the choice.
         */
        value?: Object;
        /**
         *  True if the choice is 'escape', or 'cancel the action', which dismisses the dialog.
         */
        escapeChoice?: boolean;
        /**
         * True if it is the default choice. The default choice is automatically selected.
         */
        defaultChoice?: boolean;
        /**
         * True if the choice is to commit an action. For example,  to 'update' or 'confirm'.
         */
        commitChoice?: boolean;
    }
}


declare module ers.components.modal {
    /**
     * IModalInstanceOptions interface used to configure a modal popup.
     */
    interface IModalInstanceOptions {
        /**
         * The modal title.
         */
        title?: string;
        /**
         * The optional size of modal window. The allowed values are 'sm' (small) or 'lg' (large).
         */
        size?: string;
        /** modal icon to display */
        icon?: string;
        /**
         * Additional CSS class or classes to be added to the modal window template.
         */
        windowClass?: string;
        /**
         * The modal buttons.
         */
        buttons: IChoice[];
        /**
         * The 'not null' value of the field names is checked
         * to determine if the main modal template form is valid or invalid. In the
         * ModalController, the formIsValid function considers these fields and whether or not
         * the modal submit type button is disabled or not. If this function returns false, the submit
         * type button is disabled.
         *
         */
        nullFieldsCheckedForFormValidity?: string[];
        /**
         * True if the cross button at the top right, is visible.
         */
        dismissCrossButtonVisible?: boolean;
        /**
         * Used to display a simple message in the popup.
         */
        message?: string;
        /**
         * The HTML template containing the modal content.
         */
        instanceTemplate?: string;
        /**
         * The controller used by the modal template and the modal content template.
         */
        templateController?: Object;
        /**
         * The controllerAs used by the modal template and the modal content template.
         */
        templateControllerAs?: string;
        /**
         * Indicates whether or not the dialog can be dismissed using the ESC key. The default is true.
         */
        keyboard?: boolean;
        /**
         * The function called when the modal is dismissed with the Cancel key or 'x'.
         */
        onModalDismiss?: Function;
        /**
         * The function called when the modal is closed using the OK button.
         */
        onModalClose?: Function;
        /**
         * The function called when the modal is opened.
         */
        onModalOpen?: Function;
        /**
         * The function called before the modal is closed using the OK button. Instances where this could be used might
         * be verifying a form with the OK button as you are closing the modal.
         * When the onModalClose function is not called, use onBeforeModalClose to
         * call or not the onModalClose function.
         */
        onBeforeModalClose?: Function;
        /**
         * The function called before the modal is dismissed with the Cancel button. Instances where this could be used
         * might rejecting a license agreement.
         * When the onModalDismiss function is not called, use onBeforeModalDismiss to
         * call or not the onModalDismiss function.
         */
        onBeforeModalDismiss?: Function;
        /**
         * Set to true to create a draggable dialog.
         */
        draggable?: boolean;
        /**
         * Set to true to create a resizable dialog.
         */
        resizable?: boolean;
        /**
         * Set to true if the dialog is modal, set to false if the dialog is modeless.
         */
        modal?: boolean;
        /**
         * The modal dialog ID.
         */
        id?: string;
        /**
         * The selector path that sets the focus when the popup is open. This corresponds to the path
         * of an element in the modal form. When setting the path, do not start the path with '$' selector, !, ex, :,
         * or ers-radio-group[name='sample.groupName']:.
         */
        focusPath?: string;
        /**
         * The cancel button text.
         */
        cancelText?: string;
        /**
         * The ok button text.
         */
        okText?: string;
    }
}


declare module ers.components.core {
    interface IError {
        message: string;
    }
}

declare module ers.components.core {
    interface ICredentialError extends IError {
        credentialsError: boolean;
    }
}


declare module ers.components.passwordManagement {
    import ICredentialError = ers.components.core.ICredentialError;
    interface IChangePasswordError extends ICredentialError {
        newPasswordError: boolean;
    }
}

declare module ers.components.passwordManagement {
    import ILoginInfo = ers.components.login.ILoginInfo;
    interface IChangePasswordResult extends ILoginInfo {
        newPassword: string;
    }
}


declare module ers.components.passwordManagement {
    interface IChangePasswordResolvedVar {
        /**
         * the user name.
         */
        username: string;
        /**
         * the selected database.
         */
        database: string;
        /**
         *  The callback function following change password action.
         *
         *  It allows to verify, call a change password service for example, before close the modal.
         *
         *  This function is triggered when 1 - user click on update in the change password modal
         *
         *  This function MUST return a promise. If an error occurs during the change password check, this promise MUST be
         *  rejected with an IChangePasswordError as argument.
         *  (ex : promise.reject({credentialsError: credentialsError, message: message,
         *  newPasswordError: newPasswordError})).
         *
         *  The callback function must respect this signature:
         *  ```typescript
         *   functionName(credentials:IChangePasswordResult):ng.IPromise<Object>  {
         *   }
         *   ```
         *   and, the attribute tag must be the same as the below example in the login component (above all the `(credentials)`):
         *  ```xml
         *  <ers-login on-change-password="myCtrl.verifyNewPassword(credentials)"></ers-login>
         *  ```
         */
        changePassword: Function;
    }
}


declare module ers.components.passwordManagement {
    import IModalServiceInstance = ng.ui.bootstrap.IModalServiceInstance;
    import ModalController = ers.components.modal.ModalController;
    import IModalInstanceOptions = ers.components.modal.IModalInstanceOptions;
    /**
     * The controller associated to the password-management-template as a modal.
     *
     * When the password-management modal is open, the opener could pass a username and database information to the
     * modal using the modalVariables injected by the ModalService.
     *
     * By default, on the update click, the controller verifies that the new passwords are equal. If they are equal,
     * the controller call the [onChangePassword](#changepasswordfunction) callback function. On error,
     * the [changePasswordError](#changepassworderror) is updated, for no error,
     * the modal is closed.
     *
     *  passwordManagement supports the following methods:
     *
     * ### Available Methods
     *
     * * [compareNewPasswords](#comparenewpasswords), [callChangePasswordCallback](#callchangepasswordcallback),
     * [onCloseModal](#onclosemodal), [formIsValid](#formisvalid) , [disableAllButtons](#disableAllButtons)
     */
    class ChangePasswordModalController extends ModalController {
        /**
         * The selected database.
         */
        database: string;
        /**
         * The user name.
         */
        username: string;
        /**
         *  True if [username](#username) is pre-filled.
         */
        usernameInitialized: boolean;
        /**
         * The current password.
         */
        oldPassword: string;
        /**
         * The new password.
         */
        newPassword: string;
        /**
         * The new password confirmation.
         */
        confirmNewPassword: string;
        /**
         * True if the screen is 'computing' (calling the changePassword callback).
         * @type {boolean}
         */
        computing: boolean;
        /**
         *  The callback function allows the user to verify a changed password by calling the change password service.
         *  This is triggered when the user clicks update on the changePassword modal.
         *
         *  This function must return a promised. If an error occurs during the change password check, this promise must be
         *  rejected with IChangePasswordError, (promise.reject({credentialsError: credentialsError, message: message,
         *  newPasswordError: newPasswordError})).
         *
         *  The callback function must use this signature:
         *  ```typescript
         *   functionName(credentials:IChangePasswordResult):ng.IPromise<Object>  {
         *   }
         *   ```
         *   and, the attribute tag must be the same as the following example, especially the `(credentials).
         *
         *   ```xml
         *  <ers-login on-password-management="myCtrl.verifyNewPassword(credentials)"></ers-login>
         *  ```
         */
        onChangePassword: Function;
        /**
         * The change password failed error.
         *
         * As the controller does not manage the real change password process, if an error occurs after the
         * [onChangePassword](#onchangepassword)
         * callback,  it's the callback responsability  to update this error attribute to display the error
         * in the change password screen.
         */
        _changePasswordError: IChangePasswordError;
        static $inject: string[];
        /**
         * constructor
         * @param $scope the scope.
         * @param $modalInstance the modal instance.
         * @param options the injected ersModalService options for the change password modal
         * @param modalVariables the injected ersModalService specific variables for the change password modal.
         */
        constructor($scope: ng.IScope, $modalInstance: IModalServiceInstance, options: IModalInstanceOptions, modalVariables: IChangePasswordResolvedVar);
        /**
         *
         * @param pChangePasswordError
         */
        /**
         *
         * @param pChangePasswordError
         */
        changePasswordError: IChangePasswordError;
        /**
         * verify the new and confirmation password equality.
         * @return {boolean} true if the 2 passwords match.
         */
        compareNewPasswords(): boolean;
        /**
         * Call the change password callback and manage the error display.
         */
        callChangePasswordCallback(): void;
        /**
         * call the before/on close functions and close the modal instance.
         */
        onCloseModal(): void;
        /**
         * Form validity test.
         * @return {boolean} true if the chang password form is valid.
         */
        formIsValid(): boolean;
        /**
         * Form validity test.
         * @return {boolean} true if the modal content form (in the urlTemplate modal type, not the message modal type)
         * is valid.
         */
        disableAllButtons(): boolean;
    }
}

/**
 *
 * ERS Angular Service : ersModalService.
 */
declare module ers.components.modal {
    import IModalService = ng.ui.bootstrap.IModalService;
    import IModalServiceInstance = ng.ui.bootstrap.IModalServiceInstance;
    /**
     * @ngdoc service
     * @module ers.components.modal
     * @name ersModalService
     *
     * @description
     *
     * Use this service to create display dialogs with rich content (templates), simple messages, or
     * pre-configured content like help, information, confirmation, or error messages.
     *
     * ### Examples
     *
     * #### Information modal dialog
     *
     * <code-editor identifier="example1" data-title="Information dialog" html-content-url="demos/ersModal/basicUsage/index.html"
     * js-content-url="demos/ersModal/basicUsage/script.js" css-content-url="demos/ersModal/basicUsage/styles.css"
     * content-mode="html"></code-editor>
     *
     * #### Confirmation modal dialog
     *
     * <code-editor identifier="example2" data-title="Confirmation dialog" html-content-url="demos/ersModal/otherUsage/index.html"
     * js-content-url="demos/ersModal/otherUsage/script.js" css-content-url="demos/ersModal/otherUsage/styles.css"
     * content-mode="html"></code-editor>
     *
     * #### Custom modal dialog
     *
     * <code-editor identifier="example3" data-title="Custom dialog" html-content-url="demos/ersModal/customDialog/index.html"
     * js-content-url="demos/ersModal/customDialog/script.js" css-content-url="demos/ersModal/customDialog/styles.css"
     * content-mode="html"></code-editor>
     *
     * ### Design Guidelines
     *
     * No design guidelines
     *
     * ### Accessibility Guidelines
     *
     * No accessibility guidelines
     *
     *
     */
    class ModalService {
        /**
         * The UI-Bootstrap modal service.
         */
        uiBstpModalService: IModalService;
        /**
         * The number of the currently opened popup.
         */
        private popupOpened;
        /**
         * The current modal id incremented as popups are opened.
         */
        private currentId;
        /**
         * Injector.
         */
        static $inject: string[];
        /**
         * Constructor.
         *
         * @param $uibModal The UI-Bootstrap modal service.
         */
        constructor($uibModal: IModalService);
        /**
         * @ngdoc method
         * @name ersModalService#informationDialog
         *
         * @description
         *
         * Displays an ***Informational*** modal window with a message, an  OK button, and an "x" to dismiss the dialog.
         *
         * @param {string} title The modal title.
         * @param {string} message the information message.
         * @param {Function} onClose is the callback function triggered by clicking the 'ok' button.
         * This callback is the same
         * one that uses the modalInstance to return and manage the result promise.
         * If you specify this callback and at the same time manage the resolved state of the promise, the two
         * methods are executed.
         *
         * @return {ng.ui.bootstrap.IModalServiceInstance} Returns an open `modalInstance`. This is object with the
         * following properties:
         *
         * - **close** (result)&#151;The method used to pass a result and close the modal (window) with the OK button.
         *
         * - **dismiss** (reason)&#151;The method used to pass a reason and close the modal (window) with the 'x'.
         *
         * - **result**&#151;A promise that is *resolved* when the modal is "closed" (OK button) or *rejected*
         * (closed with the 'x'). In both cases, the modal is dismissed.
         *
         * - **opened**&#151;A promise that is resolved when a modal is opened after downloading the
         * content's template and resolving all of the variables.
         *
         *
         */
        informationDialog(title: string, message: string, onClose?: Function): IModalServiceInstance;
        /**
         * @ngdoc method
         * @name ersModalService#errorDialog
         *
         * @description
         *
         * Displays an ***Error*** modal window with a message, an  OK button, and an "x" to dismiss the dialog.
         *
         * @param {string} title the modal title.
         * @param {string} message the error message.
         * @param {Function} onClose is the callback function triggered by clicking the 'ok' button.
         * This callback is the same
         * one that uses the modalInstance to return and manage the result promise.
         * If you specify this callback and at the same time manage the resolved state of the promise, the two
         * methods are executed.
    
         *
         * @return {ng.ui.bootstrap.IModalServiceInstance} Returns an open `modalInstance`. This is object with the
         * following
         * properties:
         *
         * - **close** (result)&#151;The method used to pass a result and close the modal (window) with the OK button.
         *
         * - **dismiss** (reason)&#151;The method used to pass a reason and close the modal (window) with the 'x'.
         *
         * - **result**&#151;A promise that is *resolved* when the modal is "closed" (OK button) or *rejected*
         * when the modal is dismissed (closed with the 'x').
         *
         * - **opened**&#151;A promise that is resolved when a modal is opened after downloading the
         * content's template and resolving all of the variables.
         *
         *
         */
        errorDialog(title: string, message: string, choices?: IChoice[], onClose?: Function): IModalServiceInstance;
        /**
         * @ngdoc method
         * @name ersModalService#questionDialog
         *
         * @description
         *
         * Displays a ***Question*** modal window containing a message and multiple buttons. Each button returns a
         * unique value
         * when the modal closes. All buttons are 'close' buttons.
         *
         * @param {string} Sets the modal window title.
         * @param {string} Sets the question message.
         * @param {IChoice[]} Defines the buttons.
         * @param {Function} onClose is the callback function triggered by clicking the 'ok' button.
         * This callback is the same
         * one that uses the modalInstance to return and manage the result promise.
         * If you specify this callback and at the same time manage the resolved state of the promise, the two
         * methods are executed.
         *
         * @return {ng.ui.bootstrap.IModalServiceInstance} Returns an open `modalInstance`. This is object with the following
         * properties:
         *
         *
         * - **close** (result)&#151;The method used to pass a result and close the modal (window) with a button.
         *
         * - **dismiss** (reason)&#151;The method used to pass a reason and close the modal (window) with the 'x'.
         *
         * - **result**&#151;A promise that is *resolved* when the modal is "closed" (button) or *rejected*
         * when the modal is dismissed (closed with the 'x').
         *
         * - **opened**&#151;A promise that is resolved when a modal is opened after downloading the
         * content's template and resolving all variables.
         *
         */
        questionDialog(title: string, message: string, choices: IChoice[], onClose?: Function): IModalServiceInstance;
        /**
         * @ngdoc method
         * @name ersModalService#confirmationDialog
         *
         * @description
         *
         * Displays an ***Confirmation*** modal window consisting of a message and yes/no buttons. Each button returns
         * a value when the modal closes. All buttons are 'close' buttons.
         *
         * @param {string} title The modal title.
         * @param {string} message The confirmation message.
         * @param {Function} onClose The callback function triggered by the buttons click. This callback is the same than
         * use the modalInstance returned and manage the result promise. If you specify this callback and in the same time
         * you managed the resolved state of the result promise, the 2 methods will be executed.
         * @param {string} [yesValue='yes'] the 'yes' button value to be returned during the close.
         * @param {string} [noValue='no'] the 'no' button value to be returned during the close.
         *
         * @return {ng.ui.bootstrap.IModalServiceInstance} Returns an open `modalInstance`. This is object with the following
         * properties:
         *
         * - **close** (result)&#151;The method used to pass a result and close the modal (window) with a button.
         *
         * - **dismiss** (reason)&#151;The method used to pass a reason and close the modal (window) with the 'x'.
         *
         * - **result**&#151;A promise that is *resolved* when the modal is "closed" (button) or *rejected*
         * when the modal is dismissed (closed with the 'x').
         *
         * - **opened**&#151;A promise that is resolved when a modal is opened after downloading the
         * content's template and resolving all variables.
         *
         *
         *
         */
        confirmationDialog(title: string, message: string, onClose: Function, yesValue?: string, noValue?: string): IModalServiceInstance;
        /**
         * @ngdoc method
         * @name ersModalService#customDialog
         *
         * @description
         *
         * Displays a ***Custom*** modal window providing either a simple message or complex content
         * (html template). When passing variables with `customDialog`, a controller must exist
         * inheriting values from `ModaController`. The template must define the controller name as 'ctrl', allowing you
         * to override the `onBefore` close/dismiss methods and manage the form for the validity of the button status and
         * error messages.
         *
         *
         *
         * <!-- For this dialog type, if you use a template for the content and you want to pass variables from the calling
         * screen to the dialog, you must have a controller inheriting from `ModalController` and the controller name in
         * your template must be `ctrl`. this inherited controller allows you to overide the onBefore close/dismiss methods,
         * manage the form validity (for the buttons status and error messages), etc.//-->
         *
         * @param {IModalInstanceOptions} pModalOptions modal configuration options
         * @param {object} modalVariables variables to be used by the modal content. (all the non configuration variables).
         * These variables  will be resolved and passed to the controller as locals; it is equivalent of the resolve
         * property for AngularJS routes. In the controller associated to your template, you must inject modalVariables
         * to retrieve these variables.
         *
         * @return {ng.ui.bootstrap.IModalServiceInstance} Returns an open `modalInstance`. This is object with the following
         * properties:
         *
         * - **close** (result)&#151;The method used to pass a result and close the modal (window) with a button.
         *
         * - **dismiss** (reason)&#151;The method used to pass a reason and close the modal (window) with the 'x'.
         *
         * - **result**&#151;A promise that is *resolved* when the modal is "closed" (button) or *rejected*
         * when the modal is dismissed (closed with the 'x').
         *
         * - **opened**&#151;A promise that is resolved when a modal is opened after downloading the
         * content's template and resolving all variables.
         *
         *
         */
        customDialog(pModalOptions: IModalInstanceOptions, modalVariables?: {}): IModalServiceInstance;
        /**
         * @ngdoc method
         * @name ersModalService#openDialog
         *
         * @description
         *
         * Displays an ***Open*** a modal window allowing you to display either a simple or complex (html template)
         * message. When using `openDialog`, the variables are resolved and passed to the controller as local; the
         * equivalent of the Angular ***resolve*** property. In the controller associated with the template, you must inject
         * `modalVariables` to retrieve these variables.
         *
         *
         * @param {IModalInstanceOptions} pModalOptions Modal configuration options
         * @param {object} modalVariables Variables to be used by the modal content (all the non configuration variables).
         *
         * These variables  are resolved and passed to the controller as locals; it is equivalent of the resolve
         * property for AngularJS routes. In the controller associated to your template, you must inject modalVariables
         * to retrieve these variables.
         *
         * @param {string} pTemplateUrl A path to a template representing the modal's content. This is not the included
         * functional content (template or message) but the base UI of the modal (i.e. the main div/forms, buttons and basic
         * layout).
         *
         * @param {string} pTemplateControllerAs The `controllerAs` used by the modal template and the modal content
         * template.
         *
         * @return {ng.ui.bootstrap.IModalServiceInstance} Returns an open `modalInstance`. This is object with the following
         * properties:
         *
         * - **close** (result)&#151;The method used to pass a result and close the modal (window) with a button.
         *
         * - **dismiss** (reason)&#151;The method used to pass a reason and close the modal (window) with the 'x'.
         *
         * - **result**&#151;A promise that is *resolved* when the modal is "closed" (button) or *rejected*
         * when the modal is dismissed (closed with the 'x').
         *
         * - **opened**&#151;A promise that is resolved when a modal is opened after downloading the
         * content's template and resolving all variables.
         *
         */
        private openDialog(pModalOptions, modalVariables?, pTemplateUrl?, pTemplateControllerAs?);
    }
}


declare module ers.components.passwordManagement {
    import IModalServiceInstance = ng.ui.bootstrap.IModalServiceInstance;
    import ModalController = ers.components.modal.ModalController;
    import IModalInstanceOptions = ers.components.modal.IModalInstanceOptions;
    /**
     * Controller associated to the password-management-template as a modal.
     *
     * When the password-management modal is open, the opener could pass username and database to the modal using
     * the modalVariables (injected by the ModalService).
     * By default, on the update click, the controller will check if the new passwords are equal and if it's the case,
     * call the [onChangePassword](#changepasswordfunction) callback function. If an error occur,
     * the [changePasswordError](#changepassworderror) is updated; if no error,
     * the modal is closed.
     *
     *  The following are the methods available:
     *
     * ### Available Methods
     *
     * * [compareNewPasswords](#comparenewpasswords), [callChangePasswordCallback](#callchangepasswordcallback),
     * [onCloseModal](#onclosemodal), [formIsValid](#formisvalid) , [disableAllButtons](#disableAllButtons)
     */
    class ResetPasswordModalController extends ModalController {
        /**
         * the email.
         */
        email: string;
        static $inject: string[];
        /**
         * constructor
         * @param $scope the scope.
         * @param $modalInstance the modal instance.
         * @param options the injected ersModalService options for the change password modal
         * @param modalVariables the injected ersModalService specific variables for the change password modal.
         */
        constructor($scope: ng.IScope, $modalInstance: IModalServiceInstance, options: IModalInstanceOptions, modalVariables: {});
        /**
         * Form validity test.
         * @return {boolean} true if the chang password form is valid.
         */
        formIsValid(): boolean;
    }
}

declare module ers.components.passwordManagement {
    /**
     * Interface representing the password-management options to configure the password-management screen.
     */
    interface IChangePasswordOptions {
        /**
         * the error if change password failed.
         *
         * As the controller doesn't manage the real change password process, if an error occurs after the
         * [onChangePassword](#onchangepassword)
         * callback,  it's the callback responsability  to update this error attribute to display the error
         * in the change password screen.
         */
        changePasswordError: IChangePasswordError;
        /**
         *  The callback function following change password action.
         *
         *  It allows to verify, call a change password service for example, before close the modal.
         *
         *  This function is triggered when 1 - user click on update in the change password modal,
         *
         *  The callback function must respect this signature:
         *  ```typescript
         *   functionName(credentials:IChangePasswordResult):ng.IPromise<Object> {
         *   }
         *   ```
         *   and, the attribute tag must be the same as the below example in the login component (above all the `(credentials)`):
         *  ```xml
         *  <ers-login on-change-password="myCtrl.verifyNewPassword(credentials)"></ers-login>
         *  ```
         */
        onChangePassword: Function;
        /**
         * the callback function following successful change password .
         *
         * It allows to get the new credentials or launch operations after the change password.
         *
         * This function is triggered when 1 - user click on update in the change password modal,
         *  2 - if [onChangePassword](#onchangepassword) succeeded.
         *
         *  The callback function must respect this signature:
         *  ```typescript
         *   functionName(closeModalResult:IChangePasswordResult):ng.IPromise<Object> {
         *   }
         *   ```
         *   and, the attribute tag must be the same as the below example (above all the `(closeModalResult)`):
         * ```xml
         *  <ers-login on-change-password-success="myCtrl.displayNewPassword(closeModalResult)"></ers-login>
         *  ```
         */
        onChangePasswordSuccess: Function;
    }
}

/**
 * @author BERTHETO
 * ERS Angular Service: ersPasswordManagementService.
 */
declare module ers.components.passwordManagement {
    /**
     * @ngdoc service
     * @module ers.components.passwordManagement
     * @name ersPasswordManagementService
     *
     * @description
     *
     * Use this service to manage the passwords used in the [ersLogin](#/components/ersLogin/documentation). It offers
     * two services:
     *
     *  - changePassword service&#151;Opens a modal to change the current password.
     *  - resetPassword service&#151;Opens a modal to reset the current password. This modal requests an
     *  email address and emails the reset password instructions.
     *
     */
    class PasswordManagementService {
        private modalService;
        /**
         * Injector.
         */
        static $inject: string[];
        /**
         * Constructor.
         *
         * @param $modal The UI-Bootstrap modal service.
         */
        constructor(pErsModalService: ers.components.modal.ModalService);
        /**
         *  Configure and open the password-management modal to change the current password.
         * @param pUsername The username.
         * @param pDatabase The current database.
         * @param pChangePasswordError The error to resolve in case of failure.
         * @param pOnChangePassword The promise callback triggered when the change password button is clicked.
         * @param pOnChangePasswordSuccess The promise callback triggered when the change password succeeds and after
         * the modal is closed.
         * @returns {ng.ui.bootstrap.IModalServiceInstance} The modal instance.
         */
        changePassword(pUsername: string, pDatabase: string, pChangePasswordError: IChangePasswordError, pOnChangePassword: Function, pOnChangePasswordSuccess: Function): ng.ui.bootstrap.IModalServiceInstance;
        /**
         * Configure and open the reset password modal to display the email entry dialog for the email address
         * to which the password reset instructions are sent.
         *
         * @param pOnResetPassword The promise callback triggered when the modal is closed after the 'send' button click.
         * @param pOnResetPasswordCancel The promise callback triggered when the modal is closed after the cancel
         * click.
         * @returns {ng.ui.bootstrap.IModalServiceInstance} The modal instance.
         */
        resetPassword(pOnResetPassword: Function, pOnResetPasswordCancel: Function): ng.ui.bootstrap.IModalServiceInstance;
    }
}


declare module ers.components.passwordManagement {
    class ChangePasswordResolvedVar implements IChangePasswordResolvedVar {
        /**
         * the user name.
         */
        username: string;
        /**
         * the selected database.
         */
        database: string;
        /**
         *  The callback function following change password action.
         *
         *  It allows to verify, call a change password service for example, before close the modal.
         *
         *  This function is triggered when 1 - user click on update in the change password modal
         *
         *  This function MUST return a promise. If an error occurs during the change password check, this promise MUST be
         *  rejected with an IChangePasswordError as argument.
         *  (ex : promise.reject({credentialsError: credentialsError, message: message,
         *  newPasswordError: newPasswordError})).
         *
         *  The callback function must respect this signature:
         *  ```typescript
         *   functionName(credentials:IChangePasswordResult):ng.IPromise<Object>  {
         *   }
         *   ```
         *   and, the attribute tag must be the same as the below example in the login component (above all the `(credentials)`):
         *  ```xml
         *  <ers-login on-password-management="myCtrl.verifyNewPassword(credentials)"></ers-login>
         *  ```
         */
        changePassword: Function;
        /**
         * the error if change password failed.
         *
         * As the controller doesn't manage the real change password process, if an error occurs after the
         * [onChangePassword](#onchangepassword)
         * callback,  it's the callback responsability  to update this error attribute to display the error
         * in the change password screen.
         */
        changePasswordError: IChangePasswordError;
        /**
         * constructor
         * @param pUsername the username
         * @param pDatabase the database
         * @param pChangePassword the change password function
         */
        constructor(pUsername: string, pDatabase: string, pChangePassword: Function);
    }
}

declare module ers.components.passwordManagement {
    /**
     * Interface representing the reset password options to configure the reset password modal.
     */
    interface IResetPasswordOptions {
        /**
         *  The callback triggered when the modal is closed after the 'send' button click.
         *
         *  The callback function must respect this signature:
         *  ```typescript
         *   functionName(email:string):void {
         *   }
         *   ```
         *   and, the attribute tag must be the same as the below example in the login component (above all the `(email)`):
         *  ```xml
         *  <ers-directive on-reset-password="myCtrl.onResetPassword(email)"></ers-directive>
         *  ```
         */
        onResetPassword: Function;
        /**
         * The callback triggered when t the modal is closed after the cancel
         * cross click.
         *
         */
        onResetPasswordCancel: Function;
    }
}

declare module ers.components.login {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
    *
    * @ngdoc directive
    * @name ersLogin
    * @restrict E
    *
    * @module ers.components.login
    *
    *
    * @scope
    * @description
    *
    * Use `ers-login` component to display a login screen and, optionally, change or reset password screens.
    *
    * ### Usage
    *
    * - Traditionally, `ers-login` is used on a stand-alone page. You can, however, use it as a component
    * on a page with other components, or launch it as a modal dialog.
    * - The `ers-login` component controller does not manage the log in and change password operations,
    * it only allows the user to fill in user information and launch login/change/reset password commands.
    * - The functions associated with this controller are triggered by the login click
    * [onLogin](http://galileo/typedoc/classes/ers.components.login.logincomponent.html#onlogin)
    * and the change password request
    * [onChangePassword](http://galileo/typedoc/interfaces/ers.components.changepassword.ichangepasswordoptions.html).
    *
    *
    * ### Examples
    *
    * The following example displays the basic login UI:
    *
    * <code-editor identifier="example1" data-title="Login" html-content-url="demos/ersLogin/basicUsage/index.html"
    * js-content-url="demos/ersLogin/basicUsage/script.js" css-content-url="demos/ersLogin/basicUsage/styles.css"
    * content-mode="html"></code-editor>
    *
    * ### Design Guidelines
    *
    * - Login and Change Password components provide the customer-facing user-interface that runs the commands
     * to securely log in, change, or reset the password of your application.
    * - Consider the following:
    *  - Ensure that stand-alone login pages are clean and uncluttered.
    *  - Consider a login link that displays a modal login.
    *  - If Change Password is not part of the login screen, consider how to handle instances where a password must
     *  be changed.
    *  - Consider situations where a password must be reset.
    *
    * ### Accessibility Guidelines
    *
    * No accessibility guidelines
    *
    *
    * @param {string} [product-name] {@} Sets the name of the product.
    * ```xml
    *  <ers-login  product-name="{{myCtrl.productName}}"></ers-login>
    *  ```
    *
    * @param {boolean} [change-password-options] {=?} Calls the change password dialog and provides two options:
    *
    * - onChangePassword - Sets the action to perform when a user clicks 'update' to verify the new password.
    * - onChangePasswordSuccess - Sets the action to perform at the end of the change password process. If no error
    * has occurred, it displays the change password success message.
    *```xml
    *  <ers-login change-password-options="myCtrl.changePasswordOptions"></ers-login>
    *  ```
    * @param {string} [on-login] {&} Sets the action performed when a user logs in. This function must return a promise.
    * When an error occurs during the login, the promise must update the error attribute to display the error message
    * on the login screen. For example:
    *
    *
    * ```xml
    *  promise.reject({credentialsError: true, message: "bad password or username"})
    *  ```
    *
    * The callback function must use the following format:
    *
    * ```xml
    * functionName(loginInfo:ILoginInfo):ng.IPromise {
    * }
    * ```
    *
    * The attribute tag must use the following format:
    *
    * ```xml
    * <ers-login on-login="myCtrl.verifyLoginInfo(loginInfo)"></ers-login>
    *
    * ```
    *
    * @param {string} [databases] {=} Sets the appropriate database.
    * ```xml
    *  <ers-login databases="myCtrl.databases"></ers-login>
    *  ```
    */
    class LoginComponent extends BaseComponent {
        /**
         *  The callback function, following login action, allows a callback function on the login click.
         *
         *
         *
         *  This function must return a promise. If an error occurs during the login, the promise must be rejected with
         *  an ILoginError as argument.
         *
         *  ```xml
         *  promise.reject({credentialsError: true, message: "bad password or username"})
         *  ```
         *
         *  The callback function must use the following structure:
         *  ```typescript
         *   functionName(loginInfo:ILoginInfo):ng.IPromise<Object>  {
         *   }
         *
         *   ```
         *   and, the attribute tag must be the same as the following example, before the `(loginInfo)`):
         *  ```xml
         *  <ers-login on-login="myCtrl.verifyLoginInfo(loginInfo)"></ers-login>
         *  ```
         */
        onLogin: Function;
        /**
         * The user name.
         */
        username: string;
        /**
         * The user password.
         */
        password: string;
        /**
         * The selected database.
         */
        selectedDbIndex: number;
        /**
         *  The database list.
         *  ```xml
         *  <ers-login databases="myCtrl.databases"></ers-login>
         *  ```
         */
        databases: string[];
        /**
         * A failed login throws an error.
         *
         * As the controller does not manage the real login process, the promise is responsible for updating the error
         * attribute to display the error message in the login screen.
         *
         */
        loginError: ILoginError;
        /**
         * The product name.
         * ```xml
         *  <ers-login  product-name="{{myCtrl.productName}}></ers-login>
         *  ```
         */
        productName: string;
        /**
         * The change password options that configure the password-management modal.
         * If this is null, the password-management link is not displayed on the login screen.
         *
         * ```xml
         *  <ers-login password-management-options="myCtrl.changePasswordOptions"></ers-login>
         *  ```
         */
        resetPasswordOptions: ers.components.passwordManagement.IResetPasswordOptions;
        /**
         * The change password options that configure the password-management modal.
         * If this is null, the password-management link is not displayed on the login screen.
         * ```xml
         *  <ers-login password-management-options="myCtrl.changePasswordOptions"></ers-login>
         *  ```
         */
        changePasswordOptions: ers.components.passwordManagement.IChangePasswordOptions;
        /**
         *
         * The ERS password management service.
         *
         */
        passwordService: ers.components.passwordManagement.PasswordManagementService;
        /**
         * True when the screen is 'computing', or waiting for a response from the onLogin callback.
         * @type {boolean}
         */
        computing: boolean;
        static $inject: string[];
        /**
         * @constructor
         * @param $scope The isolated scope.
         * @param ersModalService The modal service that displays the password-management modal.
         */
        constructor($scope: ILoginScope, passwordManagementService: ers.components.passwordManagement.PasswordManagementService);
        /**
         * Select the database entry by its index.
         * @param pIndex database index to select.
         */
        selectDb(pIndex: number): void;
        /**
         * The selected database getter.
         * @return {string} the selected database name.
         */
        getSelectedDb(): string;
        /**
         *
         * Where the login function calls the onLogin callback function and passes the ILoginInfo parameters.
         *
         */
        login(): void;
        /**
         * Tests the database drop down visibility.
         * @return {boolean} True if the database drop down is visible.
         *
         */
        isDatabaseDdwVisible(): boolean;
        /**
         * The login error getter.
         * @return {string} The login error message
         */
        getErrorMessage(): string;
        /**
         *
         * Configure and open the password-management modal for changing the password.
         *
         */
        openChangePassword(): ng.ui.bootstrap.IModalServiceInstance;
        /**
         *
         * Configure and open the password-management modal for resetting the password.
         *
         */
        openResetPassword(): ng.ui.bootstrap.IModalServiceInstance;
    }
}


/**
 * The interface representing the data scope for the [[modalScriptDirective]].
 */
declare module ers.components.modal {
    interface IModalScriptScope extends ng.IScope {
        /**
         * The dialog ID.
         */
        modalId: string;
        /**
         * True if the dialog is modal, false if the dialog is modaless.
         */
        modal: boolean;
        /**
         * True if the dialog is resizable.
         */
        resizable: boolean;
        /**
         * Tue if the dialog is draggable.
         **/
        draggable: boolean;
        /**
         * The selector path that sets the focus when the popup is open. This corresponds to the path
         * of an element in the modal form. When setting the path, do not start the path with '$' selector, !, ex, :,
         * or ers-radio-group[name='sample.groupName'].
         */
        focusPath: string;
    }
}


/**
 *
 * This component generates the JavaScript to manage resizable, draggable, and mode-less dialogs.
 * The ModalService is a set of services, templates and a controller. The only way to manipulate the popup dom is to
 * use this component or JavaScript from modalTemplate.html.
 *
 *
 *
 *
 */
declare module ers.components.modal {
}



/**
 * @-ngdoc directive
 * @module ers.components.navigation
 * @name ersNavigationItem
 * @restrict E
 * @scope
 * @transclude
 *
 * @description
 *
 * Use the `ers-nav-item` component to show a single navigation item or to group similar navigation items under a
 * common heading. When selected, the group expands to show any child navigation items.
 *
 * Add optional HTML to the `ers-nav-heading` element. Only text can be used in the `ers-nav-item`. Both are displayed
 * in the navigation menu.
 *
 * See [Navigation Component](#/components/ersNavigation/documentation) for more information.
 *
 * #### Visual Design Guidelines
 *
 * See [Navigation Component](#/components/ersNavigation/documentation) for more information.
 *
 * #### Example
 *
 * See the [Navigation Component](#/components/ersNavigation/documentation) for more information.
 *
 * @param {string} [heading] {@?}
 *
 * Sets the user supplied heading which is displayed for the item. In an attribute form, use only plain text. Use
 * `ers-nav-heading` to enter HTML headings or icons.
 *
 * ```xml
 * <ers-nav>
 *   <ers-nav-item heading="Item 1"></ers-nav-item>
 *
 *   <ers-nav-item>
 *     <ers-nav-heading>
 *       <i class="fa fa-home"></i> Home
 *     </ers-nav-heading>
 *   </ers-nav-item>
 * </ers-nav>
 * ```
 *
 * @param {boolean} [is-active] {=?}
 *
 * Use to bind data to the isActive property.
 *
 * **Note** The component is considered active after being selected using either the mouse or the keyboard.
 * When active, the group displays any child navigation items.
 *
 *
 * @param {boolean} [is-group = true] {=?}
 *
 * Sets the navigation item to display, or not, any children as a group.
 *
 */
declare module ers.components.navigation {
    import BaseController = ers.components.core.BaseController;
    interface INavigationItemScope extends ng.IScope {
        heading: string;
        isActive: boolean;
        isGroup: boolean;
    }
    /**
     * The controlling class for the navigation item component.
     */
    class NavigationItemComponent extends BaseController {
        heading: string;
        isActive: boolean;
        isGroup: boolean;
        private parentNav;
        private $timeout;
        static $inject: string[];
        /**
         * Creates an instance of this component which is automatically called by Angular.
         *
         * @param $scope The scope to which this component is bound.
         * @param $element The element to which this component is bound.
         * @param $timeout The Angular timeout service used for animations.
         */
        constructor($scope: INavigationItemScope, $element: ng.IAugmentedJQuery, $timeout: ng.ITimeoutService);
        /**
         *
         * Called when an item is clicked or selected to notify the parent menu.
         *
         */
        wantsActivation(): void;
        /**
         * Activate this navigation item.
         */
        activate(): void;
        /**
         * Deactivates this navigation item.
         *
         * Called by the parent navigation when another item is activated.
         */
        deactivate(): void;
        /**
         * Checks for the parent of the requested child.
         *
         * @returns True if this is the of the child.
         */
        isAncestorOf(child: NavigationItemComponent): boolean;
        /**
         * Setup default values for scope objects.
         */
        private setupDefaults();
        /**
         *
         * Add a class to target this in the CSS.
         *
         */
        private setupBasicClasses();
        /**
         *
         * Stores a reference to the parent navigation element and registers it so it can send notifications.
         *
         */
        private setupParentNavigation();
        /**
         * Setup the necessary event listeners.
         */
        private setupEvents();
        /**
         *
         * Setup necessary DOM watchers.
         *
         */
        private setupWatchers();
        /**
         *
         * Set the maximum height property of the element to use as much space as available.
         *
         */
        private layout();
        /**
         * Get the total height of multiple elements.
         *
         * @param elements The elements whose total height is needed.
         *
         * @returns The total height of all of the elements.
         */
        private sumElementHeights(elements);
    }
}


/**
 * @ngdoc directive
 * @name ersNavigation
 * @restrict E (element)
 * @module ers.components.navigation
 * @scope
 * @transclude
 *
 * @description
 *
 * Use the `ers.components.navigation` to create a left-hand navigation menu for your application.  You can create
 * both first and second-level
 * navigation items, as well as secondary and grouped navigation items. The navigation menu also includes the Moody's
 * approved copyright information.
 *
 * ### Usage
 *
 * `ers.components.navigation` contains three components:
 *
 *  - `ers-nav`&#151;Responsible for housing all of the other directives and providing a
 *    wrapper for the navigation menu.
 *  - `ers-nav-item`&#151;Shows menu and group items in the menu.
 *  - `ers-nav-heading`&#151;Provides custom HTML for your item or
 *  group headings.
 *
 * ### Examples
 *
 * <code-editor identifier="example3" data-title="Navigation"
 * html-content-url="demos/ersNavigation/basicUsage/index.html"
 * js-content-url="demos/ersNavigation/basicUsage/script.js"
 * css-content-url="demos/ersNavigation/basicUsage/styles.css" content-mode="html"></code-editor>
 *
 * ### Design Guidelines
 *
 *  Consider the following visual design guidelines when creating your navigation menu:
 *
 *  - Keep it simple.
 *  - You can apply standard HTML and CSS formatting and styles to the label.
 *  - Be cautious when combining with other components, like Tooltips.
 *  - Be cautious when creating sub-navigation menus.
 *
 * #### Styling
 *
 * The navigation component takes the full space of its containing element and uses absolute positioning. This
 * means that the containing element should also use absolute positioning. Where the containing element is
 * using relative positioning, the height and width must be properly calculated.
 *
 *
 * <doc-note>The containing element should allow a minimum width of 160px and a maximum width of 330px.</doc-note>
 *
 * ### Accessibility Guidelines
 *
 * No accessibility guidelines.
 *
 * @param {boolean} [show-active=false] {=?}
 *
 * (ers-navigation) Sets whether or not the `active` class is applied to the elements for styling purposes.
 *
 * @param {string} [heading] {@?}
 *
 * (ers-navigation-item) Sets the user supplied heading which is displayed for the item. In an attribute form, use only plain text. Use
 * `ers-nav-heading` to enter HTML headings or icons.
 *
 * ```xml
 * <ers-nav>
 *   <ers-nav-item heading="Item 1"></ers-nav-item>
 *
 *   <ers-nav-item>
 *     <ers-nav-heading>
 *       <i class="fa fa-home"></i> Home
 *     </ers-nav-heading>
 *   </ers-nav-item>
 * </ers-nav>
 * ```
 *
 * @param {boolean} [is-active] {=?}
 *
 * (ers-navigation-item) Use to bind data to the isActive property.
 *
 * **Note** The component is considered active after being selected using either the mouse or the keyboard.
 * When active, the group displays any child navigation items.
 *
 *
 * @param {boolean} [is-group = true] {=?}
 *
 * (ers-navigation-item) Sets the navigation item to display, or not, any children as a group.
 *
 */
declare module ers.components.navigation {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * The controlling class for the Navigation Component.
     */
    class NavigationComponent extends BaseComponent {
        showActive: boolean;
        static $inject: string[];
        private children;
        /**
         * Creates an instance of this component which is automatically called by Angular.
         *
         * @param $scope The scope to which this component is bound.
         * @param $element The element to which this component is bound.
         * @param $timeout The Angular $timeout service used for synchronizing window timeout events.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, $timeout: ng.ITimeoutService);
        /**
         * Allows a child to register with this navigation component.
         *
         * @param child The child to be registered.
         */
        registerChild(child: NavigationItemComponent): void;
        /**
         * Deregisters a child so it no longer receives notifications.
         *
         * @param child The child to be deregistered.
         */
        deregisterChild(child: NavigationItemComponent): void;
        /**
         * All children of the navigation component call this method to activate themselves and let the component
         * de-activate the other children.
         */
        activateChild(activeChild: NavigationItemComponent): void;
        /**
         * Setup our default variables.
         */
        private setupDefaults();
        /**
         * Add a class so we can target this in the CSS.
         */
        private setupBasicClass();
        /**
         * Add the first-item class to the first nav item in each group. This is necessary because the CSS first-child might
         * be the nav-heading element. It also might not.
         */
        private setupFirstItemClass($timeout);
        /**
         * Set the menu's bottom property to equal the height of the footer so the entire menu is visible.
         */
        private setMenuBottom();
    }
}

declare module ers.components.core {
    import IValidationManager = ers.components.core.service.IValidationManager;
    import IValidationRule = ers.components.core.service.IValidationRule;
    /**
     * Component class which contains the commons behaviours between the form input (textbox, number, etc.).
     */
    class InputComponent extends EditComponent {
        /** The authorized values for the text alignment. */
        private static TEXT_ALIGN_VALUES;
        /** The input name. */
        name: string;
        /**
         * (Optional)
         * The read only mode used on non-edit mode.
         * Expected values: true/false.
         * Default value: false.
         * Sample of the expected input display when the read only mode is activated: the input can
         * be without border, with a transparent background and a grey color as foreground color.
         */
        readOnly: boolean;
        /**
         * (Optional)
         * Attribute used to align the input value.
         * Expected values: 'right', 'left' or 'center'.
         * Default value: 'left'.
         */
        _textAlign: string;
        /**
         * (Optional)
         * Used to specify that the input value is required (true), or not (false).
         * Expected values: true/false.
         * Default value: false.
         */
        required: boolean;
        /**
         * (Optional)
         * User can specify a REGEXP in order to apply their own validation on the entered value.
         * Expected values: REGEXP.
         * Default value: none.
         */
        private _textPattern;
        /** The component directive element. */
        private _inputComponent;
        /** Exception handler service.*/
        private $exceptionHandler;
        /**
         * Constructor of the base input component.
         *
         * @param $element The component element.
         * @param $timeout Angular timeout service. Currently used to execute a function when the model controller is fully loaded.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, $attrs: ng.IAttributes, $timeout: ng.ITimeoutService, vm: IValidationManager, $exceptionHandler: ng.IExceptionHandlerService);
        /**
         * Link function.
         */
        link(): void;
        /**
         * Method used to configure specifics rendering. Can be override by sub components.
         */
        protected configureRender(): void;
        /**
         * Method used to configure specifics validators. Can be override by sub components.
         */
        protected configParsers(): void;
        /**
         * Method used to configure specifics event listeners. Can be override by sub components.
         */
        protected configEventListeners(): void;
        /**
         * @Override from EditComponent#onNgModelCtrlLoaded.
         * Method used to configure how to do when the the model controller is fully loaded.
         */
        onNgModelCtrlLoaded(): void;
        /**
         * Set the model controller.
         * @param value The model controller.
         */
        setNgModelController(value: ng.INgModelController): void;
        /**
         * Get the input component.
         * @returns {ng.IAugmentedJQuery} Returns the input component.
         */
        /**
         * Set the new input component.
         * @param value the new input component.
         */
        inputComponent: ng.IAugmentedJQuery;
        /**
         * Get the chosen alignment.
         * @returns {string} Returns the chosen alignment (left, center or right).
         */
        /**
         * Set the chosen alignment, or left by default if the value is different than center or right.
         * @param newTextAlign the chosen alignment.
         */
        textAlign: string;
        /**
         * Apply text align to the underlyng input component.
         * @param newTextAlign Text Align value.
         */
        protected applyTextAlign(newTextAlign: string): void;
        /**
         * This method was created in addition to the "set textAlign" setter in order to give the ability to override the
         * default text align behaviours.
         * Set the chosen alignment, or left by default if the value is different than center or right.
         */
        protected setDefaultTextAlign(): void;
        /**
         * This function is used to compute the disabled property depending of the read-only property.
         * @returns Returns the computed disabled.
         */
        /**
         * Set the ng-disabled property with the user value.
         * @param disabled The ng-disabled value to set.
         */
        ngDisabled: boolean;
        /**
         * Retrieves the text pattern constraint value.
         * @returns {string} Returns the text pattern constraint value.
         */
        /**
         * Update the text pattern constraint value.
         * @param value The text pattern constraint.
         */
        textPattern: string;
        focusedElement(): ng.IAugmentedJQuery;
        /**
         * (@inherit)
         */
        getTooltipDelegate(type?: string): ng.IAugmentedJQuery;
        /**
         * @Override super method
         */
        validationRules(): IValidationRule[];
    }
}


declare module ers.components.core.filters {
    /**
     * This interface must be used to configure the Number filters settings.
     */
    interface INumberFiltersSettings {
        /** Basepoint fraction size. */
        bpFractionSize?: number;
        /** Amount fraction size. */
        amountFractionSize?: number;
        /** Percentage fraction size. */
        percentageFractionSize?: number;
        /** Short percentage fraction size. */
        shortPercentageFractionSize?: number;
        /** Rate fraction size. */
        rateFractionSize?: number;
        /** Group separator (=> Thousands separator). */
        groupSep?: string;
        /** Decimal separator. */
        decimalSep?: string;
    }
}


/**
 *
 * This module contains all of the ERS filters available for the all components.
 *
 */
declare module ers.components.core.filters {
    import INumberFiltersSettings = ers.components.core.filters.INumberFiltersSettings;
    /**
     * Class which contains all the defaults settings and functions for formatting a number.
     */
    class NumberFilters {
        /** Default group separator. */
        private static DEFAULT_GROUP_SEP;
        /** Default decimal separator. */
        private static DEFAULT_DECIMAL_SEP;
        /** Array of the default fractions size. */
        private static DEFAULT_FRACTIONS_SIZE;
        /**
         * This function must be used to apply the user settings in this number filter in order to make accessible the
         * default settings for the number.
         */
        static configureNumberSettings(settings: INumberFiltersSettings): void;
        /**
         *
         * This function must be used to format the given number.
         *
         * @param toParsed The string number to format.
         * @param groupSep The group separator (e.g.: 12,548,454.00).
         * @param decimalSep The decimal separator.
         * @returns {string} Returns a string number formatted if the 'toParsed' string can be converted into a number,
         * undefined otherwise.
         *
         */
        static formatNumber(toParsed: string, groupSep?: string, decimalSep?: string): string;
        /**
         * Get the value with the chosen fraction size.
         *
         * @param value The value used to get the fraction.
         *
         * @param fractionSize The fraction size. The size can be less than zero, or, none.
         *
         * @param multiplier The multiplier applied to the value.
         *
         * @param numberType (Optional) Specify this parameter to allow a default fraction size
         * to be configured in the user setting, if needed. The available settings are amount, percentage, basepoint and rate.
         *
         * @returns {string} Returns the fraction after having applied the multiplier and the fraction size.
         * If fractionSize is less than 0 and no default value is configured, no fraction is calculated, and
         * the (value * multiplier) is returned.
         */
        static getFraction(value: number, fractionSize: number, multiplier: number, numberType?: string): string;
        /**
         *
         * Get the decimal separator.
         *
         * @param decimalSep The proposed decimal separator.
         * @returns {string} Returns the proposed decimal separator if valid, otherwise, the default separator.
         *
         */
        static getDecimalSep(decimalSep: string): string;
        /**
         *
         * Get the group separator.
         *
         * @param groupSep The proposed group separator.
         *
         * @returns {string} Returns the proposed group separator if valid, otherwise, the default separator.
         *
         */
        static getGroupSep(groupSep: string): string;
    }
}

declare module ers.components.numberbox {
    import InputComponent = ers.components.core.InputComponent;
    import IValidationManager = ers.components.core.service.IValidationManager;
    import IValidationRule = ers.components.core.service.IValidationRule;
    /**
     *
     * @ngdoc directive
     * @name ersNumber
     * @restrict E
     * @module ers.components.numberbox
     * @scope
     *
     * @description
     *
     * Use the `ers-number` component to create a box accepting only numbers as input.
     *
     * ### Usage
     *
     * `ers-number` allows the following keyboard shortcuts for number formatting:
     *
     * - M or m for million
     * - B or b for billion
     * - K or k for thousand
     * - % for percentage
     * - BP, Bp, bP, or bp for basepoint
     *
     * ###  Examples
     *
     * #### Basic Usage
     *
     * <code-editor identifier="example1" data-title="Number" html-content-url="demos/ersNumber/basicUsage/index.html"
     * js-content-url="demos/ersNumber/basicUsage/script.js" css-content-url="demos/ersNumber/basicUsage/styles.css"
     * content-mode="html"></code-editor>
     *
     * #### Min-max value
     *
     * A numeric input field with demonstration of minimum and maximum values
     *
     * <code-editor identifier="example2" data-title="Min-max number"
     * html-content-url="demos/ersNumber/otherUsage/index.html"
     * js-content-url="demos/ersNumber/otherUsage/script.js" css-content-url="demos/ersNumber/otherUsage/styles.css"
     * content-mode="html"></code-editor>
     *
     * #### Formats
     *
     * Demonstration of different formats
     *
     * <code-editor identifier="example3" data-title="Min-max number"
     * html-content-url="demos/ersNumber/formatNumbers/index.html"
     * js-content-url="demos/ersNumber/formatNumbers/script.js"
     * css-content-url="demos/ersNumber/formatNumbers/styles.css"
     * content-mode="html"></code-editor>
     *
     * ###  Design Guidelines
     *
     * When designing the size of the numberbox, anticipate the end-user's maximum data input.
     *
     * ### Accessibility Guidelines
     *
     * No accessibility guidelines
     *
     * @param {expression} [ng-model] {=} Provides two-way data binding for changing the number value.
     *
     * @param {expression} [ng-change="expression"]{=?}
     *
     * Evaluates the number for user input changes and notifies scope immediately on change, unlike the JavaScript
     * onCharge event which only triggers at the end of a change.
     *
     * @param {boolean} [ng-disabled=false] {=?}
     *
     * Sets the disabled mode and is used in conjunction with the edit mode to prevent user entry in the specified
     * text box.
     *
     * @param {boolean} [ng-readonly=false] {=?} Sets the read-only mode.
     *
     * @param {boolean} [ng-required=false] {=?} Sets the numberbox value to required or not. The default is
     * not required.
     *
     * @param {number} [min] {=?} Defines the minimum value that the user can enter into the numberbox.
     *
     * @param {number} [max] {=?} Defines the maximum value that the user can enter into the numberbox.
     *
     * @param {boolean} [exclusive-min=false] {=?}  If set to true, MIN range constraint will be exclusive,
     * i.e. ]min, max]
     *
     * @param {boolean} [exclusive-max=false] {=?} If set to true, MAX range constraint will be exclusive,
     * i.e. [min, max[
     *
     * @param {string} [min-error-message=undefined] {=?} Overides default min error message.
     *
     * @param {string} [max-error-message=undefined] {=?} Overides default max error message.
     *
     * @param {string} [text-align=right] {@?} Sets the alignment of the text in the box. Available values
     * are right, left,
     * and center.
     * ```xml
     * <ers-number name="ersNumber" max="2025" min="1975"
     *             ng-model="ersNumber" text-align="center"> </ers-number>
     * ```
     *
     * @param {string} [format="amount"] {@?} Sets the number format attribute to either 'amount',
     * 'rate', 'short_percentage',
     * 'percentage' or 'basepoint'. The default value is "amount". Format shortcuts for the numberbox are:
     *
     * - M or m for million
     * - B or b for billion
     * - K or k for thousand
     * - % for percentage
     * - BP, Bp, bP, or bp for basepoint
     *
     */
    class NumberboxComponent extends InputComponent {
        /** The default format. */
        private static DEFAULT_FORMAT;
        /**
         * Authorized keyboard shortcuts.
         */
        private static AUTHORIZED_SHORTCUTS;
        /** A string that represents a number and is used inside of NUMBER RegExp. */
        private static RE_NUMBER_PART;
        /**
         * REGEXP is used to parse the string to determine if the type of number number.
         * Groups[0] = "([+-]?)([0-9]*([.]?[0-9]+)?)( ?(authorizedShortKey))?"
         * Groups[1] = "[+-]?"
         * Groups[2] = "[0-9]*([.]?[0-9]+)?"
         * Groups[3] = "[.]?[0-9]+"
         * Groups[4] = " ?(authorizedShortKey)"
         * Groups[5] = authorizedShortKey => Sample: "m|M|b|B|k|K|%|bp|BP|bP|Bp"
         */
        private static NUMBER_REGEXP_BASE;
        /**
         *
         *  The array containing the appropriate format for the ers-number element.
         *
         */
        private static AVAILABLE_FORMAT;
        /** The attribute used to specify the number format to apply. */
        private _format;
        /** The model value stored on "focus-in" that is restored when the keyboard ESC is pressed. */
        private storedModelValue;
        /** The property that flags current focus state of the current web component. */
        private hasFocus;
        /** The web component model, not the HTML input ngModel. */
        private _ngModelDirective;
        /** The Angular filter service. */
        private $filter;
        /**
         * (Optional)
         * The attribute used to add a MIN range constraint to the number entered by the user into the input.
         * The expected
         * values are a number greater than or equal to 0. The default value is none.
         *
         *
         */
        private _min;
        exclusiveMin: boolean;
        minErrorMessage: string;
        /**
         * (Optional)
         * The attribute used to add a MAX range constraint to the number entered by the user into the input. The expected
         * values are a number greater than or equal to 0. The default value is none.
         *
         */
        private _max;
        exclusiveMax: boolean;
        maxErrorMessage: string;
        static $inject: string[];
        /**
         * Constructor.
         * @param $element The component element.
         * @param $filter The Angular filter service.
         * @param $timeout The Angular timeout service. Currently used to execute a function when the model controller
         * is fully loaded.
         *
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, $attrs: ng.IAttributes, $filter: ng.IFilterService, $timeout: ng.ITimeoutService, vm: IValidationManager, $exceptionHandler: ng.IExceptionHandlerService);
        /**
         *
         * Get the ngModel directive, not the HTML input directive.
         * @returns {number} Returns the ngModel directive.
         *
         */
        /**
         *
         * Get the ngModel directive, not the HTML input directive.
         * @param value The new value of the ngModel directive.
         *
         */
        ngModel: number;
        /**
         *
         * @returns {string} The current number format.
         *
         */
        /**
         *
         *
         * Set the current number format.
         * @param value The format value. It takes its value among the following list:
         * <li>rate</li>
         * <li>amount</li>
         * <li>percentage</li>
         * <li>currency</li>
         * <li>basepoint</li>
         *
         * If an unexpected value is provided, the default value "amount" will be used.
         *
         */
        format: string;
        /**
         *
         *
         * This method was created to override
         * of the default text align behavior. It is in addition to the "set textAlign" setter and sets the chosen
         * alignment value if the value is not center or right.
         *
         *
         *
         */
        protected setDefaultTextAlign(): void;
        /**
         * @Override from InputComponent#configParsers.
         * The method used to configure specific parsers.
         */
        protected configParsers(): void;
        /**
         * @Override from InputComponent#onNgModelCtrlLoaded.
         * The method used to configure what to do when the the model controller is fully loaded.
         */
        onNgModelCtrlLoaded(): void;
        /**
         * @Override from InputComponent#configEventListeners.
         * The method used to configure event listeners.
         */
        protected configEventListeners(): void;
        /**
         * This function transforms the number entered into the number entered plus any
         * formatting (number type parsing and filtering, plus formatting).
         *
         */
        private transformation();
        /**
         *
         * @Override from InputComponent#configureRender.
         * The method used to configure specific rendering.
         *
         */
        protected configureRender(): void;
        /**
         *
         * Update the model view value with the view value entered by the user and check to see if any shortcuts
         * are available.
         *
         */
        computeViewValue(): void;
        /**
         *
         * This function parses the given value.
         * @param value {string} The value to parse.
         * @returns {string} Returns the parsed value, null if the given value is invalid.
         *
         */
        private parseValue(value);
        /**
         * Apply the "basepoint" format.
         * @param value The value on which the format is applied.
         * @returns {string} Returns the value formatted from the given value.
         */
        private static applyBasepointFormat(value);
        /**
         * Apply the "percentage" format.
         * @param value The value on which the format is applied.
         * @returns {string} Returns the value formatted from the given value.
         */
        private static applyPercentageFormat(value);
        /**
         * Apply the "thousands" format.
         * @param value The value on which the format is applied.
         * @returns {string} Returns the value formatted from the given value.
         */
        private static applyThousandFormat(value);
        /**
         * Apply the "millions" format.
         * @param value The value on which the format is applied.
         * @returns {string} Returns the value formatted from the given value.
         */
        private static applyMillionFormat(value);
        /**
         * Apply the "billions" format.
         * @param value The value on which the format is applied.
         * @returns {string} Returns the value formatted from the given value.
         */
        private static applyBillionFormat(value);
        /**
         * This function test if the given string value is a number representation.
         * @param value The value to test.
         * @returns Returns `true` if the value is a string number representation, false otherwise.
         */
        private isNumber(value);
        /**
         * This function verifies whether or not the modelValue can be formatted.
         * @returns {boolean} Returns true if the model value can be formatted, otherwise false.
         */
        private isFormatable();
        /**
         *
         * @Override from InputComponent#validationRules.
         * The method used to configure validation rules.
         *
         */
        validationRules(): IValidationRule[];
        validator(val: number): boolean;
        /**
         *
         * @returns {number} Minimum value.
         *
         */
        /**
         * Sets the minimum value.
         * @param value The value to set.
         */
        min: number;
        /**
         * @returns {number} Maximum value.
         */
        /**
         * Sets the maximum value.
         * @param value The value to set.
         */
        max: number;
    }
}


import BaseComp = ers.components.core.BaseComponent;
declare module ers.components.panel {
    import IResizeService = ers.components.core.service.IResizeService;
    import IResizeListener = ers.components.core.service.IResizeListener;
    import IContainerEventService = ers.components.core.service.IContainerEventService;
    class PanelComponent extends BaseComp implements IResizeListener {
        /**
         * true if the panel is collapsed.
         */
        private _closed;
        /**
         * true if the panel is collapsible.
         */
        collapsible: boolean;
        /**
         * the panel class.
         */
        panelClass: string;
        /**
         * the panel header
         */
        header: string;
        /**
         * the panel height (percents or pixels).
         */
        private _panelHeight;
        /**
         * the panel body offset height.
         */
        private bodyOffsetHeight;
        /**
         * true if the panel is resizing.
         */
        private resizing;
        private display;
        /** Container event service.*/
        protected eventService: IContainerEventService;
        static $inject: string[];
        /**
         *
         * @param $scope scope
         * @param $element element
         * @param eventService the event service.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, windowService: IResizeService, eventService: IContainerEventService);
        /**
         * compute the element size compare to this parent size.
         * @returns {number} size in px.
         */
        private elementHeightInPixels();
        /**
         * get the "exact" panel height value (not the computed one in px).
         * Manage the pixel, percent sizes defined inline (style attribute) or inside a css class.
         * @returns {string} the "exact" panel height value.
         */
        private computePanelHeight();
        /**
         *  this will toggle the panel if the element is not disabled
         */
        toggle(): void;
        /**
         *
         * @returns {boolean} true if the panel is closed
         */
        /**
         *
         * @param closed true if the panel is closed
         */
        closed: boolean;
        /**
         * if a panel resize occur and if there is a specific height on the panel ,
         * we have to compute the new panel body height.
         */
        resizeDidOccur(): void;
        /**
         * panel height getter.
         * @returns {string}
         */
        /**
         * panel height setter.
         * @param height
         */
        panelHeight: string;
    }
}

import BaseC = ers.components.core.BaseComponent;
declare module ers.components.panel {
    /**
     *  this is the controller for the 'ersPanelBody'
     */
    class PanelBodyComponent extends BaseC {
        /**
         * the panel controller
         */
        panelController: ng.IControllerInstance;
        static $inject: string[];
        /**
         * constructor
         * @param $scope the scope
         * @param $element the element
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery);
        /**
         *
         * @returns {boolean} true if the panel is closed
         */
        closed(): boolean;
        /**
         *
         * @returns {string} the panel class.
         */
        panelClass: string;
    }
}


import BaseCompo = ers.components.core.BaseComponent;
declare module ers.components.panel {
    /**
     *  this is the controller for the 'ersPanelBody'
     */
    class PanelHeaderComponent extends BaseCompo {
        /**
         * the panel controller
         */
        panelController: ng.IControllerInstance;
        static $inject: string[];
        /**
         * constructor
         * @param $scope the scope
         * @param $element the element
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery);
        /**
         *
         * @returns {boolean} true if the panel is collapsed.
         */
        closed: boolean;
        /**
         *
         * @returns {boolean} true if the panel is collapsible.
         */
        collapsible: boolean;
        /**
         *  this will toggle the panel if the element is not disabled
         */
        toggle(): void;
    }
}


declare module ers.components.radioButtons {
    /**
     *
     * The radio button scope which provides the properties used in the controller.
     *
     */
    interface IRadioButtonScope extends ng.IScope {
        /** The radio button value. */
        value: Object;
        /**
         * The property that specifies if a radio button is disabled or not.
         *
         */
        disabled: boolean;
    }
}


declare module ers.components.radioButtons {
    /**
     * Radio group scope which provides the properties used in the controller.
     */
    interface IRadioGroupScope extends ng.IScope {
        /** The radio button group name. */
        name: string;
        /** The property that specifies if a radio button is disabled or not. */
        disabled: boolean;
        /** The property that specifies if a radio button is read only or not. */
        readonly: boolean;
        /**
         *
         * The property that specifies whether a radio button inside of a radio group must be selected (true),
         * or not (false). This property overrides the local radio button property.
         *
         */
        required: boolean;
    }
}


/**
 * ERS Angular Controller: RadioGroupComponent.
 */
declare module ers.components.radioButtons {
    import IValidationManager = ers.components.core.service.IValidationManager;
    import IValidationRule = ers.components.core.service.IValidationRule;
    import EditComponent = ers.components.core.EditComponent;
    /**
     * Radio button group controller.
     */
    class RadioGroupComponent extends EditComponent {
        /** This property is the form name of the group radio component. */
        name: string;
        /** The property that specifies if a radio button is disabled or not. */
        disabled: boolean;
        /** The property that specifies if a radio button is read only or not. */
        readonly: boolean;
        /** The property that specifies is the radio button selection is required (true), or not (false). */
        required: boolean;
        /** The radio button array contained in the radio group. */
        private radioButtonControllers;
        /** The last tab index used to save or restore the tab index on the current element. */
        private lastTabIndex;
        /** The flag that indicates the radio group is created. */
        private _componentCreated;
        /** Angular service injection. */
        static $inject: string[];
        /**
         *
         * Constructor.
         * @param $scope The component scope.
         *
         * @param $attrs The directive attributes.
         *
         */
        constructor($scope: IRadioGroupScope, $element: ng.IAugmentedJQuery, $attrs: ng.IAttributes, $timeout: ng.ITimeoutService, vm?: IValidationManager);
        /**
         *
         * Configures the directive attribute observers for key down events, and read only, disabled, and required states.
         *
         * @param $attrs Directive attributes.
         */
        private configureObservers();
        /**
         *
         * Sets the focus flag on the the selected radio button if it is not disabled, or on the first not
         * disabled radio button.
         *
         */
        setFocusFlag(): void;
        /**
         * Sets the model controller.
         *
         * @param pNgModelCtrl The model controller.
         *
         */
        setNgModelController(pNgModelCtrl: ng.INgModelController): void;
        /**
         *
         * Checks to see if the model controller is already defined.
         *
         * @returns {boolean} Returns true if the model controller is set already in the group controller, or false if
         * it is not set.
         *
         *
         */
        isModelDefined(): boolean;
        /**
         *
         * Registers the radio button render with the group controller.
         *
         *
         * @param rbRender The render to register.
         */
        addRadioButtonController(rbRender: RadioButtonController): void;
        /**
         *
         * Removes radio button render from the group controller.
         *
         * @param rbRender The render to remove.
         *
         */
        removeRadioButtonController(rbRender: RadioButtonController): void;
        /**
         *
         * Gets the the number of radio buttons in the radio group.
         *
         * @returns {number} Returns the number of radio buttons contained in the radio group.
         *
         */
        getNumberOfRadioButtons(): number;
        /**
         *
         * Renders the radio group.
         *
         *
         */
        render(): void;
        /**
         *
         * Determines if a radio button is selected in the radio group.
         *
         * @returns {boolean} Returns true if a radio button is selected, false is no radio button is selected.
         *
         */
        private isRadioButtonChecked();
        /**
         *
         * Determines if there is at least one enabled radio button.
         *
         * @returns {boolean} Returns true if at least one radio button is enabled, false if none are enabled.
         *
         */
        private isRadioButtonEnabled();
        /**
         *
         * Change the radio group selected button by a given increment.
         *
         * Selects the first button if no button is selected.
         *
         */
        private changeSelectedButton(increment);
        /**
         *
         * Selects the previous radio button. If there is no previous radio button, the last is selected. If there is
         * no current radio button selected, the first is checked.
         *
         *
         */
        private selectPrevious();
        /**
         *
         * Selects the next radio button. If there is no next radio button, the first is selected. If there is
         * no current radio button selected, the first is checked.
         *
         */
        private selectNext();
        /**
         *
         * Determines if the arrow buttons on the keyboard are being used and moves the selection accordingly. Left and
         * up arrows select the previous button, right and down errors selected the next button.
         *
         * @param ev (JQueryEventObject) Event to catch the key code.
         *
         */
        keydownListener(ev: JQueryEventObject): void;
        /**
         *
         * Determines the group disabled value and then actives or deactivates the radio group focus via the tab index.
         *
         *
         * @param $element (ng.IAugmentedJQuery) Element that updates the tab index.
         */
        updateTabIndex(): void;
        /**
         *
         * @returns {boolean} Determines if the radio group exists. Returns true if the radio group exists,
         * returns false if the radio group does not.
         *
         */
        /**
         *
         * Determines if the radio group exists. Returns true if the radio group exists,
         * returns false if the radio group does not.
         *
         *
         * @param created True if the radio group exists, false if it does not.
         *
         */
        componentCreated: boolean;
        /**
         *
         * Sets the view value of the radio group.
         *
         * @param value The new value to set into the model.
         *
         * @param event The event source, or trigger.
         *
         */
        setViewValue(value: Object, event: string): void;
        /**
         *
         * Determine the model value of the radio group.
         *
         * @returns Returns the model value.
         *
         */
        getViewValue(): Object;
        /**
         *
         * Sets the radio group focus.
         *
         */
        focus(): void;
        validationRules(): IValidationRule[];
    }
}


/**
 * ERS Angular Controller: RadioButtonController.
 */
declare module ers.components.radioButtons {
    import BaseController = ers.components.core.BaseController;
    /**
     * The radio button button controller.
     */
    class RadioButtonController extends BaseController {
        /** The property that specifies if a radio button is disabled or not. */
        disabled: boolean;
        /** The radio button value. This is the configured value, not the model value. */
        value: Object;
        /**
         *
         * The current radio button CSS class, checked, unchecked, disabled mode, readonly mode, or simple display mode.
         *
         */
        private rbClass;
        /** The group controller used to access to the group model. */
        private groupCtrl;
        /** The property used to store the last state of the associated radio button. */
        private lastChecked;
        /** The property used to store the last state of the "disabled" property on the associated radio button. */
        private lastDisabled;
        /** The property used to store the last state of the "readonly" property on the radio group. */
        private lastReadonly;
        /** The Angular service injection. */
        static $inject: string[];
        /**
         * Constructor.
         * @param $scope The component scope.
         */
        constructor($scope: IRadioButtonScope, $element: ng.IAugmentedJQuery);
        /**
         * This function associates the radio group controller with this radio button controller.
         *
         * @param pGroupCtrl The radio group controller.
         * @param groupModel If it was not previously set, the group model that sets the group model contained in the
         * group controller.
         *
         */
        setGroupCtrl(pGroupCtrl: RadioGroupComponent, groupModel: ng.INgModelController): void;
        /**
         * This function gets the last state of the radio button, checked or unchecked.
         *
         * @returns {boolean} Returns true if the last state of the radio button is checked, false if unchecked,
         *
         */
        getLastChecked(): boolean;
        /**
         * This function renders the radio button and returns its current state,
         * checked or unchecked.
         *
         * @returns {boolean} Returns true if the radio button is checked or false if the radio button is unchecked.
         */
        render(): void;
        /**
         *
         * This function calculates the CSS class used for the radio button display.
         *
         * @returns {string} The possible calculated CSS class values are:<br>
         *   <li><b>Checked</b>&#151;The radio button is checked and normal (clickable).</li>
         *   <li><b>Unchecked</b>&#151;The radio button is unchecked and normal (clickable).</li>
         *   <li><b>Checked disabled</b>&#151;The radio button is checked and disabled.</li>
         *   <li><b>Unchecked disabled</b>&#151;The radio button is unchecked and disabled.</li>
         *   <li><b>Checked readonly</b>&#151;The radio button is checked and readonly.</li>
         *   <li><b>Unchecked readonly</b>&#151;The radio button is unchecked and readonly.</li>
         */
        private getCSSClass();
        /**
         * Remove the focus flag CSS from the current radio button.
         */
        removeFocusFlag(): void;
        /**
         * Add the focus flag CSS to the current radio button.
         */
        addFocusFlag(): void;
    }
}


declare module ers.components.radioButtons {
}

/**
 * ERS Angular Directive: ers-radio-group.
 * Radio button group component.
 */
declare module ers.components.radioButtons {
}


declare module ers.components.shell {
    /**
     * The IShellModule interface for the shell Module.
     */
    interface IShellModule extends ng.IModule {
        urlRouterProvider: ng.ui.IUrlRouterProvider;
    }
}


declare module ers.components.core {
    interface INavigationItem {
        /** Label. */
        label: string;
        /** true to collapse the navigation after the navigation item is selected. */
        collapseNavigation: boolean;
        /** Action. */
        action: string;
        /** False if the parameter must be hidden in the accordion. */
        visible: boolean;
        /** parameters for the action. */
        parameters: Object[];
        /** true if the item is a navigation group. */
        /** childrens. */
        navigationItems: INavigationItem[];
    }
}

declare module ers.components.core {
    /**
     * Interface representing a product in the product selector.
     */
    interface IProduct {
        /** Product label.*/
        label: string;
        /** Product code.*/
        code: string;
        /** Url endpoint of the product for ui-router.*/
        url: string;
        /** Template to display when the product is selected.*/
        templateUrl: string;
        /** Controller to instantiated when displaying the product.*/
        controller?: string | Function | Array<Object>;
        /** Controller alias used in the template*/
        controllerAs?: string;
        /** If true, the current product is not destroyed when a new product is selected. Default: false.*/
        sticky?: boolean;
    }
}


declare module ers.components.core {
    interface IUserInfo {
        id: number;
        name: string;
        lastLogin: string;
    }
}


declare module ers.components.shell {
    import IProduct = ers.components.core.IProduct;
    import IUserInfo = ers.components.core.IUserInfo;
    /**
     * IShellScope provides the scope for the shell component.
     */
    interface IShellScope extends ng.IScope {
        /**
         * The onSettings callback triggered when the settings icon is clicked.
         */
        onSettings: Function;
        /**
         * The onInfo callback triggered when the info icon is clicked.
         */
        onInfo: Function;
        /**
         * The onHelp callback triggered when the help icon is clicked.
         */
        onHelp: Function;
        /**
         * The onEditProfile callback triggered when the edit profile link is clicked.
         */
        onEditProfile: Function;
        /**
         * The onLogout callback triggered when the logout link is clicked.
         */
        onLogout: Function;
        /**
         * The onContextSelector callback triggered when the context link is clicked.
         */
        onContextSelector: Function;
        /**
         * The products list for the product selector.
         */
        products: IProduct[];
        /**
         * The products list for the product selector.
         */
        currentProduct: IProduct;
        /**
         * The currently logged in user.
         */
        userInfo: IUserInfo;
        /**
         * The current selected context.
         */
        currentContext: string;
    }
}

declare module ers.components.shell {
    /**
     * The ITopShellScope interface providing scope for the top shell component.
     */
    interface ITopShellScope extends IShellScope {
        /**
         * The onProductChange callback triggered when a product is selected in the product selector.
         */
        onProductChange: Function;
    }
}

import IShellModule = ers.components.shell.IShellModule;
import IUrlRouterProvider = ng.ui.IUrlRouterProvider;


/**
 * Provider that allows to add states (ui-router) at runtime.
 * This provider is only a wrapper of $stateProvider to make it injectable.
 */
declare module ers.components.state {
    /**
     * Interface declaration.
     */
    interface DynamicStateService {
        /**
         * Adds a route state
         * @param name name of the state
         * @param state route state to add.
         */
        addState(name: string, state: ng.ui.IState): DynamicStateService;
        /**
         * Adds a nested state state to the current state. The current state will be automatically concatenated to the given state.
         * @param name name of the nested state
         * @param state route state to add.
         */
        addNestedState(name: string, state: ng.ui.IState): DynamicStateService;
    }
}

declare module ers.components.shell {
    import IProduct = ers.components.core.IProduct;
    import IUserInfo = ers.components.core.IUserInfo;
    /**
     * ### Shell Component
     *
     * The shell component displays the shell screen and its sub components, product selector, topshell, and viewport.
     *
     * The shell component presents the Shell with two main displays, the topshell and the viewport.
     *
     * The **Top Shell** is composed of a **Product Selector** and a **Toolbar**, each with unique links, icons and menus.
     *
     * On click, the links and icons can only trigger external actions, so each must be configured with the
     * callback attributes needed to complete those actions.
     *
     * The current context, user, and product, are managed by the shell component.
     *
     * The product selection sets the current product and displays the corresponding product url in the viewport.
     *
     *  ### Available Options
     *
     * The following are the options available for the Shell component:
     *
     * * [onSettings](#onsettings), [onInfo](#oninfo), [onHelp](#onhelp), [onProductChange](#onproductchange),
     * [onAfterProductChange](#onAfterProductChange),
     * [onLogout](#onlogout),[onEditProfile](#oneditprofile), [onContextSelector](#oncontextselector),
     * [currentContext](#currentcontext),[products](#products),[userInfo](#userinfo),[infoIsVisible](#infoisvisible),
     * [settingsIsVisible](#settingsisvisible),[helpIsVisible](#helpisvisible)
     *
     * The following methods are available for the Shell component:
     *
     * ### Available Methods
     *
     * * [configureProductStates](#configureproductstates), [onProductChange](#onproductchange)
     * ### Examples
     *
     * #### Example with all the options and all the icons displayed.
     *
     * ```xml
     * <ers-shell on-settings="myCtrl.displaySettingsModal()" on-info="myCtrl.displayInfoModal()" on-help="myCtrl.displayHelp()"
     *    on-edit-profile="myCtrl.onEditProfile()" on-logout="myCtrl.onLogout()" products="myCtrl.products"
     *    user-info="myCtrl.userInfo" on-context-selector="myCtrl.displayContextSelector()"
     *    on-product-change="myCtrl.onProductChange(newProduct,oldProduct)"
     *    on-after-product-change="myCtrl.onProductChange(newProduct,oldProduct)"
     *    current-context="myCtrl.currentContext" help-is-visible="myCtrl.helpIsVisible()" info-is-visible="myCtrl.infoIsVisible()"
     * settings-is-visible="myCtrl.settingIsVisible()">
     * </ers-shell>
     * ```
     *
     * #### Example with icons dynamically displayed.
     *
     *```xml
     * <ers-shell  help-is-visible="myCtrl.helpIsVisible()" info-is-visible="myCtrl.infoIsVisible()"
     * settings-is-visible="myCtrl.settingIsVisible()">
     * </ers-shell>
     * ```
     */
    import BaseComponent = ers.components.core.BaseComponent;
    import DynamicStateService = ers.components.state.DynamicStateService;
    import IStateService = ng.ui.IStateService;
    class ShellComponent extends BaseComponent {
        /**
         * The state service.
         */
        stateService: IStateService;
        /**
         * The onSettings callback triggered when the settings icon is clicked.
         *
         * ```xml
         * <ers-shell on-settings="myCtrl.onSettings()"/>
         * ```
         */
        onSettings: Function;
        /**
         * The onInfo callback triggered when the info icon is clicked
         *
         * ```xml
         * <ers-shell on-info="myCtrl.onInfo()"/>
         * ```
         */
        onInfo: Function;
        /**
         * The onHelp callback triggered when the help icon is clicked.
         *
         * ```xml
         * <ers-shell on-help="myCtrl.onHelp()"/>
         * ```
         */
        onHelp: Function;
        /**
         * The onLogout callback triggered when the logout link is clicked.
         *
         * ```xml
         * <ers-shell on-logout="myCtrl.onLogout()"/>
         * ```
         */
        onLogout: Function;
        /**
         * The onEditProfile callback triggered when the edit profile link is clicked.
         *
         * ```xml
         * <ers-shell on-edit-profile="myCtrl.onEditProfile()"/>
         * ```
         */
        onEditProfile: Function;
        /**
         * The onContextSelector callback triggered when the context link is clicked.
         *
         * ```xml
         * <ers-shell on-context-selector="myCtrl.onContextSelector()"/>
         * ```
         */
        onContextSelector: Function;
        /**
         * The onProductChange callback is triggered when a product is selected in the product selector.
         *
         * The callback function must use this signature:
         *  ```typescript
         *   functionName(newProduct:IProduct,oldProduct:IProduct):ng.IPromise {
         *   }
         *   The promise can be rejected with an error message (error:string) and the product selection is not changed.
         *   ```
         *   The attribute tag must be the same as the following example, particularly the `(newProduct,OldProduct)`.
         *
         *  ```xml
         *  <ers-shell on-product-change="myCtrl.onProductChange(newProduct,oldProduct)"></ers-shell>
         *  ```
         */
        onProductChange: Function;
        /**
         * The onAfterProductChange callback is triggered after a product is selected in the product selector. The
         * callback function uses the following signature:
         *  ```typescript
         *   functionName(newProduct:IProduct,oldProduct:IProduct):void {
         *   }
         *   ```
         *   and, the attribute tag must be the same as the following example, particularly the `(newProduct,OldProduct)`.
         *  ```xml
         *  <ers-shell on-after-product-change="myCtrl.onAfterProductChange(newProduct,OldProduct)"></ers-shell>
         *  ```
         */
        onAfterProductChange: Function;
        /**
         * The currently selected context.
         *
         * ```xml
         * <ers-shell current-context="myCtrl.currentContext"/>
         * ```
         */
        currentContext: string;
        /**
         *
         * The product selector product list.
         *
         * ```xml
         * <ers-shell products="myCtrl.products"/>
         * ```
         */
        products: IProduct[];
        /**
         * The opened products list.
         *
         */
        openedProducts: IProduct[];
        /**
         * The currently selected product.
         */
        private _currentProduct;
        /**
         * The currently logged in user.
         *
         * ```xml
         * <ers-shell user-info="myCtrl.userInfo"/>
         * ```
         */
        userInfo: IUserInfo;
        /**
         * The shell state.
         */
        shellState: string;
        /**
         * The nested state corresponding to a view in a product page.
         */
        private nestedState;
        /**
         * True if the info icon is visible.
         *
         * ```xml
         * <ers-shell info-is-visible="myCtrl.infoIsVisible()"/>
         * ```
         */
        infoIsVisible: string;
        /**
         * True if the settings icon is visible.
         *
         * ```xml
         * <ers-shell settings-is-visible="myCtrl.settingIsVisible()"/>
         * ```
         */
        settingsIsVisible: string;
        /**
         * True if help icon is visible.
         *
         * ```xml
         * <ers-shell help-is-visible="myCtrl.helpIsVisible()"/>
         * ```
         */
        helpIsVisible: string;
        /**
         * The $rootScope service.
         */
        rootScope: ng.IRootScopeService;
        /**
         * The $q service.
         */
        private promiseService;
        static $inject: string[];
        /**
         * @constructor
         * @param $scope The IShellScope scope
         * @param $state The state service.
         * @param $rootScope The $rootScope service.
         * @param $compile compile service
         */
        constructor($scope: IShellScope, $element: ng.IAugmentedJQuery, $state: IStateService, $rootScope: ng.IRootScopeService, $q: ng.IQService, $compile: ng.ICompileService, dynamicStateService: DynamicStateService);
        /**
         * Test if the product is the current product.
         * @param pProductToTest
         * @returns {boolean}True if the product is the current product.
         */
        isCurrentProduct(pProductCode: string): boolean;
        /**
         * Test if a state is already configured in the stateProvider.
         * @param pState the state to test
         * @returns {boolean} true if the state is configured.
         *
         */
        private isStateAlreadyConfigured(pState);
        /**
         *
         * When a product is selected, a new state, consisting of the shell state plus the product code, is created to
         * display the selected product in the viewport. The state cannot be defined during the configuration phase
         * of the module because it is impossible to know which
         * product and url will be selected.
         *
         * @param $state The state service.
         *
         */
        private configureProductStates($state, $compile, dynamicStateService);
        /**
         *
         * If onProductChange returns on product upon selection, and the promise is resolved, the new navigation route
         * is used for the newly selected product. Otherwise, no routing changes are needed because there is no new
         * product to which to navigate. All errors are raised.
         *
         * @param newProduct The selected product.
         * @param oldProduct The previous product.
         * @return a promise Resolved if the product is changed.
         *
         *
         *
         */
        _onProductChange(newProduct: IProduct, oldProduct: IProduct): ng.IPromise<Object>;
        /**
         * Call if the onProductChange promise is resolved.
         * @param deferred ng.IDeferred
         * @param The selected product.
         * @param oldProduct The previous product.
         */
        private _onProductChangeResolved(deferred, newProduct, oldProduct);
        /**
         * Get the current product.
         * @returns {IProduct}
         */
        /**
         * Set the current product.
         * @param pProduct
         */
        currentProduct: IProduct;
    }
}


declare module ers.components.shell {
    import IProduct = ers.components.core.IProduct;
    import IUserInfo = ers.components.core.IUserInfo;
    /**
     * ###TopShell component
     *
     * Displays the topshell screen and its sub components, product selector, icons, menu, and links. The topshell
     * is composed of a product selector,  and a toolbar with different links, icons and menu.
     *
     * On click, the links and icons can only trigger external actions, so each must be configured with the
     * callback attributes needed to complete those actions.
     *
     * The current context, user, and product, are managed by the topshell component.
     *
     * The product selection sets the current product and dispatches the information with the callback
     * function [onProductChange](#onproductchange).
     *
     *  ### Available Options
     *
     * The following are the options available for the top-Shell component:
     *
     * * [onSettings](#onsettings), [onInfo](#oninfo), [onHelp](#onhelp),
     * [onLogout](#onlogout),[onEditProfile](#oneditprofile), [onContextSelector](#oncontextselector),
     * [onProductChange](#onproductchange),[onAfterProductChange](#onAfterProductChange),
     * [currentContext](#currentcontext),[products](#products),[userInfo](#userinfo),[infoIsVisible](#infoisvisible),
     * [settingsIsVisible](#settingsisvisible),[helpIsVisible](#helpisvisible)
     *
     * The following are the methods available for the top-Shell component:
     *
     * ### Available Methods
     *
     * * [changeProduct](#changeproduct), [isHelpVisible](#ishelpvisible), [isInfoVisible](#isinfovisible),
     * [isSettingsVisible](#issettingsvisible)
     *
     * ### Examples
     *
     * #### Example with all the options and all the icons displayed.
     *
     * ```xml
     * <ers-top-shell on-settings="myCtrl.onSettings()" on-info="myCtrl.onInfo()" on-help="myCtrl.onHelp()"
     * on-edit-profile="myCtrl.onEditProfile()" on-logout="myCtrl.onLogout()"
     * products="myCtrl.products"
     * on-product-change="myCtrl.onProductChange(newProduct,oldProduct)"
     * on-after-product-change="myCtrl.onProductChange(newProduct,oldProduct)"
     * user-info="myCtrl.userInfo" on-context-selector="myCtrl.onContextSelector()"
     * current-context="myCtrl.currentContext"
     * help-is-visible="myCtrl.helpIsVisible" info-is-visible="myCtrl.infoIsVisible"
     * settings-is-visible="myCtrl.settingsIsVisible"/>
     * ```
     *
     * #### Example with icons dynamically displayed.
     *
     *```xml
     * <ers-top-shell  help-is-visible="myCtrl.helpIsVisible()" info-is-visible="myCtrl.infoIsVisible()"
     * settings-is-visible="myCtrl.settingIsVisible()">
     * </ers-top-shell>
     * ```
     */
    import BaseComponent = ers.components.core.BaseComponent;
    import ModalService = ers.components.modal.ModalService;
    class TopShellComponent extends BaseComponent {
        /**
         * The onSettings callback triggered when the settings icon is clicked.
         *
         * ```xml
         * <ers-top-shell on-settings="myCtrl.onSettings()"/>
         * ```
         */
        onSettings: Function;
        /**
         * The onInfo callback triggered when the info icon is clicked.
         *
         * ```xml
         * <ers-top-shell on-info="myCtrl.onInfo()"/>
         * ```
         */
        onInfo: Function;
        /**
         * The onHelp callback triggered when the help icon is clicked.
         *
         * ```xml
         * <ers-top-shell on-help="myCtrl.onHelp()"/>
         * ```
         */
        onHelp: Function;
        /**
         * The onLogout callback triggered when the logout link is clicked.
         *
         * ```xml
         * <ers-top-shell on-logout="myCtrl.onLogout()"/>
         * ```
         */
        onLogout: Function;
        /**
         * The onEditProfile callback triggered when the edit profile link is clicked.
         *
         * ```xml
         * <ers-top-shell on-edit-profile="myCtrl.onEditProfile()"/>
         * ```
         */
        onEditProfile: Function;
        /**
         * The onProductChange callback triggered when a product is selected in the product selector.
         *
         * The callback function must use this signature:
         *  ```typescript
         *   functionName(newProduct:IProduct,oldProduct:IProduct):ng.IPromise {
         *   }
         *   If the promise is rejected with an error message (error:string), the product selection does not changed
    
         *   ```
         *   and, the attribute tag must be the same as the following, especially the `(newProduct,oldProduct)`).
         *  ```xml
         *  <ers-top-shell on-product-change="myCtrl.onProductChange(newProduct,oldProduct)"></ers-top-shell>
         *  ```
         */
        onProductChange: Function;
        /**
         * The onAfterProductChange callback triggered after a product is selected in the product selector
         * The callback function must use this signature:
         *  ```typescript
         *   functionName(newProduct:IProduct,oldProduct:IProduct):void {
         *   }
         *   ```
         *   and, the attribute tag must be the same as the following example, especially the `(newProduct,OldProduct)`).
         *  ```xml
         *  <ers-top-shell on-product-change="myCtrl.onAfterProductChange(newProduct,OldProduct)"></ers-top-shell>
         *  ```
         */
        onAfterProductChange: Function;
        /**
         * The onContextSelector callback triggered when the context link is clicked.
         *
         * ```xml
         * <ers-top-shell on-context-selector="myCtrl.onContextSelector()"/>
         * ```
         */
        onContextSelector: Function;
        /**
         * The currently selected context.
         *
         * ```xml
         * <ers-top-shell current-context="myCtrl.currentContext"/>
         * ```
         */
        currentContext: string;
        /**
         * The selected product index.
         */
        selectedProductIndex: number;
        /**
         * The products list for the product selector
         *
         * ```xml
         * <ers-top-shell products="myCtrl.products"/>
         * ```
         */
        products: IProduct[];
        /**
         * The currently selected product.
         */
        _currentProduct: IProduct;
        /**
         * The user currently logged in.
         *
         * ```xml
         * <ers-top-shell user-info="myCtrl.userInfo"/>
         * ```
         */
        userInfo: IUserInfo;
        /**
         * True if the info icon is visible.
         * ```xml
         * <ers-top-shell on-info="myCtrl.onInfo()"/>
         * ```
         */
        infoIsVisible: string;
        /**
         * True if the settings icon is visible.
         *
         * ```xml
         * <ers-top-shell settings-is-visible="myCtrl.settingIsVisible()"/>
         * ```
         */
        settingsIsVisible: string;
        /**
         * True if the help icon is visible.
         *
         * ```xml
         * <ers-top-shell help-is-visible="myCtrl.helpIsVisible()"/>
         * ```
         */
        helpIsVisible: string;
        /**
         * The modal service.
         */
        private modalService;
        static $inject: string[];
        /**
         * * @constructor
         * @param $scope The ITopShellScope scope.
         */
        constructor($scope: ITopShellScope, ersModalService: ModalService);
        /**
         * Sets the selected product index for the newly selected product.
         * @param newProduct The new product and route to set.
         */
        private changeProduct(newProduct);
        /**
         *
         * The product getter.
         *
         * @returns {IProduct} The currently selected product.
         *
         */
        /**
         *
         * If onProductChange exists and its promise is resolved, the newly selected product is set. If it is not set,
         * the promise is rejected and an error is raised with the rejected promise as the error message.
         *
         *
         *
         * @param pProduct The product.
         */
        currentProduct: IProduct;
        /**
         * Help icon visibility test
         * @return {boolean} true If the help icon is visible.
         */
        isHelpVisible(): boolean;
        /**
         * Info icon visibility test.
         * @return {boolean} True if the info icon is visible.
         */
        isInfoVisible(): boolean;
        /**
         * Settings icon visibility test.
         * @return {boolean} True if the settings icon is visible.
         */
        isSettingsVisible(): boolean;
    }
}

declare module ers.components.tabs {
    /**
     * Provides a simple interface defining the TabsController Tab properties.
     *
     */
    interface ITabScope {
        /**
         * The header string displayed to the user for this tab.
         */
        heading: string;
        /**
         *
         * An array of strings displaying any errors associated with this tab. An empty array or `null` means no errors.
         *
         */
        errors?: string[];
    }
}



declare module ers.components.tabs {
    interface ITabsetSortEvent extends Event {
        sortOrder: number[];
    }
}


/**
 * @ng-doc directive
 * @module ers.components.tabs
 * @name ersTabset
 * @restrict E
 * @transclude
 * @scope
 *
 * @description
 *
 *
 * The `ers.components.tabs` module comprises two elements:
 *
 *  - ers-tabset&#151;Wraps the tabs that you wish to display (this directive).
 *  - ers-tab&#151;Creates a selectable tab, a tab heading,
 *  and a corresponding sheet containing tab content.
 *
 * ### Usage
 *
 * - Use `ers-tabset` as the envelope to group `ers-tabs` into logical groups that display sheets of information. The
 * sheets are the containers holding the tab content. Primary Tabs are at the top of sheets providing
 * the main label, or the name of the sheet. Use `ers-tabset` to create additional tab levels
 * under the primary tab.
 * - `ers-tabset` uses the _class_ attribute (&lt;ers-tabset class="secondary"&gt;) {{tab}} to define sub-tabs
 * within a sheet. You can transclude the tab header and content.
 *
 *
 * ### Examples
 *
 * <code-editor identifier="example3" data-title="Tabset" html-content-url="demos/ersTabset/basicUsage/index.html"
 * js-content-url="demos/ersTabset/basicUsage/script.js" css-content-url="demos/ersTabset/basicUsage/styles.css"
 * content-mode="html"></code-editor>
 *
 * ### Design Guidelines
 *
 * Use `ers-tabset` where you are designing grouped content such as forms, settings, and grids, to provide
 * a consistent level of navigation between similar modules of your application.
 *
 * ##### Styles
 *
 * There are two levels of visual tabset:
 *
 * - Primary&#151;Used at the tops of pages to provide navigation between elements.
 * - Secondary&#151;Used beneath Primary tabset for an additional levels of navigation.
 *
 * ##### Best Practices
 *
 * Consider the following principles and best practices when designing the user interface with these components:
 *
 * - Use only one primary tabset per page to maintain proper visual hierarchy.
 * - Primary tabsets should always appear above secondary tabsets.
 * - Do not stack secondary tabsets as this may cause confusion to the user.
 * - Always place the secondary tabset inside of the primary tabset content to ensure that the tab
 *   switching animation applies to all of the content.
 *
 * ### Accessibility Guidelines
 *
 * No accessibility guidelines.
 *
 * @param {string} heading {@?}
 *
 * Specifies the text to be displayed in the tab title (selection) area. Use only text, not HTML. To add an HTML tag or
 * an icon, use the `tab-heading` element. Title text can be transcluded.
 *
 *
 * ##### Example - Basic Heading
 *
 * ```xml
 * <ers-tab heading="My Heading"></ers-tab>
 * ```
 *
 * ##### Example - HTML Heading
 *
 * ```xml
 * <ers-tab><tab-heading><i class='fa fa-user'></i> Users</tab-heading></ers-tab>
 * ```
 *
 * @param {boolean} [active] {=?}
 * (ers-tab) Whether or not this tab should be active.
 *
 * ```xml
 * <ers-tab heading="Test Active" active="myCtrl.active"></ers-tab>
 * ```
 *
 * @param {string[]} [errors] {=?}
 * (ers-tab) Adds a red dot to the tab indicating an error associated with the tab. These error message are not
 * displayed to the user.
 *
 * ```xml
 * <ers-tab heading="Contact Us" errors="MyCtrl.tabs['contact-us'].errors"></ers-tab>
 * ```
 *
 * @param {expression} [select] {&?}
 * (ers-tab) Sets the action invoked when the tab is selected or gains focus.
 *
 * ```xml
 * <ers-tab select="MyCtrl.tabSelected()"></ers-tab>
 * ```
 *
 * @param {expression} [deselect] {&?}
 * (ers-tab) Sets the action invoked when the tab loses focus, or is deselected.
 *
 * ```xml
 * <ers-tab deselect="MyCtrl.tabDeselected()"></ers-tab>
 * ```
 *
 * @param {expression} [close] {&?}
 * (ers-tab) Sets the action invoked when this tab is closed and removed from the list
 * of tabs.
 *
 * ```xml
 * <ers-tab close="MyCtrl.tabClosed()"></ers-tab>
 * ```
 *
 * @param {boolean} [auto-activate-first-tab] {=?}
 *
 * (ers-tabset) Specifies whether or not the first tab is automatically activated when the tabs are loaded.
 * This allows the developer to choose the tab to activate when a page opens.
 *
 * @param {boolean} [can-close] {=?}
 *
 * (ers-tabset) Specifies whether or not a tab can be closed. When true, the tabs display a 'close' icon at the top right
 * of the tab during a mouse-over or hover.
 *
 * @param {boolean} [can-close-single=true] {=?}
 *
 * (ers-tabset) Specifies whether or not the last tab can be closed. This is only relevant when `can-close` is set to `true`.
 *
 * @param {boolean} [can-sort] {=?}
 *
 * (ers-tabset) Specifies if tab sorting is allowed. If true, you can click and drag the tabs to rearrange them within the
 * current list of tabs.
 *
 * @param {expression} [sort]  {@?}
 *
 * (ers-tabset) An Angular expression that is evaluated when a sort occurs.
 *
 * The expression accesses the `$event` object which is a jQuery event and provides the following additional properties:
 *
 *  - `sortOrder` - An array of indices representing the order of the tabs after the sort.
 *
 *    For example, if the first and second indices were swapped this may return `[0,2,1,3]`, allowoing you
 *    to determine the new order of your array:
 *
 *    ```js
 *    var newTabs = _.map($event.sortOrder, function(order) {
 *      return oldTabs[order];
 *    });
 *    ```
 */
declare module ers.components.tabs {
    import IMenuItem = ers.components.contextmenu.IMenuItem;
    import IContainerEventService = ers.components.core.service.IContainerEventService;
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * @description
     *
     * Tabset handles the events, styles, and primary and secondary level tab navigation components A Tabset must
     * contain Tabs ([[TabComponent]]) for anything to be displayed.
     *
     *
     *
     * ### Methods
     * The following are the Tabset component methods:
     *
     * * [[addTab]], [[hide]], [[layout]], [[removeTab]], [[scrollToTab]], [[selectFirstTab]], [[selectTab]], [[show]]
     *
     * ```xml
     *  <div ng-controller="MyController as ctrl">
     *    <ers-tabs>
     *      <ers-tab ng-repeat="tab in ctrl.myTabs"
     *               heading="{{tab.heading}}"
     *               errors="{{tab.errors}}"></ers-tab>
     *    </ers-tabs>
     *  </div>
     *  ```
     */
    class TabsetComponent extends BaseComponent {
        /**
         * The amount of padding for the fade effect.
         *
         * **Note:** This should match the fade image used in the CSS.
         */
        static FADE_PADDING: number;
        /**
         * Specifies whether or not the first tab should automatically be activated when the tabs are loaded.
         * This allows you to activate a specific tab when opening.
         *
         * @default true
         *
         * ```xml
         * <ers-tabset auto-activate-first-tab="false">
         *   <ers-tab heading="Not Active"></ers-tab>
         *   <ers-tab heading="Active" active="true"></ers-tab>
         * </ers-tabset>
         * ```
         */
        autoActivateFirstTab: boolean;
        /**
         * Specifies whether or not the to prevent a tab from closing. When true the tabs display a close icon on the
         * top right corner of the tab on a mouse hover.
         *
         *
         * @default false
         *
         * ```xml
         * <ers-tabset can-close="true">
         *   <ers-tab heading="I am closable"></ers-tab>
         *   <ers-tab heading="So am I"></ers-tab>
         * </ers-tabset>
         * ```
         */
        canClose: boolean;
        /**
         * Specifies whether or not the last remaining tab is allowed to be closed if canClose is set to true. If canClose
         * is set to false, nothing happens.
         *
         * @default true
         *
         * ```xml
         * <ers-tabset can-close="true" can-close-single="false">
         *   <ers-tab heading="I cannot be closed because I am the last tab."></ers-tab>
         * </ers-tabset>
         * ```
         */
        canCloseSingle: boolean;
        /**
         * Specifies whether or not the tabs can be sorted. If true, the user can click and drag to reorder
         * the tabs within the current list of tabs.
         *
         * @default false
         *
         * ```xml
         * <ers-tabset can-sort="true">
         *   <ers-tab heading="I am sortable"></ers-tab>
         *   <ers-tab heading="So am I"></ers-tab>
         * </ers-tabset>
         * ```
         */
        canSort: boolean;
        /**
         * The Angular expression called when a sort occurs.
         *
         * @default null
         */
        sort: string;
        /**
         * @private
         *
         * Specifies the delegate to which tab sort and tab removed events are sent.
         *
         *
         */
        delegate: ITabsetDelegate;
        /**
         * @private
         * Specifies the internal boolean used to stop the layout() function from activating
         * for all tabs when the tabset is created.
         */
        private initialized;
        /**
         * The current list of tabs that this [[TabsetComponent]] is managing.
         *
         * ***Note*** This list should never be updated manually. Instead, use [[addTab]] and [[removeTab]] for updates.
         * This method, can, however, be used to programmatically retrieve the list of tabs.
         *
         * @readonly
         */
        tabs: TabComponent[];
        /**
         * The currently activated tab.
         *
         * @readonly
         */
        activeTab: TabComponent;
        /**
         * The list of tabs currently hidden to the left.
         *
         * @readonly
         */
        leftHiddenTabs: TabComponent[];
        /**
         * The list of tabs currently hidden to the right.
         *
         * @readonly
         */
        rightHiddenTabs: TabComponent[];
        /**
         * The drop down menu of hidden tabs.
         *
         * @type {Array}
         */
        menuItemsOfHiddenTabs: IMenuItem[];
        /**
         * @private
         *
         * Specifies whether or not tabs have been added or removed since the last sortable setup.
         */
        sortableTabsChanged: boolean;
        /**
         * @private
         *
         * Stores the Angular expression that is called upon a sort.
         */
        protected sortFn: Function;
        /**
         * @private
         *
         * Container event service.
         */
        protected containerEventService: IContainerEventService;
        /**
         * Implements the IContainerEventService protocol to listen for resize events. This currently resizes on a
         * 100ms delay per request in case of multiple resize calls.
         *
         * @param dimensions - The new dimensions of the window.
         *
         */
        private needsLayout;
        /**
         *
         * The ngShow directive is cached in order to compute the hidden tabs displayed in the drop down arrow
         * context menu.
         *
         */
        private _ngShow;
        /** Angular injection.*/
        static $inject: string[];
        /**
         * Creates a new TabsetComponent instance.
         *
         * **Note** This method is called automatically by Angular when it sees a matching directive, so you will rarely
         * instantiate this class in your code (perhaps only in a test).
         *
         * @constructor
         *
         * @returns A new [[TabsetComponent]] instance.
         *
         */
        constructor($scope: ng.IScope, $parse: ng.IParseService, $timeout: ng.ITimeoutService, containerEventService: IContainerEventService);
        /**
         * Getter on the ngShow directive attribute.
         * @returns {boolean} Returns the ngShow value.
         */
        /**
         * Setter on the ngShow directive attribute.
         * @param value If true, the hidden tabs will be computed again to update the hidden tabs context menu.
         */
        ngShow: boolean;
        /**
         * Called when a parent has resized the tabs.
         */
        resizeDidOccur(): void;
        /**
         * @private
         *
         * Called by Angular when the directive is being linked to an HTML element in the DOM.
         *
         * @param $scope The scope this directive monitors and modifies.
         * @param element The jQuery representation of the HTML element.
         * @param attributes The array of HTML attributes on the element.
         */
        link($scope: ng.IScope, element: ng.IAugmentedJQuery, attributes: ng.IAttributes): void;
        /**
         * Attempts to select the very first tab (if one is available).
         */
        selectFirstTab(): void;
        /**
         * Selects the requested tab.
         *
         * @param tab The [[TabComponent]] from the list of [[tabs]] that you wish to select.
         */
        selectTab(tab: TabComponent): void;
        /**
         * Hides this directive by setting the display to none.
         */
        hide(): void;
        /**
         * Shows this directive by setting the CSS display to block and ensuring the layout is updated.
         */
        show(): void;
        /**
         * Gathers information about, and lays out the component in a responsive way and updates the CSS.
         *
         * Call this to refresh the layout and CSS of the component when it's container size changes or you need to ensure
         * the CSS and hidden tabs are up-to-date.
         *
         * _**Note:** You must manually run a `$digest()` cycle if calling this method outside of Angular._
         */
        layout(): void;
        /**
         * @private
         *
         * Sets up the internal jQuery UI for rearranging the tabs on this component.
         */
        protected setupSortable(): void;
        /**
         * Scrolls to take up any unused space so that as many tabs as possible
         * will be displayed on the screen.
         *
         * This is most useful when the component resizes and gets larger and
         * has unused space on the right side.
         *
         * This is automatically called on a window resize event, but may be
         * called by your code as well.
         */
        scrollIntoView(): void;
        /**
         * Scrolls the active tab into view.
         *
         * @param tab The tab from the list of [[tabs]] that can be scrolled into view.
         */
        scrollToTab(tab: TabComponent): void;
        private moveLeft(newPosition);
        /**
         * @private
         *
         * Synchronizes the list of angular tab elements with our internal cache.
         *
         */
        protected syncTabs(): void;
        /**
         * @private
         *
         * Updates the tabs that are partially or fully hidden.
         *
         */
        protected updateHiddenTabs(): void;
        private updateDropdownMenu();
        /**
         *
         * Programmatically add a tab to the end of this component's list of tabs.
         *
         * @param tab The tab to be added to the list of [[tabs]].
         */
        addTab(tab: TabComponent): void;
        /**
         * Programmatically remove a tab, no matter the position. If removing a tab from outside of Angular, manually
         * run the `$digest() cycle to update scope.
         *
         *
         * @param tabToRemove The tab that you wish to remove from the list of [[tabs]].
         *
         */
        removeTab(tabToRemove: TabComponent): void;
        /**
         * Set the next if possible active tab after
         *
         * @param tab the tab which becomes not visible
         */
        setActiveTab(tab: TabComponent, ondelete?: boolean): void;
        /**
         * @private
         *
         * Return an array of boolean values describing whether or not the corresponding tab, by index, is hidden.
         *
         * @returns {boolean[]} Returns a list of the indexes of any hidden tabs.
         */
        protected getHiddenTabIndexes(): boolean[];
        /**
         * Returns the jQuery element used to display the tabs.
         *
         * @returns {JQuery} The jQuery element which wraps the actual HTML tab elements on the screen.
         */
        protected tabsElement(): JQuery;
        protected dropdownMenuId(): string;
    }
}


/**
 * @ngdoc directive
 * @module ers.components.tabs
 * @name ersTab
 * @restrict E
 * @transclude
 * @scope
 *
 *
 * @description
 *
 * The `ers.components.tabs` module comprises two elements:
 *
 *  - ers-tabset&#151;Wraps the tabs that you wish to display (this directive).
 *  - ers-tab&#151;Creates a selectable tab, a tab heading,
 *  and a corresponding sheet containing tab content.
 *
 * ### Usage
 *
 * - Use `ers-tabset` as the envelope to group `ers-tabs` into logical groups that display sheets of information.
 * - The sheets are the containers holding the tab content. Primary Tabs are at the top of sheets providing
 * the main label, or the name of the sheet. Use `ers-tabset` to create additional tab levels under the primary tab.
 * - `ers-tabset` uses the _class_ attribute (&lt;ers-tabset class="secondary"&gt;) {{tab}} to define sub-tabs
 * within a sheet. You can transclude the tab header and content.
 *
 *
 * ### Examples
 *
 * #### Primary Tabs
 *
 * <code-editor identifier="example1" data-title="Primary Tabs" html-content-url="demos/ersTabset/basicUsage/index.html"
 * js-content-url="demos/ersTabset/basicUsage/script.js" css-content-url="demos/ersTabset/basicUsage/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Secondary Tabs
 *
 * <code-editor identifier="example2" data-title="Secondary Tabs"
 * html-content-url="demos/ersTabset/secondaryTabs/index.html"
 * js-content-url="demos/ersTabset/secondaryTabs/script.js"
 * css-content-url="demos/ersTabset/secondaryTabs/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Nested Tabs
 *
 * <code-editor identifier="example3" data-title="Nested Tabs" html-content-url="demos/ersTabset/nestedTabs/index.html"
 * js-content-url="demos/ersTabset/nestedTabs/script.js" css-content-url="demos/ersTabset/nestedTabs/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Close Tabs
 *
 * The example with ability to close the tabs
 *
 * <code-editor identifier="example4" data-title="Close Tabs" html-content-url="demos/ersTabset/closeTabs/index.html"
 * js-content-url="demos/ersTabset/closeTabs/script.js" css-content-url="demos/ersTabset/closeTabs/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Responsive Tabs
 *
 * <code-editor identifier="example5" data-title="Nested Tabs"
 * html-content-url="demos/ersTabset/responsiveTabs/index.html"
 * js-content-url="demos/ersTabset/responsiveTabs/script.js"
 * css-content-url="demos/ersTabset/responsiveTabs/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Error Tabs
 *
 * The example with error indication for 'Tab 2'
 *
 * <code-editor identifier="example6" data-title="Error Tabs"
 * html-content-url="demos/ersTabset/errorTabs/index.html"
 * js-content-url="demos/ersTabset/errorTabs/script.js"
 * css-content-url="demos/ersTabset/errorTabs/styles.css"
 * content-mode="html"></code-editor>
 *
 * ### Design Guidelines
 *
 * Use `ers-tabset` where you are designing grouped content such as forms, settings, and grids, to provide
 * a consistent level of navigation between similar modules of your application.
 *
 * ##### Styles
 *
 * There are two levels of visual tabset:
 *
 * - Primary&#151;Used at the tops of pages to provide navigation between elements.
 * - Secondary&#151;Used beneath Primary tabset for an additional levels of navigation.
 *
 * ##### Best Practices
 *
 * Consider the following principles and best practices when designing the user interface with these components:
 *
 * - Use only one primary tabset per page to maintain proper visual hierarchy.
 * - Primary tabsets should always appear above secondary tabsets.
 * - Do not stack secondary tabsets as this may cause confusion to the user.
 * - Always place the secondary tabset inside of the primary tabset content to ensure that the tab
 *   switching animation applies to all of the content.
 *
 * ### Accessibility Guidelines
 *
 * No accessibility guidelines.
 *
 * @param {string} heading {@?}
 *
 * Specifies the text to be displayed in the tab title (selection) area. Use only text, not HTML. To add an HTML tag or
 * an icon, use the `tab-heading` element. Title text can be transcluded.
 *
 *
 * ##### Example - Basic Heading
 *
 * ```xml
 * <ers-tab heading="My Heading"></ers-tab>
 * ```
 *
 * ##### Example - HTML Heading
 *
 * ```xml
 * <ers-tab><tab-heading><i class='fa fa-user'></i> Users</tab-heading></ers-tab>
 * ```
 *
 * @param {boolean} [active] {=?}
 * (ers-tab) Whether or not this tab should be active.
 *
 * ```xml
 * <ers-tab heading="Test Active" active="myCtrl.active"></ers-tab>
 * ```
 *
 * @param {string[]} [errors] {=?}
 * (ers-tab) Adds a red dot to the tab indicating an error associated with the tab. These error message are not
 * displayed to the user.
 *
 * ```xml
 * <ers-tab heading="Contact Us" errors="MyCtrl.tabs['contact-us'].errors"></ers-tab>
 * ```
 *
 * @param {expression} [select] {&?}
 * (ers-tab) Sets the action invoked when the tab is selected or gains focus.
 *
 * ```xml
 * <ers-tab select="MyCtrl.tabSelected()"></ers-tab>
 * ```
 *
 * @param {expression} [deselect] {&?}
 * (ers-tab) Sets the action invoked when the tab loses focus, or is deselected.
 *
 * ```xml
 * <ers-tab deselect="MyCtrl.tabDeselected()"></ers-tab>
 * ```
 *
 * @param {expression} [close] {&?}
 * (ers-tab) Sets the action invoked when this tab is closed and removed from the list
 * of tabs.
 *
 * ```xml
 * <ers-tab close="MyCtrl.tabClosed()"></ers-tab>
 * ```
 *
 * @param {boolean} [auto-activate-first-tab] {=?}
 *
 * (ers-tabset) Specifies whether or not the first tab is automatically activated when the tabs are loaded.
 * This allows the developer to choose the tab to activate when a page opens.
 *
 * @param {boolean} [can-close] {=?}
 *
 * (ers-tabset) Specifies whether or not a tab can be closed. When true, the tabs display a 'close' icon at the top right
 * of the tab during a mouse-over or hover.
 *
 * @param {boolean} [can-close-single=true] {=?}
 *
 * (ers-tabset) Specifies whether or not the last tab can be closed. This is only relevant when `can-close` is set to `true`.
 *
 * @param {boolean} [can-sort] {=?}
 *
 * (ers-tabset) Specifies if tab sorting is allowed. If true, you can click and drag the tabs to rearrange them within the
 * current list of tabs.
 *
 * @param {expression} [sort]  {@?}
 *
 * (ers-tabset) An Angular expression that is evaluated when a sort occurs.
 *
 * The expression accesses the `$event` object which is a jQuery event and provides the following additional properties:
 *
 *  - `sortOrder` - An array of indices representing the order of the tabs after the sort.
 *
 *    For example, if the first and second indices were swapped this may return `[0,2,1,3]`, allowoing you
 *    to determine the new order of your array:
 *
 *    ```js
 *    var newTabs = _.map($event.sortOrder, function(order) {
 *      return oldTabs[order];
 *    });
 *    ```
 */
declare module ers.components.tabs {
    import BaseComponent = ers.components.core.BaseController;
    /**
     *
     * This is the controller class for the ersTab directive that handles all business logic for the tabs.
     *
     */
    class TabComponent extends BaseComponent {
        /**
         * Specifies whether or not this tab is active and corresponds to the tag 'active' attribute.
         *
         *
         */
        private _active;
        private internalActive;
        /**
         *
         * Displays errors corresponding to the tag 'error' attribute.
         *
         */
        errors: string[];
        /**
         *
         * The title displayed to user corresponding to the tag 'heading' attribute.
         *
         */
        heading: string;
        /**
         *
         * A piece of code executed when the tab is selected or gains focus, corresponding to the tab `select` attribute.
         *
         */
        select: Function;
        /**
         *
         * A piece of code executed when the tab is de-selected or loses focus, corresponding to the
         * tag `deselect` attribute.
         */
        deselect: Function;
        /**
         *
         * A piece of code executed when the tab is closed and removed from the list of tabs, corresponding to the
         * tag `close` attribute.
         *
         */
        close: Function;
        /**
         * @private
         *
         * Retain a reference to the parent tabset.
         *
         */
        tabset: TabsetComponent;
        /**
         * @private
         *
         * The heading transcluded by the directive.
         *
         */
        headingElement: HTMLElement;
        /**
         * @private
         *
         * Specifies whether or not the tab is visible, or not.
         *
         */
        private _ngShow;
        /**
         * @public
         *
         * The tab transclude function.
         *
         */
        $trancludeFn: ng.ITranscludeFunction;
        /**
         * @private
         *
         * The Angular timeout service.
         *
         */
        private $timeout;
        /**
         *
         * Angular injection.
         *
         */
        static $inject: string[];
        /**
         * Creates a new instance of the TabComponent.
         *
         * *Note* As this method is called automatically by Angular when it sees a matching directive, it is rarely
         * instantiated by code.
         *
         * @param scope The scope to which this TabComponent is bound.
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, $timeout: ng.ITimeoutService);
        /**
         * @private
         *
         * Called by the [[linkWithTabset]] method when linking the directive.
         */
        link(scope: ng.IScope, el: ng.IAugmentedJQuery, attrs: ng.IAttributes): void;
        /**
         * @private
         *
         * Called by the Angular directive when linking this controller to the directive.
         *
         * @param scope The scope to which this controller/directive is bound.
         * @param el The DOM element to which this controller/directive is bound.
         * @param attrs The attributes assigned to the directive.
         * @param tabset The parent [[TabsetComponent]] instance.
         * @param transclude The Angular transclude function that will return the compiled contents of the tab.
         */
        linkWithTabset(scope: ng.IScope, el: ng.IAugmentedJQuery, attrs: ng.IAttributes, tabset: TabsetComponent, transclude: ng.ITranscludeFunction): void;
        /**
         * @protected
         *
         * Listener events.
         */
        protected setListeners(): void;
        /**
         *
         * Listener heading content change.
         *
         * @param element new element
         */
        addHeadingWatcher(element: ng.IAugmentedJQuery): void;
        /**
         * @private
         *
         * Called by the directive's template when a tab is clicked or selected.
         *
         */
        onSelect(): void;
        /**
         * @private
         *
         * Called by the directive's template when a tab is closed using the remove icon.
         */
        onClose(): void;
        /**
         *
         * Activates the tab and evaluates the code in the [[select]] option, if provided.
         *
         */
        activate(): void;
        /**
         *
         * De-activates the tab and evaluates the code in the [[deselect]] option, if provided.
         *
         */
        deactivate(): void;
        /**
         *
         * Cleans up the directive or controller when the element is being removed from the list of tabs.
         *
         */
        destroy(): void;
        /**
         * @public
         *
         * Getter to the directive scope.
         *
         * @returns {ng.IScope} the diretcive scope
         */
        getScope(): ng.IScope;
        /**
         * @private
         *
         * Tests whether or not the requested DOM element is a tab heading element.
         *
         * @param node The node which we would like to test.
         *
         * @returns {string|boolean} True if the requested node is a tab heading node.
         */
        isHeadingTab(node: HTMLElement): boolean;
        /**
         * @public
         *
         * Get the formatted heading tab.
         *
         * @returns {string} the formatted heading tab
         */
        getFormattedHeading(): string;
        /**
         * Check if the tab is visible.
         *
         * @returns {boolean} trie if visible else false
         */
        isVisible(): boolean;
        /**
         *
         * Getter on the ngShow directive attribute.
         *
         * @returns {boolean} Returns the ngShow value.
         */
        /**
         *
         * Setter on the ngShow directive attribute.
         *
         * @param value If true, the hidden tabs are deactivated.
         *
         */
        ngShow: boolean;
        active: boolean;
    }
}

declare module ers.components.tabs {
    interface ITabsetDelegate {
        tabActivated: (tab: TabComponent) => void;
        willRemoveTab: (tab: TabComponent) => void;
        tabRemoved: (tab: TabComponent) => void;
    }
}


declare module ers.components.tabs {
    interface ITabsetScope extends ng.IScope {
        /**
         * Specifies whether or not the first tab is activated automatically.
         */
        autoActivateFirstTab?: boolean;
        /**
         *
         * The object to which the TabDirective delegates all UI and data events
         *
         */
        delegate?: ITabsetDelegate;
        /**
         *
         * The array of tabs displayed by this directive
         *
         */
        tabs?: ITabScope[];
    }
}


/**
 * @ngdoc directive
 * @name ersTextbox
 * @restrict E
 * @module ers.components.textbox
 * @scope
 *
 * @description
 * Use the `ers-textbox` to create an input that accepts any form of text.
 *
 * ### Usage
 *
 * - Use `ng-readonly` or `ng-disabled` to set optional `ers-textbox` states.
 * - Use the textboxes with ng-minlength, ng-maxlength, ng-required and ng-pattern attributes.
 *
 * ### Examples
 *
 * #### Basic Textbox
 *
 * <code-editor identifier="example1" data-title="Basic Textbox" html-content-url="demos/ersTextbox/basicUsage/index.html"
 * js-content-url="demos/ersTextbox/basicUsage/script.js" css-content-url="demos/ersTextbox/basicUsage/styles.css"
 * content-mode="html"></code-editor>
 *
 * #### Other Usage
 *
 * Textboxes with `ng-minlength`, `ng-maxlength`, `ng-required` and `ng-pattern` attributes.
 *
 * <code-editor identifier="example2" data-title="Textbox attributes" html-content-url="demos/ersTextbox/otherUsage/index.html"
 * js-content-url="demos/ersTextbox/otherUsage/script.js" css-content-url="demos/ersTextbox/otherUsage/styles.css"
 * content-mode="html"></code-editor>
 *
 * ### Design Guidelines
 *
 * Use `ers-textbox` anywhere the user is asked to input short text-based content such as login forms,
 * data entry, etc. Do not use the textbox it if you are asking the user for
 * a significant amount of text input spanning multiple lines.
 *
 * ### Accessibility Guidelines
 *
 * No accessibility guidelines.
 *
 * @param {string} [name] {@}
 *
 * Specifies the text box form name. The form name must be unique within the form.
 *
 * @param {string} [placeholder] {@}
 *
 * Specifies  the ghost text that appears when the value is empty. Uses the standard HTML5 placeholder attribute.
 *
 * @param {expression} [ng-model] {=}
 *
 * Specifies the Angular model object which is bound to the text box's value.
 *
 * @param {expression} [ng-change="expression"] {&?}
 *
 * Evaluates the textbox for user input changes and notifies scope immediately, unlike the JavaScript
 * onCharge event which only notifies scope when the textbox loses focus.
 *
 * @param {boolean} [ng-disabled=false] {=?}
 *
 * Specifies  the disabled mode and is used in conjunction with the edit mode to prevent user entry in the specified text box.
 *
 * @param {boolean} [ng-readonly=false] {=?}
 *
 * Specifies  the read only option to non-editable mode.
 *
 * @param {boolean} [ng-required=false] {=?}
 *
 * Specifies the text box value as required or not. The available values are true or false. The default is false.
 *
 * @param {string} [ng-pattern] {=?}
 *
 * Specifies  a user-specified validation on the entered text. When this attribute is not used the application does not
 * check the content of the box.
 *
 * @param {boolean} [password=false] {=}
 *
 * Specifies password constraints (prevent copy, characters are not readable) when enabled.
 * The default value is `false`.
 *
 * @param {number} [ng-minlength] {=?}
 *
 * Specifies a minimum length constraint to the user entered text. There is no default value.
 *
 * @param {number} [ng-maxlength] {=?}
 *
 * Specifies a maximum length constraint for the user entered text. There is no default value.
 *
 * @param {string} [text-align] {@?}
 *
 * Specifies the text box alignment value. Expected values are 'right', 'left', or 'center'. The default value is 'left'.
 *
 *
 */
declare module ers.components.textbox {
    import IValidationManager = ers.components.core.service.IValidationManager;
    import IValidationRule = ers.components.core.service.IValidationRule;
    import InputComponent = ers.components.core.InputComponent;
    /**
     * @tag ers-textbox
     * @restrict E
     *
     * ### Description
     *
     * Use the <code>ers-textbox</code> component to create a textbox.
     *
     */
    class TextboxComponent extends InputComponent {
        /**
         * Specifies the password constraints (prevent copy, characters are not readable) for the textbox.
         */
        private _password;
        /**
         *
         * (Optional)
         * Specifies whether or not a minimum length input constraint is enforced. The expected value is an integer greater
         * than 0. The default value is none.
         *
         *
         */
        private _minLength;
        /**
         *
         * (Optional)
         * Specifies whether or not a maximum length constraint is enforced. The expected value is an integer greater than 0.
         * The default is none.
         *
         */
        private _maxLength;
        /**
         * (Optional)
         * The attribute supplying the standard HTML5 placeholder attribute.
         */
        placeholder: string;
        static $inject: string[];
        /**
         * Constructor.
         *
         * @param $element The component element.
         * @param $timeout Angular timeout service. Currently used to execute a function when the model
         * controller is fully loaded.
         *
         */
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery, $attrs: ng.IAttributes, $timeout: ng.ITimeoutService, vm: IValidationManager, $exceptionHandler: ng.IExceptionHandlerService);
        /**
         * @Override from InputComponent#configureRender.
         *
         * The method used to configure the render.
         *
         */
        protected configureRender(): void;
        /**
         *
         * Retrieves the password input constraint.
         *
         * @returns {boolean} Returns true if the password input constraint is enabled, otherwise false.
         *
         */
        /**
         *
         * Update the input password constraint state.
         *
         * @param value The password constraint state.
         */
        password: boolean;
        /**
         * Retrieves the maximum length constraint value.
         *
         * @returns {number} Returns the maximum length constraint value.
         *
         */
        /**
         *
         * Update the maximum length constraint value.
         *
         * @param value The maximum length constraint.
         *
         */
        maxLength: number;
        /**
         *
         * Retrieves the minimum length constraint value.
         *
         * @returns {number} Returns the minimum length constraint value.
         *
         */
        /**
         *
         * Update the minimum length constraint value.
         *
         * @param value The minimum length constraint.
         *
         */
        minLength: number;
        /**
         *
         * @Override super method
         *
         */
        validationRules(): IValidationRule[];
    }
}


declare module ers.components.toolbar {
    /**
     * The data scope for the [[toolbarDirective]].
     */
    interface IToolbarScope extends ng.IScope {
        /** The toolbar orientation (horizontal/vertical). */
        direction: string;
        /** The space between each component of the toolbar. */
        spacing: string;
    }
}


declare module ers.components.toolbar {
    import BaseComponent = ers.components.core.BaseComponent;
    /**
     * Toolbar Directive
     * Main class for the toolbar component.
     */
    class ToolbarComponent extends BaseComponent {
        /** Constants */
        private static VT_DIRECTION;
        private static HZ_DIRECTION;
        private static SPACING;
        /** The direction (horizontal/vertical) of the toolbar. */
        direction: string;
        /** Space between each componenet of the toolbar. */
        spacing: string;
        /** Main DOM container. */
        private divContainer;
        /** Services injection  */
        static $inject: string[];
        /**
         * Class constructor.
         * @param $scope directive's scope.
         * @param $element directive's root element.
         * @param $attrs directive's attributes.
         */
        constructor($scope: IToolbarScope, $element: ng.IAugmentedJQuery, $attrs: ng.IAttributes);
        /**
         * Allowed way to manipulate DOM, set watchers, ...
         * @param $scope the directive scope
         * @param $element DOM element (directive start)
         * @param $attributes DOM attributes
         */
        link($scope: ng.IScope, $element: ng.IAugmentedJQuery, $attributes: ng.IAttributes): void;
        /**
         * Inspect dynamic DOM element.
         */
        protected addWatchers(): void;
        /**
         * Update display.
         */
        private renderUpdate();
    }
}


declare module ers.components.toolbar {
}

declare module ers.components.tooltip {
    import IPopInstance = ers.components.popover.IPopInstance;
    /**
     * The tooltip instance interface. There is currently no difference between tooltip and popover [[IPopInstance]].
     */
    interface ITooltip extends IPopInstance {
    }
}

declare module ers.components.tooltip {
    import IPopOptions = ers.components.popover.IPopOptions;
    interface ITooltipService {
        createTooltip(element: ng.IAugmentedJQuery, attr: ng.IAttributes, config?: IPopOptions, defaultConfig?: IPopOptions): ITooltip;
    }
}


declare module ers.components.tooltip {
    var _module: ng.IModule;
}

/**
 * Created by zhangfa on 7/3/2015.
 */
declare module ers.components.tree {
    /**
     * Interface of a tree component instance
     */
    interface ITree<T> {
        /**
         * Returns the element of the tree, in the form of a jquery object
         */
        element(): ng.IAugmentedJQuery;
        /**
         * Select an item in the tree. The selected item will be highlighted in UI and
         * can be referred by [[selectedItem]] property of the tree.
         *
         * @param item The node in tree data to be selected in UI.
         */
        selectItem(item: T): any;
        /**
         * Reverse operation of selectItem to make a selected item not selected.
         *
         * @param item The node in tree data to be selected in UI.
         */
        unselectItem(item: T): any;
        /**
         * @Readonly A reference to the selected item in tree data.
         */
        selectedItem: T;
        /**
         * @Readonly An array to reference the selected items in tree data.
         * If no item selected, will return an empty array [].
         * If multiple selection is turned off, will return an array containing the selectedItem only.
         */
        selectedItems: T[];
        /**
         * Unfold the children items of a node in the tree if it has any. Will do nothing if the node is already expanded.
         *
         * @param item The node in tree data to be expanded in UI.
         */
        expandItem(item: T): any;
        /**
         * Fold the children items of a node in the tree if it has any. Will do nothing if the node is already expanded.
         *
         * @param item The node in tree data to be collapsed in UI.
         */
        collapseItem(item: T): any;
        /**
         * Expand all the items in the tree.
         */
        expandAll(): void;
        /**
         * Collapse all the items in the tree.
         */
        collapseAll(): void;
        /**
         * Destroy the tree component.
         */
        destroy(): void;
    }
}

/**
 * Created by zhangfa on 7/1/2015.
 */
declare module ers.components.tree {
    /**
     * Internal wrapper of tree data node for UI binding.
     */
    interface ITreeItem<T> {
        /**
         * Tree data node
         */
        data: T;
        /**
         * @Optional Icon of the tree item, should be a class name of fontawesome.
         */
        icon: string;
        /**
         * Label of the tree item
         */
        label: string;
        /**
         * parent item of the tree item
         */
        parent: ITreeItem<T>;
        /**
         * Children items of the tree item
         */
        children: ITreeItem<T>[];
        /**
         * Indicate the collapsed/expanded state of the tree item. True means collapsed, false means expanded.
         */
        collapsed: boolean;
        /**
         * Indicate if the tree item is selected.
         */
        selected: boolean;
        loading: boolean;
        loaded: boolean;
        setLoader(loader: ITreeItemLoader<T>): any;
        /**
         * Lookup the given data node in the tree item itself and its children.
         * If found, return the tree item that contains the data; else return null.
         *
         * @param data
         */
        find(data: T): ITreeItem<T>;
        /**
         * Unfold the children items of the tree item
         */
        expand(e?: JQueryEventObject): ng.IPromise<void>;
        /**
         * Fold the children items of the tree item
         */
        collapse(e?: JQueryEventObject): void;
        /**
         * Set the "selected" property of the tree item and all of its children to be false
         */
        unselectAll(): void;
        /**
         * Expand tree item and all of its children
         */
        expandAll(): ng.IPromise<void[]>;
        /**
         * Collapse tree item and all of its children
         */
        collapseAll(): void;
        /**
         * Insert a record of child data at the end of children data array.
         * @param data The data to add.
         */
        addChild(data: T): void;
        /**
         * Insert a record of child data at specified position
         * @param data The data to add.
         * @param index Position of the child data to insert at
         */
        addChildAt(data: T, index: number): void;
        /**
         * Remove a record of child data
         * @param data The child data to remove
         */
        removeChild(data: T): T;
        /**
         * Remove a record of child data at specified position
         * @param index Position of the child data to remove
         */
        removeChildAt(index: number): T;
        /**
         * Remove self from parent
         */
        delete(): void;
    }
}

/**
 * Created by zhangfa on 7/6/2015.
 */
declare module ers.components.tree {
    /**
     * Interface of customization point of tree item renderer.
     *
     * Consumer can create an instance of this interface and register it as a angular service, and
     * set the name of service to the 'item-renderer' attribute of [[treeDirective]].
     *
     * #### Example
     *  * ```xml
     * <ers-tree tree-id="myTree"
     *           tree-data="ctrl.treeData"
     *           item-renderer="CheckboxTreeItemRenderer">
     * </ers-tree>
     * ```
     * and 'CheckboxTreeItemRenderer' is registered somewhere else
     *
     * ```
     *  class CheckboxTreeItemRenderer implements ITreeItemRenderer {
     *    ...
     *    public render(item:ITreeItem):JQuery {
     *      ...
     *    }
     *    ...
     *  }
     *  angular.module("...").service("CheckboxTreeItemRenderer", CheckboxTreeItemRenderer);
     *
     * ```
     */
    interface ITreeItemRenderer<T> {
        /**
         * Create an html element for the tree item, which will be appended to the tree component.
         *
         * @param item The tree item to render.
         * @Returns The jquery wrapped html element as a view of the tree item model.
         */
        render(item: ITreeItem<T>): JQuery;
    }
}

/**
 * Created by zhangfa on 7/15/2015.
 */
declare module ers.components.tree {
    /**
     * Interface of customization point for lazy loading of tree items.
     *
     * Consumer can create an instance of this interface and register it as a angular service, and
     * set the name of service to the 'item-loader' attribute of [[treeDirective]].
     *
     * #### Example
     *
     * ```xml
     *  <ers-tree tree-id="myTree"
     *            tree-data="treeData"
     *            item-loader="SampleItemLoader">
     *  </ers-tree>
     * ```
     * and 'SampleItemLoader' is registered somewhere else
     *
     * ```
     *  class SampleItemLoader implements ITreeItemLoader<ITreeNode> {
     *
     *    static $inject = ["backendService"];
     *
     *    constructor(private backendService:IBackendService) {}
     *
     *    public loadChildren(node:ITreeNode):ng.IPromise<ITreeNode> {
     *      return this.backendService.load(node.id);
     *    }
     *  }
     *
     *  angular.module("...").service("SampleItemLoader", SampleItemLoader);
     *
     * ```
     */
    interface ITreeItemLoader<T> {
        /**
         * Receives a data node of the tree and loads its children into it, and return the data node asynchronously.
         * @param data The data node whose children need to be loaded asynchronously.
         * @Returns The promise object which will pass the data node with its children loaded to the call back function.
         */
        loadChildren(data: T): ng.IPromise<T>;
    }
}

/**
 * Created by zhangfa on 7/9/2015.
 */
declare module ers.components.tree {
    /**
     * Inside scope of ers-tree directive
     */
    interface ITreeDirectiveScope<T> extends ng.IScope {
        treeData: Object[];
        root: ITreeItem<T>;
        treeId?: string;
        expandIcon?: string;
        collapseIcon?: string;
        itemRenderer?: ITreeItemRenderer<T>;
        itemLoader?: ITreeItemLoader<T>;
        treeDraggable?: boolean;
    }
}

declare module ers.components.tree {
    var CONSTANTS: {
        DATA_FORMAT: string;
        TREE_ITEM_MIDDLE_RANGE: number;
        DRAG_OVER_CLASS: string;
        DRAGGING_SOURCE_CLASS: string;
        DROP_EFFECT_ALLOWED: string;
        DRAG_INDICATOR_TEMPLATE: string;
    };
}

declare module ers.components.tree {
    var _module: ng.IModule;
}

declare module ers.components.contextmenu {
    /**
     * Creates a bindable object from a menu item.
     */
    class BindMenuItem implements IBindMenuItem {
        /** The menu item definition. */
        private item;
        /** The scope used by the menu item. */
        private context;
        /** The submenu, which is an an array of bindable menu item definitions. */
        private _children;
        /**
         * Default Constructor.
         * @param Item [[IMenuItem]].
         * @param Context Scope.
         */
        constructor(item: IMenuItem, context: Object);
        /** True if there is a separator immediately before the menu item.  */
        separatorBefore: boolean;
        /**
         * @returns {boolean} True if the linked scope defines the current menu item as enabled.
         */
        enabled: boolean;
        /**
         * @returns {boolean} True if the linked scope defines the current menu item as visible.
         */
        visible: boolean;
        /**
         * @returns {string} The current item label as defined by the linked scope.
         */
        label: string;
        /**
         * @returns {string} The current item icon name as defined by the linked scope.
         */
        icon: string;
        /**
         * The action the event handler executes on a mouse click.
         * @param e Click event.
         */
        onClick(e: JQueryEventObject): void;
        /**
         * @returns {IBindMenuItem[]} An array from BindMenuItem propagated from the item menu children.
         */
        children: IBindMenuItem[];
    }
}

declare module ers.components.contextmenu {
    /**
     * The helper class for handling context menu key board events.
     */
    class KeyBoardHelper {
        /** The [[ContextMenu]] instance. */
        private cm;
        /**
         *
         * The default constructor.
         * @param cm [[ContextMenu]) instance.
         *
         */
        constructor(cm: ContextMenu);
        /**
         *
         * The event handler for context menu keyboard interaction. Use the standard UP and DOWN arrows
         * to move the highlight and the ENTER key to choose and select the menu selection.
         *
         * @param e The keyboard event.
         *
         */
        onKeyDown(e: JQueryEventObject): void;
        /**
         *
         * Provides menu entry focus.
         *
         * @param step The menu entry index.
         * @returns {JQuery}.
         */
        private moveFocus(step);
    }
}

declare module ers.components.contextmenu {
    import IPlacementService = ers.components.core.service.IPlacementService;
    /**
     * The context menu implementation.
     */
    class ContextMenu implements IContextMenu {
        /** All context menu instances in the application. */
        private static instances;
        /** The host for the context menu directive. */
        private _host;
        /** The menu items definition.  */
        private _menuItems;
        /** The context menu DOM element. */
        private _element;
        /** The context menu HTML template.*/
        private _template;
        /** The context menu associated scope. */
        private _scope;
        /** The event triggering the context menu display. */
        private _trigger;
        /** True if only one context menu can be displayed at a time. */
        private _showExclusively;
        /** The context menu container.  */
        private _container;
        /** True if this contextMenu is inside of another context menu. */
        private _parentMenu;
        /** The compile service. */
        private $compile;
        /** The placement service. */
        protected placementService: IPlacementService;
        /**
         * Default constructor.
         * @param items The context menu items.
         * @param template The static or asynchronous HTML template, as a promise.
         * @param $compile The compile service.
         * @param ps The placement service.
         */
        constructor(items: IMenuItem[], template: string | ng.IPromise<string>, $compile: ng.ICompileService, ps: IPlacementService);
        /**
         *
         * The event handler definition defining all events that can be selected as trigger methods to
         * display the context menu.
         *
         * @type {{onTrigger: (function(JQueryEventObject): undefined), toggle: (function(JQueryEventObject): undefined)}}
         *
         */
        private triggerEventHandler;
        /**
         *
         * Binds an an event handler to a DOM element and triggers it as defined for the menu event.
         *
         *
         *
         * @param host The event handler attached to the DOM element.
         * @returns {ers.components.contextmenu.ContextMenu} Ensures proper chaining of methods.
         */
        bindTo(host: ng.IAugmentedJQuery): IContextMenu;
        /**
         * Sets the trigger method to display the context menu.
         *
         * @param trigger Trigger event name.
         * @returns {ers.components.contextmenu.ContextMenu} Ensures the proper chaining of methods.
         */
        triggeredBy(trigger: string): IContextMenu;
        /**
         * Get the showexclusively property.
         * @returns {boolean}
         */
        exclusively: boolean;
        /**
         *
         * Sets the showexclusively property.
         * @param exclusively boolean value to set.
         * @returns {ers.components.contextmenu.ContextMenu} Ensures the proper chaining of methods.
         *
         */
        setExclusively(exclusively: boolean): IContextMenu;
        /**
         *
         * Sets the future context menu container (DOM ID or DOM element).
         *
         * @param container ContextMenu container.
         * @returns {ers.components.contextmenu.ContextMenu} Ensures proper method chaining.
         *
         */
        appendTo(container: string | JQuery): IContextMenu;
        /**
         * @returns {ng.IAugmentedJQuery} The context menu directive host.
         */
        host(): ng.IAugmentedJQuery;
        /**
         *
         * @returns {IMenuItem[]} The menu item definition.
         *
         */
        menuItems(): IMenuItem[];
        /**
         *
         * Shows the context menu at the specified coordinates. If this context menu is set to display as exclusive,
         * all other content menus are hidden. If not, only the context menus set to exclusive display are hidden.
         *
         * @param x The X coordinate.
         * @param y The Y coordinate.
         */
        show(x?: number, y?: number): void;
        /**
         *
         * Hides the context menu.
         *
         */
        hide(): void;
        /**
         *
         * @returns {ng.IAugmentedJQuery} The ContextMenu main DOM element.
         *
         */
        element(): ng.IAugmentedJQuery;
        /**
         *
         * Destroy the existing event handlers on DOM elements.
         *
         */
        destroy(): void;
        /**
         *
         * Override this method when the menu needs to be placed at specific coordinates.
         *
         * @param x x coordinate of mouse click point
         * @param y y coordinate of mouse click point
         *
         *
         */
        protected setPosition(x?: number, y?: number): void;
        /**
         * Override this method when the menu needs to bind to a custom context menu.
         *
         * @returns {T} The context to which the the menu items are bound.
         *
         */
        protected getContext(): Object;
        /**
         *
         * @param template
         * @returns {ng.IAugmentedJQuery}
         *
         */
        private render(template);
        /**
         *
         * Finds the appropriate container according to the property container definition.
         *
         * If not specified, or if the container does not exist in the DOM attached to the body,
         * 'self' returns the DOM element holding the menu directive.
         *
         * @returns {JQuery} a JQuery DOM element
         *
         */
        protected getContainer(): JQuery;
        /**
         *
         * Creates a scope for the newly created context menu.
         * @returns {IContextMenuScope}
         *
         */
        private createScope();
        /**
         *
         * Sets a specific handler on the DOM body to ensure that the context menu is dismissed if the user
         * clicks elsewhere on the screen.
         *
         * @param on Activate or deactivate the content menu handlers.
         *
         */
        private toggleBodyClickHandler(on);
        /**
         *
         * The event handler dismissing the context menu that is triggered when the user interacts with the screen.
         *
         * @param evt Jquery event.
         */
        private onBodyClick;
        /**
         *
         * @returns {ng.IAugmentedJQuery|boolean} True if the context menu is currently displayed on screen.
         *
         */
        private isShown();
        /**
         *
         * Gets the parentMenu property value.
         *
         * @return IContextMenu as value.
         *
         */
        /**
         *
         * Sets the parentMenu property value.
         * @param pValue The value to set as IContextMenu.
         *
         */
        parentMenu: IContextMenu;
        /**
         *
         * Hides all context menus displayed when pIncludeNotExclusively is set to true. When
         * pIncludeNotExclusively is set to false, only exclusive menus are hidden.
         *
         *
         * @param pIncludeNotExclusive
         */
        private clearExists(pIncludeNotExclusive?);
        /**
         *
         * Returns true if the context menu is also part of the current parentMenu.
         *
         *
         * @param pMenu Menu to compare.
         * @returns {boolean}
         */
        private isParentMenu(pMenu);
        /**
         *
         * Adds an mouse down event handler on the context menu to avoid triggering a body handler event
         * instead of a mouse down event.
         *
         *
         */
        private addEventHandlers();
        /**
         *
         * Removes the mouse down event handler on the context menu to avoid triggering a body handler event
         * instead of a mouse down event.
         *
         */
        private removeEventHandlers();
        /**
         *
         * Stops the mouse down event handler on the context menu.
         *
         */
        private onContextMenuMouseDown(pEvt);
    }
}

declare module ers.components.contextmenu {
    /**
     * See [[IAnchoredContextMenu]] and [[IContextMenu]]
     */
    class AnchoredContextMenu extends ContextMenu implements IAnchoredContextMenu {
        /** Stores the context menu placement relative to the element to which it is attached, for example,
         * a context menu attached to a link menu.
         *
         *
         *
         */
        private placement;
        /**
         * @inheritDoc
         */
        withPlacement(placement: string): IAnchoredContextMenu;
        /**
         * @Override This is used specifically with the link menu and ensures that the context menu is displayed
         * next to the
         * element to which it is attached, and positioned as defined in the placement configuration.
         *
         *
         */
        protected setPosition(x?: number, y?: number): void;
        /**
         * @Override Uses the LinkMenu scope context.
         */
        protected getContext(): Object;
    }
}


declare module ers.components.contextmenu {
    import DecoratorComponent = ers.components.core.DecoratorComponent;
    interface IContextMenuDirectiveScope extends ng.IScope {
        /** Array of item definition. */
        menuItems: IMenuItem[];
    }
    /**
     * ContextMenuComponent class
     * @class
     *
     * ### Description
     *
     * The controller linked to the ers-context-menu directive.
     *
     */
    class ContextMenuComponent extends DecoratorComponent {
        static $inject: string[];
        /** Context menu handler. */
        private _contextMenu;
        /**
         * Constructor
         * @param $scope controller scope
         * @param $element root element (directive element)
         */
        constructor($scope: IContextMenuDirectiveScope, $element: ng.IAugmentedJQuery);
        contextMenu: IContextMenu;
    }
}

declare module ers.components.contextmenu {
}


declare module ers.components.contextmenu {
}

declare module ers.components.grid.renderer {
    class EditableRenderer implements IRenderer {
        renderer(params: ICellRendererParams): HTMLElement;
    }
}


declare module ers.components.popover {
    import ITriggerEventHandler = ers.components.utility.ITriggerEventHandler;
    import ITemplateHelper = ers.components.core.service.ITemplateHelper;
    import IPlacementService = ers.components.core.service.IPlacementService;
    /**
     *
     * Implementing [[IPopInstance]]
     *
     */
    class PopInstance implements IPopInstance, ITriggerEventHandler {
        private rootScopeService;
        private compileService;
        private qService;
        private timeoutService;
        private templateHelper;
        private placementService;
        private options;
        private $scope;
        private _target;
        private $host;
        private $container;
        private linker;
        private timeout;
        private hoverState;
        private triggerByClick;
        private builded;
        private isHiding;
        private isShowing;
        private isShown;
        private hoverShown;
        private hostOriginallyActive;
        /**
         * Constructor.
         *
         * @param $host The root element.
         * @param options Common options.
         * @param $rootScope Root scope.
         * @param $compile Angular compile service.
         * @param $q Angular promise service.
         * @param $timeout Angular timeout service.
         * @param th Template helper.
         * @param ps Custom Placement Service.
         */
        constructor($host: ng.IAugmentedJQuery, options: IPopOptions, $rootScope: ng.IRootScopeService, $compile: ng.ICompileService, $q: ng.IQService, $timeout: ng.ITimeoutService, th: ITemplateHelper, ps: IPlacementService);
        target: JQuery;
        /**
         *
         *  DOM listeners.
         *
         */
        /**
         *
         * The animation that runs when the popup becomes visible.
         *
         *
         */
        onTrigger: () => void;
        /**
         *
         * The animation that runs when a popup is dismissed or is no longer visible.
         *
         * @param evt event
         */
        onUntrigger: (evt?: Event) => void;
        /**
         *
         * The animation to run based on the popup's current visible state.
         *
         */
        toggle: () => void;
        /**
         *
         * Listen for the ESC key and hide the popup when invoked.
         *
         * @param evt JQuery event
         */
        private onKeyUp;
        /**
         *
         *
         * When a trigger focus is set, listen for the ESC key and hide the popup when invoked.
         *
         *
         * @param evt JQuery event.
         */
        private onFocusKeyUp;
        /**
         *
         * Manage the popup behavior on a body click.
         *
         * @param evt JQuery event
         * @returns {boolean}
         */
        private onBodyClick;
        /**
         *
         *  Public methods
         *
         */
        /**
         *
         * Root element accessor
         *
         * @returns {ng.IAugmentedJQuery} The root element
         */
        host(): ng.IAugmentedJQuery;
        /**
         *
         * Clean object (destructor)
         *
         */
        destroy(): void;
        /**
         *
         * The action to run to when opening a popup.
         *
         * @param callback The action to run to open a popup.
         */
        show(callback?: Function): void;
        /**
         *
         * The action to run when hiding a popup.
         *
         *
         * @param callback The action to run when hiding a popup.
         */
        hide(callback?: Function): void;
        /**
         *
         * The action to perform on popup focus.
         *
         *
         */
        focus(): void;
        /**
         * Scope accessor.
         *
         * @returns {IPopInstanceScope} The directive scope
         */
        scope(): IPopInstanceScope;
        /**
         *
         *  Private methods
         *
         */
        /**
         *
         * Initialize and build the popup.
         *
         */
        private init();
        /**
         *
         * Add the appropriate class to theme the popup.
         *
         */
        private updateTheme();
        /**
         *
         * Add the appropriate class to add or remove the popup arrow.
         *
         */
        private updateArrow();
        /**
         *
         * Create an isolated scope and add specific properties to it.
         *
         */
        private createScope();
        /**
         *
         * Build the popup.
         *
         * @returns {IPromise<TResult>|IPromise<undefined>} the object build (promise)
         */
        private build();
        /**
         *
         *
         * Based on the option set, load the template content.
         *
         *
         * @returns {any} The popup HTML content
         */
        private resovleTemplate();
        /**
         *
         * Define the container (DOM element) to which popup is attached.
         *
         * @returns {any} The container.
         */
        private resovleContainer();
        /**
         *
         * Resolve the template path to use, either the directive template, or the options template.
         *
         *
         * @param template Name of the template (path)
         * @returns {any} The appropriate template
         */
        private createLinker(template);
        /**
         *
         * Hide all open popups.
         *
         */
        private clearExists();
        /**
         *
         * Set the popup position.
         *
         */
        private applyPlacement();
        /**
         *
         * The actions to perform when hiding a popup.
         *
         * @param callback If defined, action to execute on hide.
         */
        private complateHide(callback);
        /**
         *
         * The actions to perform when a popup is opening.
         *
         * @param callback If defined, the action to execute when opening a popup.
         */
        private complateShow(callback);
    }
}

declare module ers.components.popover {
    import ITemplateHelper = ers.components.core.service.ITemplateHelper;
    import IPlacementService = ers.components.core.service.IPlacementService;
    /**
     * @Factory
     *
     * @param $rootScope Angular RootScope service
     * @param $compile Angular Compile service
     * @param $q The Angular Q service
     * @param th TemplateHelper Service
     * @returns [[IPopManager]]
     */
    function PopManagerFactory($rootScope: ng.IRootScopeService, $compile: ng.ICompileService, $q: ng.IQService, $timeout: ng.ITimeoutService, th: ITemplateHelper, ps: IPlacementService): IPopManager;
}

declare module ers.components.popover {
    /**
     * @Factory
     *
     * Factory that creates the [[IPopoverService]] instance.
     *
     * @param $sce SCE service.
     * @param pm PopManager instance.
     * @returns [[IPopoverService]]
     */
    function PopoverServiceFactory($sce: ng.ISCEService, pm: IPopManager): IPopoverService;
}

declare module ers.components.tooltip {
    /**
     * @ngdoc directive
     * @module ers.components.tooltip
     * @name ersTooltip
     * @restrict A
     *
     * @description
     *
     * Use `ers-tooltip` component to create a tooltip.  The tooltip is a popover displaying additional information
     * about a link, button, or other chosen component.
     *
     * ### Usage
     *
     * - **Contextualize Feedback Messages**&#151;It is critical that a user receives contextual feedback when an action
     * or function is committed to the database. This is particularly important for web-based applications.
     * - **Reduce miscommunication**&#151;Timely and accurate feedback and validations to the user reduce user
     * miscommunication and misunderstandings.
     * - **Better understand context**&#151;Enable the user to fully understand the context of the current action
     * and make accurate and measured decisions.
     *
     * ### Examples
     *
     * #### Tooltip Position
     *
     *  Use the `tt-placement` option to position the location of the tooltip display.
     * <code-editor identifier="example1" data-title="Tooltip Position"
     * html-content-url="demos/ersTooltip/tooltipPosition/index.html"
     * js-content-url="demos/ersTooltip/tooltipPosition/script.js"
     * css-content-url="demos/ersTooltip/tooltipPosition/styles.css" content-mode="html"></code-editor>
     *
     * #### Tooltip Themes
     *
     * Use the `tt-theme` option to set the theme and placement from the available options.
     *
     * <code-editor identifier="example1" data-title="Tooltip Theme"
     * html-content-url="demos/ersTooltip/tooltipThemes/index.html"
     * js-content-url="demos/ersTooltip/tooltipThemes/script.js"
     * css-content-url="demos/ersTooltip/tooltipThemes/styles.css" content-mode="html"></code-editor>
     *
     * #### Tooltip Triggers
     *
     * Use the `tt-trigger` attribute to determine the display trigger from the `click`, `hover` (default) and
     * `focus` options.
     *
     * <code-editor identifier="example1" data-title="Tooltip Triggers"
     * html-content-url="demos/ersTooltip/tooltipTriggers/index.html"
     * js-content-url="demos/ersTooltip/tooltipTriggers/script.js"
     * css-content-url="demos/ersTooltip/tooltipTriggers/styles.css" content-mode="html"></code-editor>
     *
     * #### Tooltip Delay
     *
     * Use the `tt-show-delay` and `tt-hide-delay` options to determine how much time elapses before the tooltip displays
     * or dismisses.
     *
     * <code-editor identifier="example1" data-title="Tooltip Delay"
     * html-content-url="demos/ersTooltip/tooltipDelay/index.html"
     * js-content-url="demos/ersTooltip/tooltipDelay/script.js"
     * css-content-url="demos/ersTooltip/tooltipDelay/styles.css" content-mode="html"></code-editor>
     *
     * #### Dynamic Content
     *
     * The `tt-title` attribute allows you to add dynamic content using standard Angular methods.
     *
     * <code-editor identifier="example1" data-title="Tooltip Delay"
     * html-content-url="demos/ersTooltip/dynamicContent/index.html"
     * js-content-url="demos/ersTooltip/dynamicContent/script.js"
     * css-content-url="demos/ersTooltip/dynamicContent/styles.css" content-mode="html"></code-editor>
     *
     * #### HTML Content
     *
     * You can also easily add HTML content by setting the `tt-html` attribute to `true`.
     *
     * <code-editor identifier="example1" data-title="HTML Content"
     * html-content-url="demos/ersTooltip/htmlContent/index.html"
     * js-content-url="demos/ersTooltip/htmlContent/script.js"
     * css-content-url="demos/ersTooltip/htmlContent/styles.css" content-mode="html"></code-editor>
     *
     * ### Design Guidelines
     *
     * Use tooltips on any icon or button that has no label or text, or where an action, or the results of an
     * action, may be unclear.
     *
     * #### Tooltip Length
     *
     * Create your tooltips with short and concise descriptions of the action, potential consequences, and, if needed,
     * a link to additional information. This makes the tooltips easy for the user to quickly digest and understand.
     * Ellipses display when the message is too long for the allotted text area.
     *
     * #### Tooltip Placement
     *
     * Use the following guidelines to position your tooltips. When in doubt, place the tooltips so that they cover only
     * whitespace or as little content as possible.
     *
     * - **Header**&#151;Place the tooltips below the icon or button in the header.
     * - **Toolbars**&#151;Place icons and buttons inside of a toolbar at the top of the content area and position
     *   those tooltips above the element so that it fills the whitespace above the toolbar and does
     *   not cover the content.
     * - **Grid Items**&#151;Never place tooltips below the element they describe. The user must always see the content
     * of the row they are manipulating.
     *
     *
     * ### Accessibility Guidelines
     *
     * No accessibility guidelines
     *
     *
     * @param {string} [tt-title] Sets the title to the content that appears when the tooltip is activated.
     *
     * ```xml
     *     <button ers-tooltip
     *             tt-title="This is a tooltip">
     *          A button
     *     </button>
     * ```
     *
     * @param {string} [tt-id] Specifies the ID attribute used for the generated DOM tooltip.
     *
     * @param {string} [ers-tooltip] Specifies the content appearing on tooltip activation. When `ers-tooltip` is set,
     * `tt-title` need not be set. When both ers-tooltip and tt-title are set, only the string set in ers-tooltip is
     * displayed as the tooltip.
     *
     * ```xml
     *     <button ers-tooltip="This is a tooltip">
     *          A button
     *     </button>
     * ```
     *
     * @param {string} [tt-trigger="hover"] Specifies the tooltip trigger. The available values are: 'click', 'focus',
     * and 'hover'. The default is 'hover'.
     *
     * ```xml
     *     <input type="text" ers-tooltip
     *            tt-title="Tooltip triggered by focus"
     *            tt-trigger="focus" />
     * ```
     *
     * @param {string} [tt-show-delay] Specifies, in milliseconds, the delay before the tooltip displays.
     * The default is 500ms.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-tooltip
     *             tt-show-delay="1000">
     *     </button>
     * ```
     *
     * @param {string}  [tt-hide-delay] Specifies the duration of the tool tip display in milliseconds.
     * The default is 1000 milliseconds.
     *
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-tooltip
     *             tt-hide-delay="1000">
     *             A button
     *     </button>
     * ```
     *
     *
     * @param {string}  [tt-placement] Specifies the position of the  tooltip relative to the anchor.
     * The available options are 'left', 'right', 'top', and 'bottom'. The default is 'right'.
     *
     *
     * ```xml
     *    <button ers-tooltip
     *            tt-placement="top">
     *         A button
     *    </button>
     * ```
     *
     * @param {string} [tt-theme] Specifies  the tooltip theme. The available values are: 'info' and 'success'.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-tooltip
     *             tt-theme="info">
     *     </button>
     * ```
     * @param {string} [po-template] Specifies the tooltip template. The template can be the url of an HTML file or an
     * HTML string.
     *
     * ##### Example - URL
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-tooltip
     *             po-template="components/tooltip/dynamicTemplate.html">
     *             Tooltip by url
     *     </button>
     * ```
     *
     * ##### Example - String
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-tooltip
     *             po-content="<div class='tooltip'><h3 class='tooltip-title'>title</h3><div class='tooltip-content'>
     *             content Tooltip by HTML string</div></div>">
     *     </button>
     * ```
     *
     * @param {boolean} [tt-html="false"] Enables the title of the tooltip to render an HTML string.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-tooltip
     *             tt-title="Hello <b>World</b>"
     *             html="true">
     *             A button
     *     </button>
     * ```
     *
     * @param {string} [tt-container="#container"] Specifies the container node to which the tooltip instance is
     * appended on opening. If
     * not specified, the tooltip instance node is appended to the HTML body. The default is body.
     *
     * @param {string} [tt-clear-exists] Specifies if more than one tooltip instance can be displayed at a time.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-tooltip
     *             tt-title="Hello <b>World</b>"
     *             tt-clear-exists="false">
     *             ...
     *     </button>
     * ```
     *
     * @param {boolean} [tt-show-arrow="false"] Specifies if an arrow is displayed with a tooltip instance. This is
     * only effective when no template or target is specified.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-tooltip
     *             tt-title="Hello <b>World</b>"
     *             tt-show-arrow="false">
     *             ...
     *     </button>
     * ```
     *
     * @param {boolean} [tt-lazy-load="true"] Specifies whether the tooltip instance is initialized immediately
     * when a page is loaded, or if initialization is delayed until the tooltip is completely loaded.
     *
     * ```xml
     *     <button class="btn btn-default"
     *             ers-tooltip
     *             tt-title="Hello <b>World</b>"
     *             tt-lazy-load="false">
     *             ...
     *     </button>
     * ```
     *
     *
     *
     *
     *
     *
     */
    function TooltipDirectiveFactory(tooltipService: ITooltipService): ng.IDirective;
}

declare module ers.components.tooltip {
    import IPopManager = ers.components.popover.IPopManager;
    /**
     * @Factory To create a tooltip service.
     *
     * @param $sce The injected SCE service.
     * @param pm The injected PopManager.
     * @returns [[ITooltipService]]
     */
    function TooltipServiceFactory($sce: ng.ISCEService, pm: IPopManager): ITooltipService;
}

declare module ers.components.tooltip {
}

declare module ers.components.tree {
    /**
     * @Private
     *
     * The abstract class for all drag and drop source in the tree component. Sub classes must override
     * two abstract methods, 'onDragStart',and 'onDragEnd'.
     *
     */
    class DnDSource<T> {
        protected element: ng.IAugmentedJQuery;
        protected data: T;
        bind(element: ng.IAugmentedJQuery): DnDSource<T>;
        unbind(): DnDSource<T>;
        setData(data: T): void;
        protected onDragStart: (e: JQueryEventObject) => void;
        protected onDragEnd: (e: JQueryEventObject) => void;
    }
}

declare module ers.components.tree {
    /**
     * @Private
     *
     * The abstract class for all drag and drop targets in the tree component. Sub classes must override
     * three abstract methods, 'onDragOver', onDragLeave, and 'onDrop'.
     *
     */
    class DnDTarget<T> {
        protected element: ng.IAugmentedJQuery;
        protected data: T;
        bind(element: ng.IAugmentedJQuery): DnDTarget<T>;
        unbind(): DnDTarget<T>;
        setData(data: T): void;
        protected onDragOver: (e: JQueryEventObject) => boolean;
        protected onDragLeave: (e: JQueryEventObject) => boolean;
        protected onDrop: (e: JQueryEventObject) => boolean;
        protected middleOfTarget(target: JQuery): number;
    }
}

declare module ers.components.tree {
    /**
     * @Private
     *
     * The source for the drag and drop tree item, used to enable the drag and drop [[ersTreeItem]] directive.
     *
     */
    class DnDTreeItemSource extends DnDSource<ITreeItem<Object>> {
        protected onDragStart: (e: JQueryEventObject) => void;
        protected onDragEnd: (e: JQueryEventObject) => void;
    }
}

declare module ers.components.tree {
    /**
     * @Private
     *
     * The drag and drop target for the [[ersTreeItem]] directive, used to enable a user to drag and  drop
     * a [[DnDSource]] instance over a [[ersTreeItem]] directive.
     *
     */
    class DnDTreeItemTarget extends DnDTarget<ITreeItem<Object>> {
        protected onDragOver: (e: JQueryEventObject) => boolean;
        protected onDragLeave: (e: JQueryEventObject) => boolean;
        protected onDrop: (e: JQueryEventObject) => boolean;
        private updateTargetData(de);
        private isInTheMiddle(e, target);
    }
}

declare module ers.components.tree {
    /**
     * @Private
     *
     * The drag and drop target for [[ersTreeItems]] directive, used to allow user to drag and drop
     * a [[DnDSource]] instance over a [[ersTreeItems]] directive.
     */
    class DnDTreeItemsTarget extends DnDTarget<ITreeItem<Object>> {
        protected onDragOver: (e: JQueryEventObject) => boolean;
        protected onDragLeave: (e: JQueryEventObject) => boolean;
        protected onDrop: (e: JQueryEventObject) => boolean;
        private getTargetTreeItem(e);
        private placeIndicator(indicator, target, e);
        private updateTargetData(de);
        private getDropIndex();
        private getIndicator();
        private removeIndicator();
        private isOverUpperHalf(mouseY, target);
        private isOverLowerHalf(mouseY, target);
    }
}

declare module ers.components.tree {
    /**
     * @Private
     *
     * A helper class to handle all tree component key board events.
     *
     */
    class KeyBoardHelper {
        private tree;
        constructor(tree: ITree<Object>);
        onKeyDown: (e: JQueryEventObject) => void;
        private moveFocus(step);
        private getFocusedItem();
        private selectFocused();
        private expandFocused();
        private collapseFocused();
        private getFocused();
        private getFocusables();
    }
}

declare module ers.components.tree {
    /**
     * Describes how to retrieve the treeitem properties from a treedata object.
     */
    interface IFieldDescriptor {
        /** The name of the property that is used as a label for a tree entry in the tree definition. */
        labelField: string;
        /** The name of the property that is used as an icon for tree entry in the tree definition. */
        iconField: string;
        /** The name of the property that is used as a child tree entry in the tree definition. */
        childrenField: string;
    }
    /**
     * @Private
     * Please refer to [[ITreeItem]].
     */
    class TreeItem<T> implements ITreeItem<T> {
        /** $q service. */
        static $q: ng.IQService;
        /** True if the tree is collapsed. */
        collapsed: boolean;
        /** True if the tree is selected. */
        selected: boolean;
        /** Data for this tree entry. */
        private _data;
        /** Parent tree entry. */
        private _parent;
        /** Children for this tree entry. */
        private _children;
        /** Field description, used to find the relevant property in the tree data. */
        private _descriptor;
        /** Children for this tree entry. */
        private _loaded;
        /** Children for this tree entry. */
        private _loading;
        /** Loader for tree data. */
        private _loaderDeferred;
        /**
         *
         * The default constructor.
         * @param data The data representing this tree item.
         * @param descriptor The field description used to find relevant data.
         * @param parent The parent tree entry.
         *
         */
        constructor(data: T, descriptor: IFieldDescriptor, parent?: ITreeItem<T>);
        /**
         *
         * Specifies the tree item loader.
         * @param loader [[ITreeItemLoader]]
         *
         */
        setLoader(loader: ITreeItemLoader<T>): void;
        /**
         * Returns true if the treeitem is loaded.
         */
        loaded: boolean;
        /**
         * @returns {boolean} True if the tree is currently loading.
         */
        loading: boolean;
        /**
         * @returns {T} TreeItem data.
         */
        /**
         *
         * Specifies the tree item data.
         * @param value The object.
         *
         *
         *
         */
        data: T;
        /**
         * @returns {any} The label displayed on the tree item.
         */
        /**
         *
         * Specifies the label displayed on the tree.
         * @param value string.
         *
         */
        label: string;
        /**
         * @returns {any|string} The font-awesome icon to load. If not font-awesome is not specified, or doesn't exist,
         * file-o is chosen to the child tree items.
         */
        icon: string;
        /**
         * @returns {ITreeItem<T>} The parent treeitem of this child item.
         */
        parent: ITreeItem<T>;
        /**
         *
         * @returns {ITreeItem<T>[]} An array of parent tree children.
         */
        children: ITreeItem<T>[];
        /**
         * @returns {boolean} True if treeitem has no children
         */
        isLeaf: boolean;
        /**
         *
         * Expand the parent tree if it is not expanded.
         *
         * @param e
         * @returns {any}
         */
        expand(e?: JQueryEventObject): ng.IPromise<void>;
        /**
         *
         * Creates a promise that handles the loading of treechildren, and, on success, changes the state
         * of the treeitem to expanded.
         *
         * @returns {any}
         * @private
         *
         */
        private _expand;
        /**
         * Changes the parent tree item to collapsed.
         * @param e
         * @returns {any}
         */
        collapse(e?: JQueryEventObject): void;
        /**
         *
         * Change the parent and all child tree items to unselected.
         *
         */
        unselectAll(): void;
        /**
         * Change the tree item to an expanded 'state', and, if this is not leaf, expand all child leafs.
         */
        expandAll(): ng.IPromise<any>;
        /**
         * Change the tree item to a collapsed 'state', and, if this is not a leaf, collapse all child leafs.
         */
        collapseAll(): void;
        /**
         * Finds a treeitem accoding its underlying treedata, if current item is not the corresponding item,
         * search through the item's children.
         * @param data TreeData used to retrieve the treeitem.
         * @returns {any} TreeItem
         */
        find(data: T): ITreeItem<T>;
        /**
         * Adds treedata to the current array of children data.
         * @param data TreeData to add.
         */
        addChild(data: T): void;
        /**
         *
         * Adds treedata to the current array of children data at a desired index.
         *
         * @param data TreeData to add.
         * @param index The index position at which to add treedata.
         */
        addChildAt(data: T, index: number): void;
        /**
         *
         * Removes the treedata of the current array of children data.
         *
         * @param data TreeData to remove.
         *
         */
        removeChild(data: T): T;
        /**
         *
         * Removes the treedata of the current array of child data at a desired index.
         * @param index The position from which to remove treedata.
         *
         */
        removeChildAt(index: number): T;
        /**
         * Remove the current item from its parent child array.
         */
        delete(): void;
        /**
         * Gets the children data.
         * @returns {T[]}
         */
        private childrenData;
    }
}

declare module ers.components.tree {
    import BaseController = ers.components.core.BaseController;
    /**
     * @Private
     *
     * The [[treeItemsDirective]] controller, and default implementation of [[ITree]].
     *
     */
    class TreeController<T> extends BaseController implements ITree<T> {
        static $inject: string[];
        parent: TreeController<T>;
        private parentItem;
        private treeId;
        private _selectedItem;
        private _selectedItems;
        private multipleSelection;
        private _treeDraggable;
        private keyBoardHelper;
        constructor($scope: ng.IScope, $element: ng.IAugmentedJQuery);
        /**
         *
         * @inheritDoc
         *
         */
        destroy(): void;
        /**
         * @returns {ng.IAugmentedJQuery} Tree root DOM element.
         */
        element(): ng.IAugmentedJQuery;
        /**
         *
         * Use the parameter item as the newly selected item. If selectedItems is not empty, all items are unselected.
         *
         *
         * @param item The treeItem to select or the treedata relevant to the treeitem.
         *
         */
        selectItem(item: T | ITreeItem<T>): void;
        /**
         *
         * Unselect a treeitem.
         *
         * @param item
         */
        unselectItem(item: T | ITreeItem<T>): void;
        /**
         *
         * When multiselection is set to true, select the tree item and set the tree item state to selected. When
         * multiselection is set to false, invert the current select item state and set the new item state to
         * selected.
         *
         * @param item
         * @returns {any}
         */
        onItemClick(item: ITreeItem<T>): any;
        /**
         * @returns {T|Object} The selected item data.
         */
        /**
         * Specify the selected item state.
         * @param value
         */
        selectedItem: T;
        /**
         * @returns {T[]} The array of selected tree items.
         */
        selectedItems: T[];
        /**
         * Expand a tree item.
         * @param item
         */
        expandItem(item: T | TreeItem<T>): void;
        /**
         * Collapse an tree item.
         * @param item
         */
        collapseItem(item: T | TreeItem<T>): void;
        /**
         * Expand all items.
         */
        expandAll(): void;
        /**
         * Collapse all items.
         */
        collapseAll(): void;
        /**
         * Unselect all items.
         */
        private unselectAll();
        /**
         *
         * Gets the names of each tree element and executes a method name on each.
         *
         *
         * @param methodName Method to execute.
         */
        private forEachItem(methodName);
        /**
         *
         * The current tree level for this controller.
         *
         * @returns {number}
         */
        level: number;
        /**
         *
         * True if the tree controller is on the root.
         *
         * @returns {boolean}
         */
        isRoot: boolean;
        /**
         *
         * Gets the value for drag property.
         *
         * @return boolean as value.
         */
        /**
         *
         * Sets the value on drag property.
         *
         * @param pValue value to set as boolean.
         *
         */
        treeDraggable: boolean;
        /**
         * Finds a treeitem according to its associated data.
         * @param data
         * @returns {any}
         */
        private find(data);
        /**
         *
         * Uses the Keyboardhelper to manage keyboard events.
         *
         * @param e
         *
         */
        private onKeyDown;
    }
}

declare module ers.components.tree {
    import BaseComponent = ers.components.core.BaseComponent;
    interface ITreeDirectiveAttrs extends ng.IAttributes {
        labelField: string;
        iconField: string;
        childrenField: string;
        itemRenderer?: string;
        itemLoader?: string;
        treeDraggable?: string;
    }
    /**
     * TreeComponent class
     * @class
     *
     * ### Description
     *
     * The controller linked to the ers-tree directive.
     *
     */
    class TreeComponent extends BaseComponent {
        static $inject: string[];
        /**
         * Constructor
         * @param $scope The controller scope.
         * @param $element The root element directive element.
         */
        constructor($scope: ITreeDirectiveScope<Object>, $element: ng.IAugmentedJQuery);
    }
}

declare module ers.components.tree {
}

declare module ers.components.tree {
}

declare module ers.components.tree {
}

declare module ers.components.tree {
}

declare module ers.components.core.service {
}

declare module ers.components.core.service {
}

/**
 * @ngdoc service
 * @name ResizeService
 * @module ers.components.core.service
 *
 * @description
 *
 * Defines a service that allows components to resize.  `ers.services.resize` is callable by all components.
 *
 * <!--
 * <h4 class="doc-title with-line slim-top-margin">Methods</h4>
 *
 *     resize(): void
 *
 * Notifies all registered listeners of a resize event. This is called either automatically, when a window resize event
 * occurs, or manually, when called from your code.
 *
 *     registerListener(<i>listener</i> : <font color="red">IResizeListener</font>):void
 *
 * Registers a listener that is called when a resize event request occurs.
 * //-->
 *
 */
declare module ers.components.core.service {
}

declare module ers.components.core.service {
}

declare module ers.components.core.service {
}
